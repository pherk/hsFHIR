%% HRL file generated by ERLSOM
%%
%% It is possible (and in some cases necessary) to change the name of
%% the record fields.
%%
%% It is possible to add default values, but be aware that these will
%% only be used when *writing* an xml document.


-ifndef(ERLSOM_ANY_ATTRIB_TYPES).
-define(ERLSOM_ANY_ATTRIB_TYPES, true).
-type anyAttrib()  :: {{string(),    %% name of the attribute
                        string()},   %% namespace
                       string()}.    %% value

-type anyAttribs() :: [anyAttrib()] | undefined.
-endif.

-ifndef(ERLSOM_QNAME_TYPES).
-define(ERLSOM_QNAME_TYPES, true).
%% xsd:QName values are translated to #qname{} records.
-record(qname, {uri :: string(),
                localPart :: string(),
                prefix :: string(),
                mappedPrefix :: string()}).
-endif.



-record('VisionEyes', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'VisionEyes'() :: #'VisionEyes'{}.


-record('VisionBase', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'VisionBase'() :: #'VisionBase'{}.


-record('VisionPrescription.Prism', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	amount :: decimal(),
	base :: 'VisionBase'()}).

-type 'VisionPrescription.Prism'() :: #'VisionPrescription.Prism'{}.


-record('VisionPrescription.LensSpecification', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	product :: 'CodeableConcept'(),
	eye :: 'VisionEyes'(),
	sphere :: decimal() | undefined,
	cylinder :: decimal() | undefined,
	axis :: integer() | undefined,
	prism :: ['VisionPrescription.Prism'()] | undefined,
	add :: decimal() | undefined,
	power :: decimal() | undefined,
	backCurve :: decimal() | undefined,
	diameter :: decimal() | undefined,
	duration :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	color :: string() | undefined,
	brand :: string() | undefined,
	note :: ['Annotation'()] | undefined}).

-type 'VisionPrescription.LensSpecification'() :: #'VisionPrescription.LensSpecification'{}.


-record('VisionPrescription', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	status :: 'FinancialResourceStatusCodes'(),
	created :: dateTime(),
	patient :: 'Reference'(),
	encounter :: 'Reference'() | undefined,
	dateWritten :: dateTime(),
	prescriber :: 'Reference'(),
	lensSpecification :: ['VisionPrescription.LensSpecification'()]}).

-type 'VisionPrescription'() :: #'VisionPrescription'{}.


-record(status, {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type status() :: #status{}.


-record('VerificationResult.Validator', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	organization :: 'Reference'(),
	identityCertificate :: string() | undefined,
	attestationSignature :: 'Signature'() | undefined}).

-type 'VerificationResult.Validator'() :: #'VerificationResult.Validator'{}.


-record('VerificationResult.Attestation', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	who :: 'Reference'() | undefined,
	onBehalfOf :: 'Reference'() | undefined,
	communicationMethod :: 'CodeableConcept'() | undefined,
	date :: date() | undefined,
	sourceIdentityCertificate :: string() | undefined,
	proxyIdentityCertificate :: string() | undefined,
	proxySignature :: 'Signature'() | undefined,
	sourceSignature :: 'Signature'() | undefined}).

-type 'VerificationResult.Attestation'() :: #'VerificationResult.Attestation'{}.


-record('VerificationResult.PrimarySource', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	who :: 'Reference'() | undefined,
	type :: ['CodeableConcept'()] | undefined,
	communicationMethod :: ['CodeableConcept'()] | undefined,
	validationStatus :: 'CodeableConcept'() | undefined,
	validationDate :: dateTime() | undefined,
	canPushUpdates :: 'CodeableConcept'() | undefined,
	pushTypeAvailable :: ['CodeableConcept'()] | undefined}).

-type 'VerificationResult.PrimarySource'() :: #'VerificationResult.PrimarySource'{}.


-record('VerificationResult', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	target :: ['Reference'()] | undefined,
	targetLocation :: [string()] | undefined,
	need :: 'CodeableConcept'() | undefined,
	status :: status(),
	statusDate :: dateTime() | undefined,
	validationType :: 'CodeableConcept'() | undefined,
	validationProcess :: ['CodeableConcept'()] | undefined,
	frequency :: 'Timing'() | undefined,
	lastPerformed :: dateTime() | undefined,
	nextScheduled :: date() | undefined,
	failureAction :: 'CodeableConcept'() | undefined,
	primarySource :: ['VerificationResult.PrimarySource'()] | undefined,
	attestation :: 'VerificationResult.Attestation'() | undefined,
	validator :: ['VerificationResult.Validator'()] | undefined}).

-type 'VerificationResult'() :: #'VerificationResult'{}.


-record('ValueSet.Contains', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	system :: uri() | undefined,
	abstract :: boolean() | undefined,
	inactive :: boolean() | undefined,
	version :: string() | undefined,
	code :: code() | undefined,
	display :: string() | undefined,
	designation :: ['ValueSet.Designation'()] | undefined,
	contains :: ['ValueSet.Contains'()] | undefined}).

-type 'ValueSet.Contains'() :: #'ValueSet.Contains'{}.


-record('ValueSet.Parameter', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	name :: string(),
	choice :: uri() | string() | integer() | decimal() | dateTime() | code() | boolean() | undefined}).

-type 'ValueSet.Parameter'() :: #'ValueSet.Parameter'{}.


-record('ValueSet.Expansion', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: uri() | undefined,
	timestamp :: dateTime(),
	total :: integer() | undefined,
	offset :: integer() | undefined,
	parameter :: ['ValueSet.Parameter'()] | undefined,
	contains :: ['ValueSet.Contains'()] | undefined}).

-type 'ValueSet.Expansion'() :: #'ValueSet.Expansion'{}.


-record('ValueSet.Filter', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	property :: code(),
	op :: 'FilterOperator'(),
	value :: string()}).

-type 'ValueSet.Filter'() :: #'ValueSet.Filter'{}.


-record('ValueSet.Designation', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	language :: code() | undefined,
	use :: 'Coding'() | undefined,
	value :: string()}).

-type 'ValueSet.Designation'() :: #'ValueSet.Designation'{}.


-record('ValueSet.Concept', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	code :: code(),
	display :: string() | undefined,
	designation :: ['ValueSet.Designation'()] | undefined}).

-type 'ValueSet.Concept'() :: #'ValueSet.Concept'{}.


-record('ValueSet.Include', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	system :: uri() | undefined,
	version :: string() | undefined,
	concept :: ['ValueSet.Concept'()] | undefined,
	filter :: ['ValueSet.Filter'()] | undefined,
	valueSet :: [canonical()] | undefined}).

-type 'ValueSet.Include'() :: #'ValueSet.Include'{}.


-record('ValueSet.Compose', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	lockedDate :: date() | undefined,
	inactive :: boolean() | undefined,
	include :: ['ValueSet.Include'()],
	exclude :: ['ValueSet.Include'()] | undefined}).

-type 'ValueSet.Compose'() :: #'ValueSet.Compose'{}.


-record('ValueSet', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	url :: uri() | undefined,
	identifier :: ['Identifier'()] | undefined,
	version :: string() | undefined,
	name :: string() | undefined,
	title :: string() | undefined,
	status :: 'PublicationStatus'(),
	experimental :: boolean() | undefined,
	date :: dateTime() | undefined,
	publisher :: string() | undefined,
	contact :: ['ContactDetail'()] | undefined,
	description :: markdown() | undefined,
	useContext :: ['UsageContext'()] | undefined,
	jurisdiction :: ['CodeableConcept'()] | undefined,
	immutable :: boolean() | undefined,
	purpose :: markdown() | undefined,
	copyright :: markdown() | undefined,
	compose :: 'ValueSet.Compose'() | undefined,
	expansion :: 'ValueSet.Expansion'() | undefined}).

-type 'ValueSet'() :: #'ValueSet'{}.


-record('TestScriptRequestMethodCode', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'TestScriptRequestMethodCode'() :: #'TestScriptRequestMethodCode'{}.


-record('AssertionResponseTypes', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'AssertionResponseTypes'() :: #'AssertionResponseTypes'{}.


-record('AssertionOperatorType', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'AssertionOperatorType'() :: #'AssertionOperatorType'{}.


-record('AssertionDirectionType', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'AssertionDirectionType'() :: #'AssertionDirectionType'{}.


-record('TestScript.Action2', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	operation :: 'TestScript.Operation'()}).

-type 'TestScript.Action2'() :: #'TestScript.Action2'{}.


-record('TestScript.Teardown', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	action :: ['TestScript.Action2'()]}).

-type 'TestScript.Teardown'() :: #'TestScript.Teardown'{}.


-record('TestScript.Action1', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	operation :: 'TestScript.Operation'() | undefined,
	assert :: 'TestScript.Assert'() | undefined}).

-type 'TestScript.Action1'() :: #'TestScript.Action1'{}.


-record('TestScript.Test', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	name :: string() | undefined,
	description :: string() | undefined,
	action :: ['TestScript.Action1'()]}).

-type 'TestScript.Test'() :: #'TestScript.Test'{}.


-record('TestScript.Assert', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	label :: string() | undefined,
	description :: string() | undefined,
	direction :: 'AssertionDirectionType'() | undefined,
	compareToSourceId :: string() | undefined,
	compareToSourceExpression :: string() | undefined,
	compareToSourcePath :: string() | undefined,
	contentType :: code() | undefined,
	expression :: string() | undefined,
	headerField :: string() | undefined,
	minimumId :: string() | undefined,
	navigationLinks :: boolean() | undefined,
	operator :: 'AssertionOperatorType'() | undefined,
	path :: string() | undefined,
	requestMethod :: 'TestScriptRequestMethodCode'() | undefined,
	requestURL :: string() | undefined,
	resource :: code() | undefined,
	response :: 'AssertionResponseTypes'() | undefined,
	responseCode :: string() | undefined,
	sourceId :: id() | undefined,
	validateProfileId :: id() | undefined,
	value :: string() | undefined,
	warningOnly :: boolean()}).

-type 'TestScript.Assert'() :: #'TestScript.Assert'{}.


-record('TestScript.RequestHeader', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	field :: string(),
	value :: string()}).

-type 'TestScript.RequestHeader'() :: #'TestScript.RequestHeader'{}.


-record('TestScript.Operation', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: 'Coding'() | undefined,
	resource :: code() | undefined,
	label :: string() | undefined,
	description :: string() | undefined,
	accept :: code() | undefined,
	contentType :: code() | undefined,
	destination :: integer() | undefined,
	encodeRequestUrl :: boolean(),
	method :: 'TestScriptRequestMethodCode'() | undefined,
	origin :: integer() | undefined,
	params :: string() | undefined,
	requestHeader :: ['TestScript.RequestHeader'()] | undefined,
	requestId :: id() | undefined,
	responseId :: id() | undefined,
	sourceId :: id() | undefined,
	targetId :: id() | undefined,
	url :: string() | undefined}).

-type 'TestScript.Operation'() :: #'TestScript.Operation'{}.


-record('TestScript.Action', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	operation :: 'TestScript.Operation'() | undefined,
	assert :: 'TestScript.Assert'() | undefined}).

-type 'TestScript.Action'() :: #'TestScript.Action'{}.


-record('TestScript.Setup', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	action :: ['TestScript.Action'()]}).

-type 'TestScript.Setup'() :: #'TestScript.Setup'{}.


-record('TestScript.Variable', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	name :: string(),
	defaultValue :: string() | undefined,
	description :: string() | undefined,
	expression :: string() | undefined,
	headerField :: string() | undefined,
	hint :: string() | undefined,
	path :: string() | undefined,
	sourceId :: id() | undefined}).

-type 'TestScript.Variable'() :: #'TestScript.Variable'{}.


-record('TestScript.Fixture', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	autocreate :: boolean(),
	autodelete :: boolean(),
	resource :: 'Reference'() | undefined}).

-type 'TestScript.Fixture'() :: #'TestScript.Fixture'{}.


-record('TestScript.Capability', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	required :: boolean(),
	validated :: boolean(),
	description :: string() | undefined,
	origin :: [integer()] | undefined,
	destination :: integer() | undefined,
	link :: [uri()] | undefined,
	capabilities :: canonical()}).

-type 'TestScript.Capability'() :: #'TestScript.Capability'{}.


-record('TestScript.Link', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	url :: uri(),
	description :: string() | undefined}).

-type 'TestScript.Link'() :: #'TestScript.Link'{}.


-record('TestScript.Metadata', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	link :: ['TestScript.Link'()] | undefined,
	capability :: ['TestScript.Capability'()]}).

-type 'TestScript.Metadata'() :: #'TestScript.Metadata'{}.


-record('TestScript.Destination', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	index :: integer(),
	profile :: 'Coding'()}).

-type 'TestScript.Destination'() :: #'TestScript.Destination'{}.


-record('TestScript.Origin', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	index :: integer(),
	profile :: 'Coding'()}).

-type 'TestScript.Origin'() :: #'TestScript.Origin'{}.


-record('TestScript', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	url :: uri(),
	identifier :: 'Identifier'() | undefined,
	version :: string() | undefined,
	name :: string(),
	title :: string() | undefined,
	status :: 'PublicationStatus'(),
	experimental :: boolean() | undefined,
	date :: dateTime() | undefined,
	publisher :: string() | undefined,
	contact :: ['ContactDetail'()] | undefined,
	description :: markdown() | undefined,
	useContext :: ['UsageContext'()] | undefined,
	jurisdiction :: ['CodeableConcept'()] | undefined,
	purpose :: markdown() | undefined,
	copyright :: markdown() | undefined,
	origin :: ['TestScript.Origin'()] | undefined,
	destination :: ['TestScript.Destination'()] | undefined,
	metadata :: 'TestScript.Metadata'() | undefined,
	fixture :: ['TestScript.Fixture'()] | undefined,
	profile :: ['Reference'()] | undefined,
	variable :: ['TestScript.Variable'()] | undefined,
	setup :: 'TestScript.Setup'() | undefined,
	test :: ['TestScript.Test'()] | undefined,
	teardown :: 'TestScript.Teardown'() | undefined}).

-type 'TestScript'() :: #'TestScript'{}.


-record('TestReportResult', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'TestReportResult'() :: #'TestReportResult'{}.


-record('TestReportParticipantType', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'TestReportParticipantType'() :: #'TestReportParticipantType'{}.


-record('TestReportActionResult', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'TestReportActionResult'() :: #'TestReportActionResult'{}.


-record('TestReportStatus', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'TestReportStatus'() :: #'TestReportStatus'{}.


-record('TestReport.Action2', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	operation :: 'TestReport.Operation'()}).

-type 'TestReport.Action2'() :: #'TestReport.Action2'{}.


-record('TestReport.Teardown', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	action :: ['TestReport.Action2'()]}).

-type 'TestReport.Teardown'() :: #'TestReport.Teardown'{}.


-record('TestReport.Action1', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	operation :: 'TestReport.Operation'() | undefined,
	assert :: 'TestReport.Assert'() | undefined}).

-type 'TestReport.Action1'() :: #'TestReport.Action1'{}.


-record('TestReport.Test', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	name :: string() | undefined,
	description :: string() | undefined,
	action :: ['TestReport.Action1'()]}).

-type 'TestReport.Test'() :: #'TestReport.Test'{}.


-record('TestReport.Assert', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	result :: 'TestReportActionResult'(),
	message :: markdown() | undefined,
	detail :: string() | undefined}).

-type 'TestReport.Assert'() :: #'TestReport.Assert'{}.


-record('TestReport.Operation', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	result :: 'TestReportActionResult'(),
	message :: markdown() | undefined,
	detail :: uri() | undefined}).

-type 'TestReport.Operation'() :: #'TestReport.Operation'{}.


-record('TestReport.Action', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	operation :: 'TestReport.Operation'() | undefined,
	assert :: 'TestReport.Assert'() | undefined}).

-type 'TestReport.Action'() :: #'TestReport.Action'{}.


-record('TestReport.Setup', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	action :: ['TestReport.Action'()]}).

-type 'TestReport.Setup'() :: #'TestReport.Setup'{}.


-record('TestReport.Participant', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: 'TestReportParticipantType'(),
	uri :: uri(),
	display :: string() | undefined}).

-type 'TestReport.Participant'() :: #'TestReport.Participant'{}.


-record('TestReport', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: 'Identifier'() | undefined,
	name :: string() | undefined,
	status :: 'TestReportStatus'(),
	testScript :: 'Reference'(),
	result :: 'TestReportResult'(),
	score :: decimal() | undefined,
	tester :: string() | undefined,
	issued :: dateTime() | undefined,
	participant :: ['TestReport.Participant'()] | undefined,
	setup :: 'TestReport.Setup'() | undefined,
	test :: ['TestReport.Test'()] | undefined,
	teardown :: 'TestReport.Teardown'() | undefined}).

-type 'TestReport'() :: #'TestReport'{}.


-record('CodeSearchSupport', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'CodeSearchSupport'() :: #'CodeSearchSupport'{}.


-record('TerminologyCapabilities.Closure', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	translation :: boolean() | undefined}).

-type 'TerminologyCapabilities.Closure'() :: #'TerminologyCapabilities.Closure'{}.


-record('TerminologyCapabilities.Translation', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	needsMap :: boolean()}).

-type 'TerminologyCapabilities.Translation'() :: #'TerminologyCapabilities.Translation'{}.


-record('TerminologyCapabilities.ValidateCode', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	translations :: boolean()}).

-type 'TerminologyCapabilities.ValidateCode'() :: #'TerminologyCapabilities.ValidateCode'{}.


-record('TerminologyCapabilities.Parameter', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	name :: code(),
	documentation :: string() | undefined}).

-type 'TerminologyCapabilities.Parameter'() :: #'TerminologyCapabilities.Parameter'{}.


-record('TerminologyCapabilities.Expansion', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	hierarchical :: boolean() | undefined,
	paging :: boolean() | undefined,
	incomplete :: boolean() | undefined,
	parameter :: ['TerminologyCapabilities.Parameter'()] | undefined,
	textFilter :: markdown() | undefined}).

-type 'TerminologyCapabilities.Expansion'() :: #'TerminologyCapabilities.Expansion'{}.


-record('TerminologyCapabilities.Filter', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	code :: code(),
	op :: [code()]}).

-type 'TerminologyCapabilities.Filter'() :: #'TerminologyCapabilities.Filter'{}.


-record('TerminologyCapabilities.Version', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	code :: string() | undefined,
	isDefault :: boolean() | undefined,
	compositional :: boolean() | undefined,
	language :: [code()] | undefined,
	filter :: ['TerminologyCapabilities.Filter'()] | undefined,
	property :: [code()] | undefined}).

-type 'TerminologyCapabilities.Version'() :: #'TerminologyCapabilities.Version'{}.


-record('TerminologyCapabilities.CodeSystem', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	uri :: canonical() | undefined,
	version :: ['TerminologyCapabilities.Version'()] | undefined,
	subsumption :: boolean() | undefined}).

-type 'TerminologyCapabilities.CodeSystem'() :: #'TerminologyCapabilities.CodeSystem'{}.


-record('TerminologyCapabilities.Implementation', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	description :: string(),
	url :: url() | undefined}).

-type 'TerminologyCapabilities.Implementation'() :: #'TerminologyCapabilities.Implementation'{}.


-record('TerminologyCapabilities.Software', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	name :: string(),
	version :: string() | undefined}).

-type 'TerminologyCapabilities.Software'() :: #'TerminologyCapabilities.Software'{}.


-record('TerminologyCapabilities', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	url :: uri() | undefined,
	version :: string() | undefined,
	name :: string() | undefined,
	title :: string() | undefined,
	status :: 'PublicationStatus'(),
	experimental :: boolean() | undefined,
	date :: dateTime(),
	publisher :: string() | undefined,
	contact :: ['ContactDetail'()] | undefined,
	description :: markdown() | undefined,
	useContext :: ['UsageContext'()] | undefined,
	jurisdiction :: ['CodeableConcept'()] | undefined,
	purpose :: markdown() | undefined,
	copyright :: markdown() | undefined,
	kind :: 'CapabilityStatementKind'(),
	software :: 'TerminologyCapabilities.Software'() | undefined,
	implementation :: 'TerminologyCapabilities.Implementation'() | undefined,
	lockedDate :: boolean() | undefined,
	codeSystem :: ['TerminologyCapabilities.CodeSystem'()] | undefined,
	expansion :: 'TerminologyCapabilities.Expansion'() | undefined,
	codeSearch :: 'CodeSearchSupport'() | undefined,
	validateCode :: 'TerminologyCapabilities.ValidateCode'() | undefined,
	translation :: 'TerminologyCapabilities.Translation'() | undefined,
	closure :: 'TerminologyCapabilities.Closure'() | undefined}).

-type 'TerminologyCapabilities'() :: #'TerminologyCapabilities'{}.


-record('TaskIntent', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'TaskIntent'() :: #'TaskIntent'{}.


-record('TaskStatus', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'TaskStatus'() :: #'TaskStatus'{}.


-record('Task.Output', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: 'CodeableConcept'(),
	choice :: uuid() | 'UsageContext'() | url() | uri() | unsignedInt() | 'TriggerDefinition'() | 'Timing'() | time() | string() | 'Signature'() | 'SampledData'() | 'RelatedArtifact'() | 'Reference'() | 'Ratio'() | 'Range'() | 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | positiveInt() | 'Period'() | 'ParameterDefinition'() | oid() | 'Money'() | markdown() | integer() | instant() | 'Identifier'() | id() | 'HumanName'() | 'Expression'() | 'Duration'() | 'Dosage'() | 'Distance'() | decimal() | dateTime() | date() | 'DataRequirement'() | 'Count'() | 'Contributor'() | 'ContactPoint'() | 'ContactDetail'() | 'Coding'() | 'CodeableConcept'() | code() | canonical() | boolean() | base64Binary() | 'Attachment'() | 'Annotation'() | 'Age'() | 'Address'()}).

-type 'Task.Output'() :: #'Task.Output'{}.


-record('Task.Input', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: 'CodeableConcept'(),
	choice :: uuid() | 'UsageContext'() | url() | uri() | unsignedInt() | 'TriggerDefinition'() | 'Timing'() | time() | string() | 'Signature'() | 'SampledData'() | 'RelatedArtifact'() | 'Reference'() | 'Ratio'() | 'Range'() | 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | positiveInt() | 'Period'() | 'ParameterDefinition'() | oid() | 'Money'() | markdown() | integer() | instant() | 'Identifier'() | id() | 'HumanName'() | 'Expression'() | 'Duration'() | 'Dosage'() | 'Distance'() | decimal() | dateTime() | date() | 'DataRequirement'() | 'Count'() | 'Contributor'() | 'ContactPoint'() | 'ContactDetail'() | 'Coding'() | 'CodeableConcept'() | code() | canonical() | boolean() | base64Binary() | 'Attachment'() | 'Annotation'() | 'Age'() | 'Address'()}).

-type 'Task.Input'() :: #'Task.Input'{}.


-record('Task.Restriction', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	repetitions :: positiveInt() | undefined,
	period :: 'Period'() | undefined,
	recipient :: ['Reference'()] | undefined}).

-type 'Task.Restriction'() :: #'Task.Restriction'{}.


-record('Task', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	instantiatesCanonical :: canonical() | undefined,
	instantiatesUri :: uri() | undefined,
	basedOn :: ['Reference'()] | undefined,
	groupIdentifier :: 'Identifier'() | undefined,
	partOf :: ['Reference'()] | undefined,
	status :: 'TaskStatus'(),
	statusReason :: 'CodeableConcept'() | undefined,
	businessStatus :: 'CodeableConcept'() | undefined,
	intent :: 'TaskIntent'(),
	priority :: 'RequestPriority'() | undefined,
	code :: 'CodeableConcept'() | undefined,
	description :: string() | undefined,
	focus :: 'Reference'() | undefined,
	for :: 'Reference'() | undefined,
	encounter :: 'Reference'() | undefined,
	executionPeriod :: 'Period'() | undefined,
	authoredOn :: dateTime() | undefined,
	lastModified :: dateTime() | undefined,
	requester :: 'Reference'() | undefined,
	performerType :: ['CodeableConcept'()] | undefined,
	owner :: 'Reference'() | undefined,
	location :: 'Reference'() | undefined,
	reasonCode :: 'CodeableConcept'() | undefined,
	reasonReference :: 'Reference'() | undefined,
	insurance :: ['Reference'()] | undefined,
	note :: ['Annotation'()] | undefined,
	relevantHistory :: ['Reference'()] | undefined,
	restriction :: 'Task.Restriction'() | undefined,
	input :: ['Task.Input'()] | undefined,
	output :: ['Task.Output'()] | undefined}).

-type 'Task'() :: #'Task'{}.


-record('SupplyRequestStatus', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'SupplyRequestStatus'() :: #'SupplyRequestStatus'{}.


-record('SupplyRequest.Parameter', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	code :: 'CodeableConcept'() | undefined,
	choice :: 'Range'() | 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | 'CodeableConcept'() | boolean() | undefined}).

-type 'SupplyRequest.Parameter'() :: #'SupplyRequest.Parameter'{}.


-record('SupplyRequest', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	status :: 'SupplyRequestStatus'() | undefined,
	category :: 'CodeableConcept'() | undefined,
	priority :: 'RequestPriority'() | undefined,
	choice :: 'Reference'() | 'CodeableConcept'(),
	quantity :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'(),
	parameter :: ['SupplyRequest.Parameter'()] | undefined,
	choice1 :: 'Timing'() | 'Period'() | dateTime() | undefined,
	authoredOn :: dateTime() | undefined,
	requester :: 'Reference'() | undefined,
	supplier :: ['Reference'()] | undefined,
	reasonCode :: ['CodeableConcept'()] | undefined,
	reasonReference :: ['Reference'()] | undefined,
	deliverFrom :: 'Reference'() | undefined,
	deliverTo :: 'Reference'() | undefined}).

-type 'SupplyRequest'() :: #'SupplyRequest'{}.


-record('SupplyDeliveryStatus', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'SupplyDeliveryStatus'() :: #'SupplyDeliveryStatus'{}.


-record('SupplyDelivery.SuppliedItem', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	quantity :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	choice :: 'Reference'() | 'CodeableConcept'() | undefined}).

-type 'SupplyDelivery.SuppliedItem'() :: #'SupplyDelivery.SuppliedItem'{}.


-record('SupplyDelivery', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	basedOn :: ['Reference'()] | undefined,
	partOf :: ['Reference'()] | undefined,
	status :: 'SupplyDeliveryStatus'() | undefined,
	patient :: 'Reference'() | undefined,
	type :: 'CodeableConcept'() | undefined,
	suppliedItem :: 'SupplyDelivery.SuppliedItem'() | undefined,
	choice :: 'Timing'() | 'Period'() | dateTime() | undefined,
	supplier :: 'Reference'() | undefined,
	destination :: 'Reference'() | undefined,
	receiver :: ['Reference'()] | undefined}).

-type 'SupplyDelivery'() :: #'SupplyDelivery'{}.


-record('SubstanceSpecification.Relationship', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	choice :: 'Reference'() | 'CodeableConcept'() | undefined,
	relationship :: 'CodeableConcept'() | undefined,
	isDefining :: boolean() | undefined,
	choice1 :: string() | 'Ratio'() | 'Range'() | 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	amountRatioLowLimit :: 'Ratio'() | undefined,
	amountType :: 'CodeableConcept'() | undefined,
	source :: ['Reference'()] | undefined}).

-type 'SubstanceSpecification.Relationship'() :: #'SubstanceSpecification.Relationship'{}.


-record('SubstanceSpecification.Official', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	authority :: 'CodeableConcept'() | undefined,
	status :: 'CodeableConcept'() | undefined,
	date :: dateTime() | undefined}).

-type 'SubstanceSpecification.Official'() :: #'SubstanceSpecification.Official'{}.


-record('SubstanceSpecification.Name', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	name :: string(),
	type :: 'CodeableConcept'() | undefined,
	status :: 'CodeableConcept'() | undefined,
	preferred :: boolean() | undefined,
	language :: ['CodeableConcept'()] | undefined,
	domain :: ['CodeableConcept'()] | undefined,
	jurisdiction :: ['CodeableConcept'()] | undefined,
	synonym :: ['SubstanceSpecification.Name'()] | undefined,
	translation :: ['SubstanceSpecification.Name'()] | undefined,
	official :: ['SubstanceSpecification.Official'()] | undefined,
	source :: ['Reference'()] | undefined}).

-type 'SubstanceSpecification.Name'() :: #'SubstanceSpecification.Name'{}.


-record('SubstanceSpecification.Code', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	code :: 'CodeableConcept'() | undefined,
	status :: 'CodeableConcept'() | undefined,
	statusDate :: dateTime() | undefined,
	comment :: string() | undefined,
	source :: ['Reference'()] | undefined}).

-type 'SubstanceSpecification.Code'() :: #'SubstanceSpecification.Code'{}.


-record('SubstanceSpecification.Representation', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: 'CodeableConcept'() | undefined,
	representation :: string() | undefined,
	attachment :: 'Attachment'() | undefined}).

-type 'SubstanceSpecification.Representation'() :: #'SubstanceSpecification.Representation'{}.


-record('SubstanceSpecification.MolecularWeight', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	method :: 'CodeableConcept'() | undefined,
	type :: 'CodeableConcept'() | undefined,
	amount :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined}).

-type 'SubstanceSpecification.MolecularWeight'() :: #'SubstanceSpecification.MolecularWeight'{}.


-record('SubstanceSpecification.Isotope', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: 'Identifier'() | undefined,
	name :: 'CodeableConcept'() | undefined,
	substitution :: 'CodeableConcept'() | undefined,
	halfLife :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	molecularWeight :: 'SubstanceSpecification.MolecularWeight'() | undefined}).

-type 'SubstanceSpecification.Isotope'() :: #'SubstanceSpecification.Isotope'{}.


-record('SubstanceSpecification.Structure', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	stereochemistry :: 'CodeableConcept'() | undefined,
	opticalActivity :: 'CodeableConcept'() | undefined,
	molecularFormula :: string() | undefined,
	molecularFormulaByMoiety :: string() | undefined,
	isotope :: ['SubstanceSpecification.Isotope'()] | undefined,
	molecularWeight :: 'SubstanceSpecification.MolecularWeight'() | undefined,
	source :: ['Reference'()] | undefined,
	representation :: ['SubstanceSpecification.Representation'()] | undefined}).

-type 'SubstanceSpecification.Structure'() :: #'SubstanceSpecification.Structure'{}.


-record('SubstanceSpecification.Property', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	category :: 'CodeableConcept'() | undefined,
	code :: 'CodeableConcept'() | undefined,
	parameters :: string() | undefined,
	choice :: 'Reference'() | 'CodeableConcept'() | undefined,
	choice1 :: string() | 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined}).

-type 'SubstanceSpecification.Property'() :: #'SubstanceSpecification.Property'{}.


-record('SubstanceSpecification.Moiety', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	role :: 'CodeableConcept'() | undefined,
	identifier :: 'Identifier'() | undefined,
	name :: string() | undefined,
	stereochemistry :: 'CodeableConcept'() | undefined,
	opticalActivity :: 'CodeableConcept'() | undefined,
	molecularFormula :: string() | undefined,
	choice :: string() | 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined}).

-type 'SubstanceSpecification.Moiety'() :: #'SubstanceSpecification.Moiety'{}.


-record('SubstanceSpecification', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: 'Identifier'() | undefined,
	type :: 'CodeableConcept'() | undefined,
	status :: 'CodeableConcept'() | undefined,
	domain :: 'CodeableConcept'() | undefined,
	description :: string() | undefined,
	source :: ['Reference'()] | undefined,
	comment :: string() | undefined,
	moiety :: ['SubstanceSpecification.Moiety'()] | undefined,
	property :: ['SubstanceSpecification.Property'()] | undefined,
	referenceInformation :: 'Reference'() | undefined,
	structure :: 'SubstanceSpecification.Structure'() | undefined,
	code :: ['SubstanceSpecification.Code'()] | undefined,
	name :: ['SubstanceSpecification.Name'()] | undefined,
	molecularWeight :: ['SubstanceSpecification.MolecularWeight'()] | undefined,
	relationship :: ['SubstanceSpecification.Relationship'()] | undefined,
	nucleicAcid :: 'Reference'() | undefined,
	polymer :: 'Reference'() | undefined,
	protein :: 'Reference'() | undefined,
	sourceMaterial :: 'Reference'() | undefined}).

-type 'SubstanceSpecification'() :: #'SubstanceSpecification'{}.


-record('SubstanceSourceMaterial.PartDescription', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	part :: 'CodeableConcept'() | undefined,
	partLocation :: 'CodeableConcept'() | undefined}).

-type 'SubstanceSourceMaterial.PartDescription'() :: #'SubstanceSourceMaterial.PartDescription'{}.


-record('SubstanceSourceMaterial.OrganismGeneral', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	kingdom :: 'CodeableConcept'() | undefined,
	phylum :: 'CodeableConcept'() | undefined,
	class :: 'CodeableConcept'() | undefined,
	order :: 'CodeableConcept'() | undefined}).

-type 'SubstanceSourceMaterial.OrganismGeneral'() :: #'SubstanceSourceMaterial.OrganismGeneral'{}.


-record('SubstanceSourceMaterial.Hybrid', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	maternalOrganismId :: string() | undefined,
	maternalOrganismName :: string() | undefined,
	paternalOrganismId :: string() | undefined,
	paternalOrganismName :: string() | undefined,
	hybridType :: 'CodeableConcept'() | undefined}).

-type 'SubstanceSourceMaterial.Hybrid'() :: #'SubstanceSourceMaterial.Hybrid'{}.


-record('SubstanceSourceMaterial.Author', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	authorType :: 'CodeableConcept'() | undefined,
	authorDescription :: string() | undefined}).

-type 'SubstanceSourceMaterial.Author'() :: #'SubstanceSourceMaterial.Author'{}.


-record('SubstanceSourceMaterial.Organism', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	family :: 'CodeableConcept'() | undefined,
	genus :: 'CodeableConcept'() | undefined,
	species :: 'CodeableConcept'() | undefined,
	intraspecificType :: 'CodeableConcept'() | undefined,
	intraspecificDescription :: string() | undefined,
	author :: ['SubstanceSourceMaterial.Author'()] | undefined,
	hybrid :: 'SubstanceSourceMaterial.Hybrid'() | undefined,
	organismGeneral :: 'SubstanceSourceMaterial.OrganismGeneral'() | undefined}).

-type 'SubstanceSourceMaterial.Organism'() :: #'SubstanceSourceMaterial.Organism'{}.


-record('SubstanceSourceMaterial.FractionDescription', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	fraction :: string() | undefined,
	materialType :: 'CodeableConcept'() | undefined}).

-type 'SubstanceSourceMaterial.FractionDescription'() :: #'SubstanceSourceMaterial.FractionDescription'{}.


-record('SubstanceSourceMaterial', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	sourceMaterialClass :: 'CodeableConcept'() | undefined,
	sourceMaterialType :: 'CodeableConcept'() | undefined,
	sourceMaterialState :: 'CodeableConcept'() | undefined,
	organismId :: 'Identifier'() | undefined,
	organismName :: string() | undefined,
	parentSubstanceId :: ['Identifier'()] | undefined,
	parentSubstanceName :: [string()] | undefined,
	countryOfOrigin :: ['CodeableConcept'()] | undefined,
	geographicalLocation :: [string()] | undefined,
	developmentStage :: 'CodeableConcept'() | undefined,
	fractionDescription :: ['SubstanceSourceMaterial.FractionDescription'()] | undefined,
	organism :: 'SubstanceSourceMaterial.Organism'() | undefined,
	partDescription :: ['SubstanceSourceMaterial.PartDescription'()] | undefined}).

-type 'SubstanceSourceMaterial'() :: #'SubstanceSourceMaterial'{}.


-record('SubstanceReferenceInformation.Target', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	target :: 'Identifier'() | undefined,
	type :: 'CodeableConcept'() | undefined,
	interaction :: 'CodeableConcept'() | undefined,
	organism :: 'CodeableConcept'() | undefined,
	organismType :: 'CodeableConcept'() | undefined,
	choice :: string() | 'Range'() | 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	amountType :: 'CodeableConcept'() | undefined,
	source :: ['Reference'()] | undefined}).

-type 'SubstanceReferenceInformation.Target'() :: #'SubstanceReferenceInformation.Target'{}.


-record('SubstanceReferenceInformation.Classification', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	domain :: 'CodeableConcept'() | undefined,
	classification :: 'CodeableConcept'() | undefined,
	subtype :: ['CodeableConcept'()] | undefined,
	source :: ['Reference'()] | undefined}).

-type 'SubstanceReferenceInformation.Classification'() :: #'SubstanceReferenceInformation.Classification'{}.


-record('SubstanceReferenceInformation.GeneElement', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: 'CodeableConcept'() | undefined,
	element :: 'Identifier'() | undefined,
	source :: ['Reference'()] | undefined}).

-type 'SubstanceReferenceInformation.GeneElement'() :: #'SubstanceReferenceInformation.GeneElement'{}.


-record('SubstanceReferenceInformation.Gene', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	geneSequenceOrigin :: 'CodeableConcept'() | undefined,
	gene :: 'CodeableConcept'() | undefined,
	source :: ['Reference'()] | undefined}).

-type 'SubstanceReferenceInformation.Gene'() :: #'SubstanceReferenceInformation.Gene'{}.


-record('SubstanceReferenceInformation', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	comment :: string() | undefined,
	gene :: ['SubstanceReferenceInformation.Gene'()] | undefined,
	geneElement :: ['SubstanceReferenceInformation.GeneElement'()] | undefined,
	classification :: ['SubstanceReferenceInformation.Classification'()] | undefined,
	target :: ['SubstanceReferenceInformation.Target'()] | undefined}).

-type 'SubstanceReferenceInformation'() :: #'SubstanceReferenceInformation'{}.


-record('SubstanceProtein.Subunit', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	subunit :: integer() | undefined,
	sequence :: string() | undefined,
	length :: integer() | undefined,
	sequenceAttachment :: 'Attachment'() | undefined,
	nTerminalModificationId :: 'Identifier'() | undefined,
	nTerminalModification :: string() | undefined,
	cTerminalModificationId :: 'Identifier'() | undefined,
	cTerminalModification :: string() | undefined}).

-type 'SubstanceProtein.Subunit'() :: #'SubstanceProtein.Subunit'{}.


-record('SubstanceProtein', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	sequenceType :: 'CodeableConcept'() | undefined,
	numberOfSubunits :: integer() | undefined,
	disulfideLinkage :: [string()] | undefined,
	subunit :: ['SubstanceProtein.Subunit'()] | undefined}).

-type 'SubstanceProtein'() :: #'SubstanceProtein'{}.


-record('SubstancePolymer.StructuralRepresentation', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: 'CodeableConcept'() | undefined,
	representation :: string() | undefined,
	attachment :: 'Attachment'() | undefined}).

-type 'SubstancePolymer.StructuralRepresentation'() :: #'SubstancePolymer.StructuralRepresentation'{}.


-record('SubstancePolymer.DegreeOfPolymerisation', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	degree :: 'CodeableConcept'() | undefined,
	amount :: 'SubstanceAmount'() | undefined}).

-type 'SubstancePolymer.DegreeOfPolymerisation'() :: #'SubstancePolymer.DegreeOfPolymerisation'{}.


-record('SubstancePolymer.RepeatUnit', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	orientationOfPolymerisation :: 'CodeableConcept'() | undefined,
	repeatUnit :: string() | undefined,
	amount :: 'SubstanceAmount'() | undefined,
	degreeOfPolymerisation :: ['SubstancePolymer.DegreeOfPolymerisation'()] | undefined,
	structuralRepresentation :: ['SubstancePolymer.StructuralRepresentation'()] | undefined}).

-type 'SubstancePolymer.RepeatUnit'() :: #'SubstancePolymer.RepeatUnit'{}.


-record('SubstancePolymer.Repeat', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	numberOfUnits :: integer() | undefined,
	averageMolecularFormula :: string() | undefined,
	repeatUnitAmountType :: 'CodeableConcept'() | undefined,
	repeatUnit :: ['SubstancePolymer.RepeatUnit'()] | undefined}).

-type 'SubstancePolymer.Repeat'() :: #'SubstancePolymer.Repeat'{}.


-record('SubstancePolymer.StartingMaterial', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	material :: 'CodeableConcept'() | undefined,
	type :: 'CodeableConcept'() | undefined,
	isDefining :: boolean() | undefined,
	amount :: 'SubstanceAmount'() | undefined}).

-type 'SubstancePolymer.StartingMaterial'() :: #'SubstancePolymer.StartingMaterial'{}.


-record('SubstancePolymer.MonomerSet', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	ratioType :: 'CodeableConcept'() | undefined,
	startingMaterial :: ['SubstancePolymer.StartingMaterial'()] | undefined}).

-type 'SubstancePolymer.MonomerSet'() :: #'SubstancePolymer.MonomerSet'{}.


-record('SubstancePolymer', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	class :: 'CodeableConcept'() | undefined,
	geometry :: 'CodeableConcept'() | undefined,
	copolymerConnectivity :: ['CodeableConcept'()] | undefined,
	modification :: [string()] | undefined,
	monomerSet :: ['SubstancePolymer.MonomerSet'()] | undefined,
	repeat :: ['SubstancePolymer.Repeat'()] | undefined}).

-type 'SubstancePolymer'() :: #'SubstancePolymer'{}.


-record('SubstanceNucleicAcid.Sugar', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: 'Identifier'() | undefined,
	name :: string() | undefined,
	residueSite :: string() | undefined}).

-type 'SubstanceNucleicAcid.Sugar'() :: #'SubstanceNucleicAcid.Sugar'{}.


-record('SubstanceNucleicAcid.Linkage', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	connectivity :: string() | undefined,
	identifier :: 'Identifier'() | undefined,
	name :: string() | undefined,
	residueSite :: string() | undefined}).

-type 'SubstanceNucleicAcid.Linkage'() :: #'SubstanceNucleicAcid.Linkage'{}.


-record('SubstanceNucleicAcid.Subunit', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	subunit :: integer() | undefined,
	sequence :: string() | undefined,
	length :: integer() | undefined,
	sequenceAttachment :: 'Attachment'() | undefined,
	fivePrime :: 'CodeableConcept'() | undefined,
	threePrime :: 'CodeableConcept'() | undefined,
	linkage :: ['SubstanceNucleicAcid.Linkage'()] | undefined,
	sugar :: ['SubstanceNucleicAcid.Sugar'()] | undefined}).

-type 'SubstanceNucleicAcid.Subunit'() :: #'SubstanceNucleicAcid.Subunit'{}.


-record('SubstanceNucleicAcid', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	sequenceType :: 'CodeableConcept'() | undefined,
	numberOfSubunits :: integer() | undefined,
	areaOfHybridisation :: string() | undefined,
	oligoNucleotideType :: 'CodeableConcept'() | undefined,
	subunit :: ['SubstanceNucleicAcid.Subunit'()] | undefined}).

-type 'SubstanceNucleicAcid'() :: #'SubstanceNucleicAcid'{}.


-record('FHIRSubstanceStatus', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'FHIRSubstanceStatus'() :: #'FHIRSubstanceStatus'{}.


-record('Substance.Ingredient', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	quantity :: 'Ratio'() | undefined,
	choice :: 'Reference'() | 'CodeableConcept'()}).

-type 'Substance.Ingredient'() :: #'Substance.Ingredient'{}.


-record('Substance.Instance', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: 'Identifier'() | undefined,
	expiry :: dateTime() | undefined,
	quantity :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined}).

-type 'Substance.Instance'() :: #'Substance.Instance'{}.


-record('Substance', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	status :: 'FHIRSubstanceStatus'() | undefined,
	category :: ['CodeableConcept'()] | undefined,
	code :: 'CodeableConcept'(),
	description :: string() | undefined,
	instance :: ['Substance.Instance'()] | undefined,
	ingredient :: ['Substance.Ingredient'()] | undefined}).

-type 'Substance'() :: #'Substance'{}.


-record('SubscriptionChannelType', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'SubscriptionChannelType'() :: #'SubscriptionChannelType'{}.


-record('SubscriptionStatus', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'SubscriptionStatus'() :: #'SubscriptionStatus'{}.


-record('Subscription.Channel', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: 'SubscriptionChannelType'(),
	endpoint :: url() | undefined,
	payload :: code() | undefined,
	header :: [string()] | undefined}).

-type 'Subscription.Channel'() :: #'Subscription.Channel'{}.


-record('Subscription', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	status :: 'SubscriptionStatus'(),
	contact :: ['ContactPoint'()] | undefined,
	'end' :: instant() | undefined,
	reason :: string(),
	criteria :: string(),
	error :: string() | undefined,
	channel :: 'Subscription.Channel'()}).

-type 'Subscription'() :: #'Subscription'{}.


-record('StructureMapModelMode', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'StructureMapModelMode'() :: #'StructureMapModelMode'{}.


-record('StructureMapGroupTypeMode', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'StructureMapGroupTypeMode'() :: #'StructureMapGroupTypeMode'{}.


-record('StructureMapSourceListMode', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'StructureMapSourceListMode'() :: #'StructureMapSourceListMode'{}.


-record('StructureMapTransform', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'StructureMapTransform'() :: #'StructureMapTransform'{}.


-record('StructureMapTargetListMode', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'StructureMapTargetListMode'() :: #'StructureMapTargetListMode'{}.


-record('StructureMapContextType', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'StructureMapContextType'() :: #'StructureMapContextType'{}.


-record('StructureMapInputMode', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'StructureMapInputMode'() :: #'StructureMapInputMode'{}.


-record('StructureMap.Dependent', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	name :: id(),
	variable :: [string()]}).

-type 'StructureMap.Dependent'() :: #'StructureMap.Dependent'{}.


-record('StructureMap.Parameter', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	choice :: string() | integer() | id() | decimal() | boolean()}).

-type 'StructureMap.Parameter'() :: #'StructureMap.Parameter'{}.


-record('StructureMap.Target', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	context :: id() | undefined,
	contextType :: 'StructureMapContextType'() | undefined,
	element :: string() | undefined,
	variable :: id() | undefined,
	listMode :: ['StructureMapTargetListMode'()] | undefined,
	listRuleId :: id() | undefined,
	transform :: 'StructureMapTransform'() | undefined,
	parameter :: ['StructureMap.Parameter'()] | undefined}).

-type 'StructureMap.Target'() :: #'StructureMap.Target'{}.


-record('StructureMap.Source', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	context :: id(),
	min :: integer() | undefined,
	max :: string() | undefined,
	type :: string() | undefined,
	choice :: uuid() | 'UsageContext'() | url() | uri() | unsignedInt() | 'TriggerDefinition'() | 'Timing'() | time() | string() | 'Signature'() | 'SampledData'() | 'RelatedArtifact'() | 'Reference'() | 'Ratio'() | 'Range'() | 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | positiveInt() | 'Period'() | 'ParameterDefinition'() | oid() | 'Money'() | markdown() | integer() | instant() | 'Identifier'() | id() | 'HumanName'() | 'Expression'() | 'Duration'() | 'Dosage'() | 'Distance'() | decimal() | dateTime() | date() | 'DataRequirement'() | 'Count'() | 'Contributor'() | 'ContactPoint'() | 'ContactDetail'() | 'Coding'() | 'CodeableConcept'() | code() | canonical() | boolean() | base64Binary() | 'Attachment'() | 'Annotation'() | 'Age'() | 'Address'() | undefined,
	element :: string() | undefined,
	listMode :: 'StructureMapSourceListMode'() | undefined,
	variable :: id() | undefined,
	condition :: string() | undefined,
	check :: string() | undefined,
	logMessage :: string() | undefined}).

-type 'StructureMap.Source'() :: #'StructureMap.Source'{}.


-record('StructureMap.Rule', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	name :: id(),
	source :: ['StructureMap.Source'()],
	target :: ['StructureMap.Target'()] | undefined,
	rule :: ['StructureMap.Rule'()] | undefined,
	dependent :: ['StructureMap.Dependent'()] | undefined,
	documentation :: string() | undefined}).

-type 'StructureMap.Rule'() :: #'StructureMap.Rule'{}.


-record('StructureMap.Input', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	name :: id(),
	type :: string() | undefined,
	mode :: 'StructureMapInputMode'(),
	documentation :: string() | undefined}).

-type 'StructureMap.Input'() :: #'StructureMap.Input'{}.


-record('StructureMap.Group', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	name :: id(),
	extends :: id() | undefined,
	typeMode :: 'StructureMapGroupTypeMode'(),
	documentation :: string() | undefined,
	input :: ['StructureMap.Input'()],
	rule :: ['StructureMap.Rule'()]}).

-type 'StructureMap.Group'() :: #'StructureMap.Group'{}.


-record('StructureMap.Structure', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	url :: canonical(),
	mode :: 'StructureMapModelMode'(),
	alias :: string() | undefined,
	documentation :: string() | undefined}).

-type 'StructureMap.Structure'() :: #'StructureMap.Structure'{}.


-record('StructureMap', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	url :: uri(),
	identifier :: ['Identifier'()] | undefined,
	version :: string() | undefined,
	name :: string(),
	title :: string() | undefined,
	status :: 'PublicationStatus'(),
	experimental :: boolean() | undefined,
	date :: dateTime() | undefined,
	publisher :: string() | undefined,
	contact :: ['ContactDetail'()] | undefined,
	description :: markdown() | undefined,
	useContext :: ['UsageContext'()] | undefined,
	jurisdiction :: ['CodeableConcept'()] | undefined,
	purpose :: markdown() | undefined,
	copyright :: markdown() | undefined,
	structure :: ['StructureMap.Structure'()] | undefined,
	import :: [canonical()] | undefined,
	group :: ['StructureMap.Group'()]}).

-type 'StructureMap'() :: #'StructureMap'{}.


-record('ExtensionContextType', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'ExtensionContextType'() :: #'ExtensionContextType'{}.


-record('TypeDerivationRule', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'TypeDerivationRule'() :: #'TypeDerivationRule'{}.


-record('StructureDefinitionKind', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'StructureDefinitionKind'() :: #'StructureDefinitionKind'{}.


-record('StructureDefinition.Differential', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	element :: ['ElementDefinition'()]}).

-type 'StructureDefinition.Differential'() :: #'StructureDefinition.Differential'{}.


-record('StructureDefinition.Snapshot', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	element :: ['ElementDefinition'()]}).

-type 'StructureDefinition.Snapshot'() :: #'StructureDefinition.Snapshot'{}.


-record('StructureDefinition.Context', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: 'ExtensionContextType'(),
	expression :: string()}).

-type 'StructureDefinition.Context'() :: #'StructureDefinition.Context'{}.


-record('StructureDefinition.Mapping', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identity :: id(),
	uri :: uri() | undefined,
	name :: string() | undefined,
	comment :: string() | undefined}).

-type 'StructureDefinition.Mapping'() :: #'StructureDefinition.Mapping'{}.


-record('StructureDefinition', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	url :: uri(),
	identifier :: ['Identifier'()] | undefined,
	version :: string() | undefined,
	name :: string(),
	title :: string() | undefined,
	status :: 'PublicationStatus'(),
	experimental :: boolean() | undefined,
	date :: dateTime() | undefined,
	publisher :: string() | undefined,
	contact :: ['ContactDetail'()] | undefined,
	description :: markdown() | undefined,
	useContext :: ['UsageContext'()] | undefined,
	jurisdiction :: ['CodeableConcept'()] | undefined,
	purpose :: markdown() | undefined,
	copyright :: markdown() | undefined,
	keyword :: ['Coding'()] | undefined,
	fhirVersion :: 'FHIRVersion'() | undefined,
	mapping :: ['StructureDefinition.Mapping'()] | undefined,
	kind :: 'StructureDefinitionKind'(),
	abstract :: boolean(),
	context :: ['StructureDefinition.Context'()] | undefined,
	contextInvariant :: [string()] | undefined,
	type :: uri(),
	baseDefinition :: canonical() | undefined,
	derivation :: 'TypeDerivationRule'() | undefined,
	snapshot :: 'StructureDefinition.Snapshot'() | undefined,
	differential :: 'StructureDefinition.Differential'() | undefined}).

-type 'StructureDefinition'() :: #'StructureDefinition'{}.


-record('SpecimenContainedPreference', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'SpecimenContainedPreference'() :: #'SpecimenContainedPreference'{}.


-record('SpecimenDefinition.Handling', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	temperatureQualifier :: 'CodeableConcept'() | undefined,
	temperatureRange :: 'Range'() | undefined,
	maxDuration :: 'Duration'() | undefined,
	instruction :: string() | undefined}).

-type 'SpecimenDefinition.Handling'() :: #'SpecimenDefinition.Handling'{}.


-record('SpecimenDefinition.Additive', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	choice :: 'Reference'() | 'CodeableConcept'()}).

-type 'SpecimenDefinition.Additive'() :: #'SpecimenDefinition.Additive'{}.


-record('SpecimenDefinition.Container', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	material :: 'CodeableConcept'() | undefined,
	type :: 'CodeableConcept'() | undefined,
	cap :: 'CodeableConcept'() | undefined,
	description :: string() | undefined,
	capacity :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	choice :: string() | 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	additive :: ['SpecimenDefinition.Additive'()] | undefined,
	preparation :: string() | undefined}).

-type 'SpecimenDefinition.Container'() :: #'SpecimenDefinition.Container'{}.


-record('SpecimenDefinition.TypeTested', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	isDerived :: boolean() | undefined,
	type :: 'CodeableConcept'() | undefined,
	preference :: 'SpecimenContainedPreference'(),
	container :: 'SpecimenDefinition.Container'() | undefined,
	requirement :: string() | undefined,
	retentionTime :: 'Duration'() | undefined,
	rejectionCriterion :: ['CodeableConcept'()] | undefined,
	handling :: ['SpecimenDefinition.Handling'()] | undefined}).

-type 'SpecimenDefinition.TypeTested'() :: #'SpecimenDefinition.TypeTested'{}.


-record('SpecimenDefinition', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: 'Identifier'() | undefined,
	typeCollected :: 'CodeableConcept'() | undefined,
	patientPreparation :: ['CodeableConcept'()] | undefined,
	timeAspect :: string() | undefined,
	collection :: ['CodeableConcept'()] | undefined,
	typeTested :: ['SpecimenDefinition.TypeTested'()] | undefined}).

-type 'SpecimenDefinition'() :: #'SpecimenDefinition'{}.


-record('SpecimenStatus', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'SpecimenStatus'() :: #'SpecimenStatus'{}.


-record('Specimen.Container', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	description :: string() | undefined,
	type :: 'CodeableConcept'() | undefined,
	capacity :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	specimenQuantity :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	choice :: 'Reference'() | 'CodeableConcept'() | undefined}).

-type 'Specimen.Container'() :: #'Specimen.Container'{}.


-record('Specimen.Processing', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	description :: string() | undefined,
	procedure :: 'CodeableConcept'() | undefined,
	additive :: ['Reference'()] | undefined,
	choice :: 'Period'() | dateTime() | undefined}).

-type 'Specimen.Processing'() :: #'Specimen.Processing'{}.


-record('Specimen.Collection', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	collector :: 'Reference'() | undefined,
	choice :: 'Period'() | dateTime() | undefined,
	duration :: 'Duration'() | undefined,
	quantity :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	method :: 'CodeableConcept'() | undefined,
	bodySite :: 'CodeableConcept'() | undefined,
	choice1 :: 'Duration'() | 'CodeableConcept'() | undefined}).

-type 'Specimen.Collection'() :: #'Specimen.Collection'{}.


-record('Specimen', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	accessionIdentifier :: 'Identifier'() | undefined,
	status :: 'SpecimenStatus'() | undefined,
	type :: 'CodeableConcept'() | undefined,
	subject :: 'Reference'() | undefined,
	receivedTime :: dateTime() | undefined,
	parent :: ['Reference'()] | undefined,
	request :: ['Reference'()] | undefined,
	collection :: 'Specimen.Collection'() | undefined,
	processing :: ['Specimen.Processing'()] | undefined,
	container :: ['Specimen.Container'()] | undefined,
	condition :: ['CodeableConcept'()] | undefined,
	note :: ['Annotation'()] | undefined}).

-type 'Specimen'() :: #'Specimen'{}.


-record('SlotStatus', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'SlotStatus'() :: #'SlotStatus'{}.


-record('Slot', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	serviceCategory :: ['CodeableConcept'()] | undefined,
	serviceType :: ['CodeableConcept'()] | undefined,
	specialty :: ['CodeableConcept'()] | undefined,
	appointmentType :: 'CodeableConcept'() | undefined,
	schedule :: 'Reference'(),
	status :: 'SlotStatus'(),
	start :: instant(),
	'end' :: instant(),
	overbooked :: boolean() | undefined,
	comment :: string() | undefined}).

-type 'Slot'() :: #'Slot'{}.


-record('ServiceRequest', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	instantiatesCanonical :: [canonical()] | undefined,
	instantiatesUri :: [uri()] | undefined,
	basedOn :: ['Reference'()] | undefined,
	replaces :: ['Reference'()] | undefined,
	requisition :: 'Identifier'() | undefined,
	status :: 'RequestStatus'(),
	intent :: 'RequestIntent'(),
	category :: ['CodeableConcept'()] | undefined,
	priority :: 'RequestPriority'() | undefined,
	doNotPerform :: boolean() | undefined,
	code :: 'CodeableConcept'() | undefined,
	orderDetail :: ['CodeableConcept'()] | undefined,
	choice :: 'Ratio'() | 'Range'() | 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	subject :: 'Reference'(),
	encounter :: 'Reference'() | undefined,
	choice1 :: 'Timing'() | 'Period'() | dateTime() | undefined,
	choice2 :: 'CodeableConcept'() | boolean() | undefined,
	authoredOn :: dateTime() | undefined,
	requester :: 'Reference'() | undefined,
	performerType :: 'CodeableConcept'() | undefined,
	performer :: ['Reference'()] | undefined,
	locationCode :: ['CodeableConcept'()] | undefined,
	locationReference :: ['Reference'()] | undefined,
	reasonCode :: ['CodeableConcept'()] | undefined,
	reasonReference :: ['Reference'()] | undefined,
	insurance :: ['Reference'()] | undefined,
	supportingInfo :: ['Reference'()] | undefined,
	specimen :: ['Reference'()] | undefined,
	bodySite :: ['CodeableConcept'()] | undefined,
	note :: ['Annotation'()] | undefined,
	patientInstruction :: string() | undefined,
	relevantHistory :: ['Reference'()] | undefined}).

-type 'ServiceRequest'() :: #'ServiceRequest'{}.


-record('SearchComparator', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'SearchComparator'() :: #'SearchComparator'{}.


-record('SearchModifierCode', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'SearchModifierCode'() :: #'SearchModifierCode'{}.


-record('XPathUsageType', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'XPathUsageType'() :: #'XPathUsageType'{}.


-record('SearchParameter.Component', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	definition :: canonical(),
	expression :: string()}).

-type 'SearchParameter.Component'() :: #'SearchParameter.Component'{}.


-record('SearchParameter', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	url :: uri(),
	version :: string() | undefined,
	name :: string(),
	derivedFrom :: canonical() | undefined,
	status :: 'PublicationStatus'(),
	experimental :: boolean() | undefined,
	date :: dateTime() | undefined,
	publisher :: string() | undefined,
	contact :: ['ContactDetail'()] | undefined,
	description :: markdown(),
	useContext :: ['UsageContext'()] | undefined,
	jurisdiction :: ['CodeableConcept'()] | undefined,
	purpose :: markdown() | undefined,
	code :: code(),
	base :: [code()],
	type :: 'SearchParamType'(),
	expression :: string() | undefined,
	xpath :: string() | undefined,
	xpathUsage :: 'XPathUsageType'() | undefined,
	target :: [code()] | undefined,
	multipleOr :: boolean() | undefined,
	multipleAnd :: boolean() | undefined,
	comparator :: ['SearchComparator'()] | undefined,
	modifier :: ['SearchModifierCode'()] | undefined,
	chain :: [string()] | undefined,
	component :: ['SearchParameter.Component'()] | undefined}).

-type 'SearchParameter'() :: #'SearchParameter'{}.


-record('Schedule', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	active :: boolean() | undefined,
	serviceCategory :: ['CodeableConcept'()] | undefined,
	serviceType :: ['CodeableConcept'()] | undefined,
	specialty :: ['CodeableConcept'()] | undefined,
	actor :: ['Reference'()],
	planningHorizon :: 'Period'() | undefined,
	comment :: string() | undefined}).

-type 'Schedule'() :: #'Schedule'{}.


-record('RiskEvidenceSynthesis.CertaintySubcomponent', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: 'CodeableConcept'() | undefined,
	rating :: ['CodeableConcept'()] | undefined,
	note :: ['Annotation'()] | undefined}).

-type 'RiskEvidenceSynthesis.CertaintySubcomponent'() :: #'RiskEvidenceSynthesis.CertaintySubcomponent'{}.


-record('RiskEvidenceSynthesis.Certainty', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	rating :: ['CodeableConcept'()] | undefined,
	note :: ['Annotation'()] | undefined,
	certaintySubcomponent :: ['RiskEvidenceSynthesis.CertaintySubcomponent'()] | undefined}).

-type 'RiskEvidenceSynthesis.Certainty'() :: #'RiskEvidenceSynthesis.Certainty'{}.


-record('RiskEvidenceSynthesis.PrecisionEstimate', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: 'CodeableConcept'() | undefined,
	level :: decimal() | undefined,
	from :: decimal() | undefined,
	to :: decimal() | undefined}).

-type 'RiskEvidenceSynthesis.PrecisionEstimate'() :: #'RiskEvidenceSynthesis.PrecisionEstimate'{}.


-record('RiskEvidenceSynthesis.RiskEstimate', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	description :: string() | undefined,
	type :: 'CodeableConcept'() | undefined,
	value :: decimal() | undefined,
	unitOfMeasure :: 'CodeableConcept'() | undefined,
	denominatorCount :: integer() | undefined,
	numeratorCount :: integer() | undefined,
	precisionEstimate :: ['RiskEvidenceSynthesis.PrecisionEstimate'()] | undefined}).

-type 'RiskEvidenceSynthesis.RiskEstimate'() :: #'RiskEvidenceSynthesis.RiskEstimate'{}.


-record('RiskEvidenceSynthesis.SampleSize', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	description :: string() | undefined,
	numberOfStudies :: integer() | undefined,
	numberOfParticipants :: integer() | undefined}).

-type 'RiskEvidenceSynthesis.SampleSize'() :: #'RiskEvidenceSynthesis.SampleSize'{}.


-record('RiskEvidenceSynthesis', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	url :: uri() | undefined,
	identifier :: ['Identifier'()] | undefined,
	version :: string() | undefined,
	name :: string() | undefined,
	title :: string() | undefined,
	status :: 'PublicationStatus'(),
	date :: dateTime() | undefined,
	publisher :: string() | undefined,
	contact :: ['ContactDetail'()] | undefined,
	description :: markdown() | undefined,
	note :: ['Annotation'()] | undefined,
	useContext :: ['UsageContext'()] | undefined,
	jurisdiction :: ['CodeableConcept'()] | undefined,
	copyright :: markdown() | undefined,
	approvalDate :: date() | undefined,
	lastReviewDate :: date() | undefined,
	effectivePeriod :: 'Period'() | undefined,
	topic :: ['CodeableConcept'()] | undefined,
	author :: ['ContactDetail'()] | undefined,
	editor :: ['ContactDetail'()] | undefined,
	reviewer :: ['ContactDetail'()] | undefined,
	endorser :: ['ContactDetail'()] | undefined,
	relatedArtifact :: ['RelatedArtifact'()] | undefined,
	synthesisType :: 'CodeableConcept'() | undefined,
	studyType :: 'CodeableConcept'() | undefined,
	population :: 'Reference'(),
	exposure :: 'Reference'() | undefined,
	outcome :: 'Reference'(),
	sampleSize :: 'RiskEvidenceSynthesis.SampleSize'() | undefined,
	riskEstimate :: 'RiskEvidenceSynthesis.RiskEstimate'() | undefined,
	certainty :: ['RiskEvidenceSynthesis.Certainty'()] | undefined}).

-type 'RiskEvidenceSynthesis'() :: #'RiskEvidenceSynthesis'{}.


-record('RiskAssessment.Prediction', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	outcome :: 'CodeableConcept'() | undefined,
	choice :: 'Range'() | decimal() | undefined,
	qualitativeRisk :: 'CodeableConcept'() | undefined,
	relativeRisk :: decimal() | undefined,
	choice1 :: 'Range'() | 'Period'() | undefined,
	rationale :: string() | undefined}).

-type 'RiskAssessment.Prediction'() :: #'RiskAssessment.Prediction'{}.


-record('RiskAssessment', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	basedOn :: 'Reference'() | undefined,
	parent :: 'Reference'() | undefined,
	status :: 'ObservationStatus'(),
	method :: 'CodeableConcept'() | undefined,
	code :: 'CodeableConcept'() | undefined,
	subject :: 'Reference'(),
	encounter :: 'Reference'() | undefined,
	choice :: 'Period'() | dateTime() | undefined,
	condition :: 'Reference'() | undefined,
	performer :: 'Reference'() | undefined,
	reasonCode :: ['CodeableConcept'()] | undefined,
	reasonReference :: ['Reference'()] | undefined,
	basis :: ['Reference'()] | undefined,
	prediction :: ['RiskAssessment.Prediction'()] | undefined,
	mitigation :: string() | undefined,
	note :: ['Annotation'()] | undefined}).

-type 'RiskAssessment'() :: #'RiskAssessment'{}.


-record('ResearchSubjectStatus', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'ResearchSubjectStatus'() :: #'ResearchSubjectStatus'{}.


-record('ResearchSubject', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	status :: 'ResearchSubjectStatus'(),
	period :: 'Period'() | undefined,
	study :: 'Reference'(),
	individual :: 'Reference'(),
	assignedArm :: string() | undefined,
	actualArm :: string() | undefined,
	consent :: 'Reference'() | undefined}).

-type 'ResearchSubject'() :: #'ResearchSubject'{}.


-record('ResearchStudyStatus', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'ResearchStudyStatus'() :: #'ResearchStudyStatus'{}.


-record('ResearchStudy.Objective', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	name :: string() | undefined,
	type :: 'CodeableConcept'() | undefined}).

-type 'ResearchStudy.Objective'() :: #'ResearchStudy.Objective'{}.


-record('ResearchStudy.Arm', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	name :: string(),
	type :: 'CodeableConcept'() | undefined,
	description :: string() | undefined}).

-type 'ResearchStudy.Arm'() :: #'ResearchStudy.Arm'{}.


-record('ResearchStudy', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	title :: string() | undefined,
	protocol :: ['Reference'()] | undefined,
	partOf :: ['Reference'()] | undefined,
	status :: 'ResearchStudyStatus'(),
	primaryPurposeType :: 'CodeableConcept'() | undefined,
	phase :: 'CodeableConcept'() | undefined,
	category :: ['CodeableConcept'()] | undefined,
	focus :: ['CodeableConcept'()] | undefined,
	condition :: ['CodeableConcept'()] | undefined,
	contact :: ['ContactDetail'()] | undefined,
	relatedArtifact :: ['RelatedArtifact'()] | undefined,
	keyword :: ['CodeableConcept'()] | undefined,
	location :: ['CodeableConcept'()] | undefined,
	description :: markdown() | undefined,
	enrollment :: ['Reference'()] | undefined,
	period :: 'Period'() | undefined,
	sponsor :: 'Reference'() | undefined,
	principalInvestigator :: 'Reference'() | undefined,
	site :: ['Reference'()] | undefined,
	reasonStopped :: 'CodeableConcept'() | undefined,
	note :: ['Annotation'()] | undefined,
	arm :: ['ResearchStudy.Arm'()] | undefined,
	objective :: ['ResearchStudy.Objective'()] | undefined}).

-type 'ResearchStudy'() :: #'ResearchStudy'{}.


-record('VariableType', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'VariableType'() :: #'VariableType'{}.


-record('ResearchElementType', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'ResearchElementType'() :: #'ResearchElementType'{}.


-record('ResearchElementDefinition.Characteristic', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	choice :: 'Expression'() | 'DataRequirement'() | 'CodeableConcept'() | canonical(),
	usageContext :: ['UsageContext'()] | undefined,
	exclude :: boolean() | undefined,
	unitOfMeasure :: 'CodeableConcept'() | undefined,
	studyEffectiveDescription :: string() | undefined,
	choice1 :: 'Timing'() | 'Period'() | 'Duration'() | dateTime() | undefined,
	studyEffectiveTimeFromStart :: 'Duration'() | undefined,
	studyEffectiveGroupMeasure :: 'GroupMeasure'() | undefined,
	participantEffectiveDescription :: string() | undefined,
	choice2 :: 'Timing'() | 'Period'() | 'Duration'() | dateTime() | undefined,
	participantEffectiveTimeFromStart :: 'Duration'() | undefined,
	participantEffectiveGroupMeasure :: 'GroupMeasure'() | undefined}).

-type 'ResearchElementDefinition.Characteristic'() :: #'ResearchElementDefinition.Characteristic'{}.


-record('ResearchElementDefinition', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	url :: uri() | undefined,
	identifier :: ['Identifier'()] | undefined,
	version :: string() | undefined,
	name :: string() | undefined,
	title :: string() | undefined,
	shortTitle :: string() | undefined,
	subtitle :: string() | undefined,
	status :: 'PublicationStatus'(),
	experimental :: boolean() | undefined,
	choice :: 'Reference'() | 'CodeableConcept'() | undefined,
	date :: dateTime() | undefined,
	publisher :: string() | undefined,
	contact :: ['ContactDetail'()] | undefined,
	description :: markdown() | undefined,
	comment :: [string()] | undefined,
	useContext :: ['UsageContext'()] | undefined,
	jurisdiction :: ['CodeableConcept'()] | undefined,
	purpose :: markdown() | undefined,
	usage :: string() | undefined,
	copyright :: markdown() | undefined,
	approvalDate :: date() | undefined,
	lastReviewDate :: date() | undefined,
	effectivePeriod :: 'Period'() | undefined,
	topic :: ['CodeableConcept'()] | undefined,
	author :: ['ContactDetail'()] | undefined,
	editor :: ['ContactDetail'()] | undefined,
	reviewer :: ['ContactDetail'()] | undefined,
	endorser :: ['ContactDetail'()] | undefined,
	relatedArtifact :: ['RelatedArtifact'()] | undefined,
	library :: [canonical()] | undefined,
	type :: 'ResearchElementType'(),
	variableType :: 'VariableType'() | undefined,
	characteristic :: ['ResearchElementDefinition.Characteristic'()]}).

-type 'ResearchElementDefinition'() :: #'ResearchElementDefinition'{}.


-record('ResearchDefinition', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	url :: uri() | undefined,
	identifier :: ['Identifier'()] | undefined,
	version :: string() | undefined,
	name :: string() | undefined,
	title :: string() | undefined,
	shortTitle :: string() | undefined,
	subtitle :: string() | undefined,
	status :: 'PublicationStatus'(),
	experimental :: boolean() | undefined,
	choice :: 'Reference'() | 'CodeableConcept'() | undefined,
	date :: dateTime() | undefined,
	publisher :: string() | undefined,
	contact :: ['ContactDetail'()] | undefined,
	description :: markdown() | undefined,
	comment :: [string()] | undefined,
	useContext :: ['UsageContext'()] | undefined,
	jurisdiction :: ['CodeableConcept'()] | undefined,
	purpose :: markdown() | undefined,
	usage :: string() | undefined,
	copyright :: markdown() | undefined,
	approvalDate :: date() | undefined,
	lastReviewDate :: date() | undefined,
	effectivePeriod :: 'Period'() | undefined,
	topic :: ['CodeableConcept'()] | undefined,
	author :: ['ContactDetail'()] | undefined,
	editor :: ['ContactDetail'()] | undefined,
	reviewer :: ['ContactDetail'()] | undefined,
	endorser :: ['ContactDetail'()] | undefined,
	relatedArtifact :: ['RelatedArtifact'()] | undefined,
	library :: [canonical()] | undefined,
	population :: 'Reference'(),
	exposure :: 'Reference'() | undefined,
	exposureAlternative :: 'Reference'() | undefined,
	outcome :: 'Reference'() | undefined}).

-type 'ResearchDefinition'() :: #'ResearchDefinition'{}.


-record('RequestGroup.RelatedAction', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	actionId :: id(),
	relationship :: 'ActionRelationshipType'(),
	choice :: 'Range'() | 'Duration'() | undefined}).

-type 'RequestGroup.RelatedAction'() :: #'RequestGroup.RelatedAction'{}.


-record('RequestGroup.Condition', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	kind :: 'ActionConditionKind'(),
	expression :: 'Expression'() | undefined}).

-type 'RequestGroup.Condition'() :: #'RequestGroup.Condition'{}.


-record('RequestGroup.Action', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	prefix :: string() | undefined,
	title :: string() | undefined,
	description :: string() | undefined,
	textEquivalent :: string() | undefined,
	priority :: 'RequestPriority'() | undefined,
	code :: ['CodeableConcept'()] | undefined,
	documentation :: ['RelatedArtifact'()] | undefined,
	condition :: ['RequestGroup.Condition'()] | undefined,
	relatedAction :: ['RequestGroup.RelatedAction'()] | undefined,
	choice :: 'Timing'() | 'Range'() | 'Period'() | 'Duration'() | dateTime() | 'Age'() | undefined,
	participant :: ['Reference'()] | undefined,
	type :: 'CodeableConcept'() | undefined,
	groupingBehavior :: 'ActionGroupingBehavior'() | undefined,
	selectionBehavior :: 'ActionSelectionBehavior'() | undefined,
	requiredBehavior :: 'ActionRequiredBehavior'() | undefined,
	precheckBehavior :: 'ActionPrecheckBehavior'() | undefined,
	cardinalityBehavior :: 'ActionCardinalityBehavior'() | undefined,
	resource :: 'Reference'() | undefined,
	action :: ['RequestGroup.Action'()] | undefined}).

-type 'RequestGroup.Action'() :: #'RequestGroup.Action'{}.


-record('RequestGroup', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	instantiatesCanonical :: [canonical()] | undefined,
	instantiatesUri :: [uri()] | undefined,
	basedOn :: ['Reference'()] | undefined,
	replaces :: ['Reference'()] | undefined,
	groupIdentifier :: 'Identifier'() | undefined,
	status :: 'RequestStatus'(),
	intent :: 'RequestIntent'(),
	priority :: 'RequestPriority'() | undefined,
	code :: 'CodeableConcept'() | undefined,
	subject :: 'Reference'() | undefined,
	encounter :: 'Reference'() | undefined,
	authoredOn :: dateTime() | undefined,
	author :: 'Reference'() | undefined,
	reasonCode :: ['CodeableConcept'()] | undefined,
	reasonReference :: ['Reference'()] | undefined,
	note :: ['Annotation'()] | undefined,
	action :: ['RequestGroup.Action'()] | undefined}).

-type 'RequestGroup'() :: #'RequestGroup'{}.


-record('RelatedPerson.Communication', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	language :: 'CodeableConcept'(),
	preferred :: boolean() | undefined}).

-type 'RelatedPerson.Communication'() :: #'RelatedPerson.Communication'{}.


-record('RelatedPerson', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	active :: boolean() | undefined,
	patient :: 'Reference'(),
	relationship :: ['CodeableConcept'()] | undefined,
	name :: ['HumanName'()] | undefined,
	telecom :: ['ContactPoint'()] | undefined,
	gender :: 'AdministrativeGender'() | undefined,
	birthDate :: date() | undefined,
	address :: ['Address'()] | undefined,
	photo :: ['Attachment'()] | undefined,
	period :: 'Period'() | undefined,
	communication :: ['RelatedPerson.Communication'()] | undefined}).

-type 'RelatedPerson'() :: #'RelatedPerson'{}.


-record('QuestionnaireResponseStatus', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'QuestionnaireResponseStatus'() :: #'QuestionnaireResponseStatus'{}.


-record('QuestionnaireResponse.Answer', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	choice :: uri() | time() | string() | 'Reference'() | 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | integer() | decimal() | dateTime() | date() | 'Coding'() | boolean() | 'Attachment'() | undefined,
	item :: ['QuestionnaireResponse.Item'()] | undefined}).

-type 'QuestionnaireResponse.Answer'() :: #'QuestionnaireResponse.Answer'{}.


-record('QuestionnaireResponse.Item', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	linkId :: string(),
	definition :: uri() | undefined,
	text :: string() | undefined,
	answer :: ['QuestionnaireResponse.Answer'()] | undefined,
	item :: ['QuestionnaireResponse.Item'()] | undefined}).

-type 'QuestionnaireResponse.Item'() :: #'QuestionnaireResponse.Item'{}.


-record('QuestionnaireResponse', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: 'Identifier'() | undefined,
	basedOn :: ['Reference'()] | undefined,
	partOf :: ['Reference'()] | undefined,
	questionnaire :: canonical() | undefined,
	status :: 'QuestionnaireResponseStatus'(),
	subject :: 'Reference'() | undefined,
	encounter :: 'Reference'() | undefined,
	authored :: dateTime() | undefined,
	author :: 'Reference'() | undefined,
	source :: 'Reference'() | undefined,
	item :: ['QuestionnaireResponse.Item'()] | undefined}).

-type 'QuestionnaireResponse'() :: #'QuestionnaireResponse'{}.


-record('QuestionnaireItemOperator', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'QuestionnaireItemOperator'() :: #'QuestionnaireItemOperator'{}.


-record('EnableWhenBehavior', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'EnableWhenBehavior'() :: #'EnableWhenBehavior'{}.


-record('QuestionnaireItemType', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'QuestionnaireItemType'() :: #'QuestionnaireItemType'{}.


-record('Questionnaire.Initial', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	choice :: uri() | time() | string() | 'Reference'() | 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | integer() | decimal() | dateTime() | date() | 'Coding'() | boolean() | 'Attachment'()}).

-type 'Questionnaire.Initial'() :: #'Questionnaire.Initial'{}.


-record('Questionnaire.AnswerOption', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	choice :: time() | string() | 'Reference'() | integer() | date() | 'Coding'(),
	initialSelected :: boolean() | undefined}).

-type 'Questionnaire.AnswerOption'() :: #'Questionnaire.AnswerOption'{}.


-record('Questionnaire.EnableWhen', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	question :: string(),
	operator :: 'QuestionnaireItemOperator'(),
	choice :: time() | string() | 'Reference'() | 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | integer() | decimal() | dateTime() | date() | 'Coding'() | boolean()}).

-type 'Questionnaire.EnableWhen'() :: #'Questionnaire.EnableWhen'{}.


-record('Questionnaire.Item', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	linkId :: string(),
	definition :: uri() | undefined,
	code :: ['Coding'()] | undefined,
	prefix :: string() | undefined,
	text :: string() | undefined,
	type :: 'QuestionnaireItemType'(),
	enableWhen :: ['Questionnaire.EnableWhen'()] | undefined,
	enableBehavior :: 'EnableWhenBehavior'() | undefined,
	required :: boolean() | undefined,
	repeats :: boolean() | undefined,
	readOnly :: boolean() | undefined,
	maxLength :: integer() | undefined,
	answerValueSet :: canonical() | undefined,
	answerOption :: ['Questionnaire.AnswerOption'()] | undefined,
	initial :: ['Questionnaire.Initial'()] | undefined,
	item :: ['Questionnaire.Item'()] | undefined}).

-type 'Questionnaire.Item'() :: #'Questionnaire.Item'{}.


-record('Questionnaire', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	url :: uri() | undefined,
	identifier :: ['Identifier'()] | undefined,
	version :: string() | undefined,
	name :: string() | undefined,
	title :: string() | undefined,
	derivedFrom :: [canonical()] | undefined,
	status :: 'PublicationStatus'(),
	experimental :: boolean() | undefined,
	subjectType :: [code()] | undefined,
	date :: dateTime() | undefined,
	publisher :: string() | undefined,
	contact :: ['ContactDetail'()] | undefined,
	description :: markdown() | undefined,
	useContext :: ['UsageContext'()] | undefined,
	jurisdiction :: ['CodeableConcept'()] | undefined,
	purpose :: markdown() | undefined,
	copyright :: markdown() | undefined,
	approvalDate :: date() | undefined,
	lastReviewDate :: date() | undefined,
	effectivePeriod :: 'Period'() | undefined,
	code :: ['Coding'()] | undefined,
	item :: ['Questionnaire.Item'()] | undefined}).

-type 'Questionnaire'() :: #'Questionnaire'{}.


-record('ProvenanceEntityRole', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'ProvenanceEntityRole'() :: #'ProvenanceEntityRole'{}.


-record('Provenance.Entity', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	role :: 'ProvenanceEntityRole'(),
	what :: 'Reference'(),
	agent :: ['Provenance.Agent'()] | undefined}).

-type 'Provenance.Entity'() :: #'Provenance.Entity'{}.


-record('Provenance.Agent', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: 'CodeableConcept'() | undefined,
	role :: ['CodeableConcept'()] | undefined,
	who :: 'Reference'(),
	onBehalfOf :: 'Reference'() | undefined}).

-type 'Provenance.Agent'() :: #'Provenance.Agent'{}.


-record('Provenance', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	target :: ['Reference'()],
	choice :: 'Period'() | dateTime() | undefined,
	recorded :: instant(),
	policy :: [uri()] | undefined,
	location :: 'Reference'() | undefined,
	reason :: ['CodeableConcept'()] | undefined,
	activity :: 'CodeableConcept'() | undefined,
	agent :: ['Provenance.Agent'()],
	entity :: ['Provenance.Entity'()] | undefined,
	signature :: ['Signature'()] | undefined}).

-type 'Provenance'() :: #'Provenance'{}.


-record('Procedure.FocalDevice', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	action :: 'CodeableConcept'() | undefined,
	manipulated :: 'Reference'()}).

-type 'Procedure.FocalDevice'() :: #'Procedure.FocalDevice'{}.


-record('Procedure.Performer', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	function :: 'CodeableConcept'() | undefined,
	actor :: 'Reference'(),
	onBehalfOf :: 'Reference'() | undefined}).

-type 'Procedure.Performer'() :: #'Procedure.Performer'{}.


-record('Procedure', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	instantiatesCanonical :: [canonical()] | undefined,
	instantiatesUri :: [uri()] | undefined,
	basedOn :: ['Reference'()] | undefined,
	partOf :: ['Reference'()] | undefined,
	status :: 'EventStatus'(),
	statusReason :: 'CodeableConcept'() | undefined,
	category :: 'CodeableConcept'() | undefined,
	code :: 'CodeableConcept'() | undefined,
	subject :: 'Reference'(),
	encounter :: 'Reference'() | undefined,
	choice :: string() | 'Range'() | 'Period'() | dateTime() | 'Age'() | undefined,
	recorder :: 'Reference'() | undefined,
	asserter :: 'Reference'() | undefined,
	performer :: ['Procedure.Performer'()] | undefined,
	location :: 'Reference'() | undefined,
	reasonCode :: ['CodeableConcept'()] | undefined,
	reasonReference :: ['Reference'()] | undefined,
	bodySite :: ['CodeableConcept'()] | undefined,
	outcome :: 'CodeableConcept'() | undefined,
	report :: ['Reference'()] | undefined,
	complication :: ['CodeableConcept'()] | undefined,
	complicationDetail :: ['Reference'()] | undefined,
	followUp :: ['CodeableConcept'()] | undefined,
	note :: ['Annotation'()] | undefined,
	focalDevice :: ['Procedure.FocalDevice'()] | undefined,
	usedReference :: ['Reference'()] | undefined,
	usedCode :: ['CodeableConcept'()] | undefined}).

-type 'Procedure'() :: #'Procedure'{}.


-record('PractitionerRole.NotAvailable', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	description :: string(),
	during :: 'Period'() | undefined}).

-type 'PractitionerRole.NotAvailable'() :: #'PractitionerRole.NotAvailable'{}.


-record('PractitionerRole.AvailableTime', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	daysOfWeek :: ['DaysOfWeek'()] | undefined,
	allDay :: boolean() | undefined,
	availableStartTime :: time() | undefined,
	availableEndTime :: time() | undefined}).

-type 'PractitionerRole.AvailableTime'() :: #'PractitionerRole.AvailableTime'{}.


-record('PractitionerRole', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	active :: boolean() | undefined,
	period :: 'Period'() | undefined,
	practitioner :: 'Reference'() | undefined,
	organization :: 'Reference'() | undefined,
	code :: ['CodeableConcept'()] | undefined,
	specialty :: ['CodeableConcept'()] | undefined,
	location :: ['Reference'()] | undefined,
	healthcareService :: ['Reference'()] | undefined,
	telecom :: ['ContactPoint'()] | undefined,
	availableTime :: ['PractitionerRole.AvailableTime'()] | undefined,
	notAvailable :: ['PractitionerRole.NotAvailable'()] | undefined,
	availabilityExceptions :: string() | undefined,
	endpoint :: ['Reference'()] | undefined}).

-type 'PractitionerRole'() :: #'PractitionerRole'{}.


-record('Practitioner.Qualification', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	code :: 'CodeableConcept'(),
	period :: 'Period'() | undefined,
	issuer :: 'Reference'() | undefined}).

-type 'Practitioner.Qualification'() :: #'Practitioner.Qualification'{}.


-record('Practitioner', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	active :: boolean() | undefined,
	name :: ['HumanName'()] | undefined,
	telecom :: ['ContactPoint'()] | undefined,
	address :: ['Address'()] | undefined,
	gender :: 'AdministrativeGender'() | undefined,
	birthDate :: date() | undefined,
	photo :: ['Attachment'()] | undefined,
	qualification :: ['Practitioner.Qualification'()] | undefined,
	communication :: ['CodeableConcept'()] | undefined}).

-type 'Practitioner'() :: #'Practitioner'{}.


-record('ActionConditionKind', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'ActionConditionKind'() :: #'ActionConditionKind'{}.


-record('ActionPrecheckBehavior', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'ActionPrecheckBehavior'() :: #'ActionPrecheckBehavior'{}.


-record('ActionCardinalityBehavior', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'ActionCardinalityBehavior'() :: #'ActionCardinalityBehavior'{}.


-record('ActionSelectionBehavior', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'ActionSelectionBehavior'() :: #'ActionSelectionBehavior'{}.


-record('ActionGroupingBehavior', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'ActionGroupingBehavior'() :: #'ActionGroupingBehavior'{}.


-record('ActionRelationshipType', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'ActionRelationshipType'() :: #'ActionRelationshipType'{}.


-record('ActionRequiredBehavior', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'ActionRequiredBehavior'() :: #'ActionRequiredBehavior'{}.


-record('PlanDefinition.DynamicValue', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	path :: string() | undefined,
	expression :: 'Expression'() | undefined}).

-type 'PlanDefinition.DynamicValue'() :: #'PlanDefinition.DynamicValue'{}.


-record('PlanDefinition.Participant', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: 'ActionParticipantType'(),
	role :: 'CodeableConcept'() | undefined}).

-type 'PlanDefinition.Participant'() :: #'PlanDefinition.Participant'{}.


-record('PlanDefinition.RelatedAction', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	actionId :: id(),
	relationship :: 'ActionRelationshipType'(),
	choice :: 'Range'() | 'Duration'() | undefined}).

-type 'PlanDefinition.RelatedAction'() :: #'PlanDefinition.RelatedAction'{}.


-record('PlanDefinition.Condition', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	kind :: 'ActionConditionKind'(),
	expression :: 'Expression'() | undefined}).

-type 'PlanDefinition.Condition'() :: #'PlanDefinition.Condition'{}.


-record('PlanDefinition.Action', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	prefix :: string() | undefined,
	title :: string() | undefined,
	description :: string() | undefined,
	textEquivalent :: string() | undefined,
	priority :: 'RequestPriority'() | undefined,
	code :: ['CodeableConcept'()] | undefined,
	reason :: ['CodeableConcept'()] | undefined,
	documentation :: ['RelatedArtifact'()] | undefined,
	goalId :: [id()] | undefined,
	choice :: 'Reference'() | 'CodeableConcept'() | undefined,
	trigger :: ['TriggerDefinition'()] | undefined,
	condition :: ['PlanDefinition.Condition'()] | undefined,
	input :: ['DataRequirement'()] | undefined,
	output :: ['DataRequirement'()] | undefined,
	relatedAction :: ['PlanDefinition.RelatedAction'()] | undefined,
	choice1 :: 'Timing'() | 'Range'() | 'Period'() | 'Duration'() | dateTime() | 'Age'() | undefined,
	participant :: ['PlanDefinition.Participant'()] | undefined,
	type :: 'CodeableConcept'() | undefined,
	groupingBehavior :: 'ActionGroupingBehavior'() | undefined,
	selectionBehavior :: 'ActionSelectionBehavior'() | undefined,
	requiredBehavior :: 'ActionRequiredBehavior'() | undefined,
	precheckBehavior :: 'ActionPrecheckBehavior'() | undefined,
	cardinalityBehavior :: 'ActionCardinalityBehavior'() | undefined,
	choice2 :: uri() | canonical() | undefined,
	transform :: canonical() | undefined,
	dynamicValue :: ['PlanDefinition.DynamicValue'()] | undefined,
	action :: ['PlanDefinition.Action'()] | undefined}).

-type 'PlanDefinition.Action'() :: #'PlanDefinition.Action'{}.


-record('PlanDefinition.Target', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	measure :: 'CodeableConcept'() | undefined,
	choice :: 'Range'() | 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | 'CodeableConcept'() | undefined,
	due :: 'Duration'() | undefined}).

-type 'PlanDefinition.Target'() :: #'PlanDefinition.Target'{}.


-record('PlanDefinition.Goal', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	category :: 'CodeableConcept'() | undefined,
	description :: 'CodeableConcept'(),
	priority :: 'CodeableConcept'() | undefined,
	start :: 'CodeableConcept'() | undefined,
	addresses :: ['CodeableConcept'()] | undefined,
	documentation :: ['RelatedArtifact'()] | undefined,
	target :: ['PlanDefinition.Target'()] | undefined}).

-type 'PlanDefinition.Goal'() :: #'PlanDefinition.Goal'{}.


-record('PlanDefinition', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	url :: uri() | undefined,
	identifier :: ['Identifier'()] | undefined,
	version :: string() | undefined,
	name :: string() | undefined,
	title :: string() | undefined,
	subtitle :: string() | undefined,
	type :: 'CodeableConcept'() | undefined,
	status :: 'PublicationStatus'(),
	experimental :: boolean() | undefined,
	choice :: 'Reference'() | 'CodeableConcept'() | undefined,
	date :: dateTime() | undefined,
	publisher :: string() | undefined,
	contact :: ['ContactDetail'()] | undefined,
	description :: markdown() | undefined,
	useContext :: ['UsageContext'()] | undefined,
	jurisdiction :: ['CodeableConcept'()] | undefined,
	purpose :: markdown() | undefined,
	usage :: string() | undefined,
	copyright :: markdown() | undefined,
	approvalDate :: date() | undefined,
	lastReviewDate :: date() | undefined,
	effectivePeriod :: 'Period'() | undefined,
	topic :: ['CodeableConcept'()] | undefined,
	author :: ['ContactDetail'()] | undefined,
	editor :: ['ContactDetail'()] | undefined,
	reviewer :: ['ContactDetail'()] | undefined,
	endorser :: ['ContactDetail'()] | undefined,
	relatedArtifact :: ['RelatedArtifact'()] | undefined,
	library :: [canonical()] | undefined,
	goal :: ['PlanDefinition.Goal'()] | undefined,
	action :: ['PlanDefinition.Action'()] | undefined}).

-type 'PlanDefinition'() :: #'PlanDefinition'{}.


-record('IdentityAssuranceLevel', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'IdentityAssuranceLevel'() :: #'IdentityAssuranceLevel'{}.


-record('Person.Link', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	target :: 'Reference'(),
	assurance :: 'IdentityAssuranceLevel'() | undefined}).

-type 'Person.Link'() :: #'Person.Link'{}.


-record('Person', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	name :: ['HumanName'()] | undefined,
	telecom :: ['ContactPoint'()] | undefined,
	gender :: 'AdministrativeGender'() | undefined,
	birthDate :: date() | undefined,
	address :: ['Address'()] | undefined,
	photo :: 'Attachment'() | undefined,
	managingOrganization :: 'Reference'() | undefined,
	active :: boolean() | undefined,
	link :: ['Person.Link'()] | undefined}).

-type 'Person'() :: #'Person'{}.


-record('PaymentReconciliation.ProcessNote', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: 'NoteType'() | undefined,
	text :: string() | undefined}).

-type 'PaymentReconciliation.ProcessNote'() :: #'PaymentReconciliation.ProcessNote'{}.


-record('PaymentReconciliation.Detail', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: 'Identifier'() | undefined,
	predecessor :: 'Identifier'() | undefined,
	type :: 'CodeableConcept'(),
	request :: 'Reference'() | undefined,
	submitter :: 'Reference'() | undefined,
	response :: 'Reference'() | undefined,
	date :: date() | undefined,
	responsible :: 'Reference'() | undefined,
	payee :: 'Reference'() | undefined,
	amount :: 'Money'() | undefined}).

-type 'PaymentReconciliation.Detail'() :: #'PaymentReconciliation.Detail'{}.


-record('PaymentReconciliation', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	status :: 'FinancialResourceStatusCodes'(),
	period :: 'Period'() | undefined,
	created :: dateTime(),
	paymentIssuer :: 'Reference'() | undefined,
	request :: 'Reference'() | undefined,
	requestor :: 'Reference'() | undefined,
	outcome :: 'RemittanceOutcome'() | undefined,
	disposition :: string() | undefined,
	paymentDate :: date(),
	paymentAmount :: 'Money'(),
	paymentIdentifier :: 'Identifier'() | undefined,
	detail :: ['PaymentReconciliation.Detail'()] | undefined,
	formCode :: 'CodeableConcept'() | undefined,
	processNote :: ['PaymentReconciliation.ProcessNote'()] | undefined}).

-type 'PaymentReconciliation'() :: #'PaymentReconciliation'{}.


-record('PaymentNotice', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	status :: 'FinancialResourceStatusCodes'(),
	request :: 'Reference'() | undefined,
	response :: 'Reference'() | undefined,
	created :: dateTime(),
	provider :: 'Reference'() | undefined,
	payment :: 'Reference'(),
	paymentDate :: date() | undefined,
	payee :: 'Reference'() | undefined,
	recipient :: 'Reference'(),
	amount :: 'Money'(),
	paymentStatus :: 'CodeableConcept'() | undefined}).

-type 'PaymentNotice'() :: #'PaymentNotice'{}.


-record('LinkType', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'LinkType'() :: #'LinkType'{}.


-record('Patient.Link', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	other :: 'Reference'(),
	type :: 'LinkType'()}).

-type 'Patient.Link'() :: #'Patient.Link'{}.


-record('Patient.Communication', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	language :: 'CodeableConcept'(),
	preferred :: boolean() | undefined}).

-type 'Patient.Communication'() :: #'Patient.Communication'{}.


-record('Patient.Contact', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	relationship :: ['CodeableConcept'()] | undefined,
	name :: 'HumanName'() | undefined,
	telecom :: ['ContactPoint'()] | undefined,
	address :: 'Address'() | undefined,
	gender :: 'AdministrativeGender'() | undefined,
	organization :: 'Reference'() | undefined,
	period :: 'Period'() | undefined}).

-type 'Patient.Contact'() :: #'Patient.Contact'{}.


-record('Patient', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	active :: boolean() | undefined,
	name :: ['HumanName'()] | undefined,
	telecom :: ['ContactPoint'()] | undefined,
	gender :: 'AdministrativeGender'() | undefined,
	birthDate :: date() | undefined,
	choice :: dateTime() | boolean() | undefined,
	address :: ['Address'()] | undefined,
	maritalStatus :: 'CodeableConcept'() | undefined,
	choice1 :: integer() | boolean() | undefined,
	photo :: ['Attachment'()] | undefined,
	contact :: ['Patient.Contact'()] | undefined,
	communication :: ['Patient.Communication'()] | undefined,
	generalPractitioner :: ['Reference'()] | undefined,
	managingOrganization :: 'Reference'() | undefined,
	link :: ['Patient.Link'()] | undefined}).

-type 'Patient'() :: #'Patient'{}.


-record('Parameters.Parameter', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	name :: string(),
	choice :: uuid() | 'UsageContext'() | url() | uri() | unsignedInt() | 'TriggerDefinition'() | 'Timing'() | time() | string() | 'Signature'() | 'SampledData'() | 'RelatedArtifact'() | 'Reference'() | 'Ratio'() | 'Range'() | 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | positiveInt() | 'Period'() | 'ParameterDefinition'() | oid() | 'Money'() | markdown() | integer() | instant() | 'Identifier'() | id() | 'HumanName'() | 'Expression'() | 'Duration'() | 'Dosage'() | 'Distance'() | decimal() | dateTime() | date() | 'DataRequirement'() | 'Count'() | 'Contributor'() | 'ContactPoint'() | 'ContactDetail'() | 'Coding'() | 'CodeableConcept'() | code() | canonical() | boolean() | base64Binary() | 'Attachment'() | 'Annotation'() | 'Age'() | 'Address'() | undefined,
	resource :: 'ResourceContainer'() | undefined,
	part :: ['Parameters.Parameter'()] | undefined}).

-type 'Parameters.Parameter'() :: #'Parameters.Parameter'{}.


-record('Parameters', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	parameter :: ['Parameters.Parameter'()] | undefined}).

-type 'Parameters'() :: #'Parameters'{}.


-record('OrganizationAffiliation', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	active :: boolean() | undefined,
	period :: 'Period'() | undefined,
	organization :: 'Reference'() | undefined,
	participatingOrganization :: 'Reference'() | undefined,
	network :: ['Reference'()] | undefined,
	code :: ['CodeableConcept'()] | undefined,
	specialty :: ['CodeableConcept'()] | undefined,
	location :: ['Reference'()] | undefined,
	healthcareService :: ['Reference'()] | undefined,
	telecom :: ['ContactPoint'()] | undefined,
	endpoint :: ['Reference'()] | undefined}).

-type 'OrganizationAffiliation'() :: #'OrganizationAffiliation'{}.


-record('Organization.Contact', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	purpose :: 'CodeableConcept'() | undefined,
	name :: 'HumanName'() | undefined,
	telecom :: ['ContactPoint'()] | undefined,
	address :: 'Address'() | undefined}).

-type 'Organization.Contact'() :: #'Organization.Contact'{}.


-record('Organization', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	active :: boolean() | undefined,
	type :: ['CodeableConcept'()] | undefined,
	name :: string() | undefined,
	alias :: [string()] | undefined,
	telecom :: ['ContactPoint'()] | undefined,
	address :: ['Address'()] | undefined,
	partOf :: 'Reference'() | undefined,
	contact :: ['Organization.Contact'()] | undefined,
	endpoint :: ['Reference'()] | undefined}).

-type 'Organization'() :: #'Organization'{}.


-record('IssueSeverity', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'IssueSeverity'() :: #'IssueSeverity'{}.


-record('IssueType', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'IssueType'() :: #'IssueType'{}.


-record('OperationOutcome.Issue', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	severity :: 'IssueSeverity'(),
	code :: 'IssueType'(),
	details :: 'CodeableConcept'() | undefined,
	diagnostics :: string() | undefined,
	location :: [string()] | undefined,
	expression :: [string()] | undefined}).

-type 'OperationOutcome.Issue'() :: #'OperationOutcome.Issue'{}.


-record('OperationOutcome', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	issue :: ['OperationOutcome.Issue'()]}).

-type 'OperationOutcome'() :: #'OperationOutcome'{}.


-record('OperationKind', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'OperationKind'() :: #'OperationKind'{}.


-record('OperationParameterUse', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'OperationParameterUse'() :: #'OperationParameterUse'{}.


-record('OperationDefinition.Overload', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	parameterName :: [string()] | undefined,
	comment :: string() | undefined}).

-type 'OperationDefinition.Overload'() :: #'OperationDefinition.Overload'{}.


-record('OperationDefinition.ReferencedFrom', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	source :: string(),
	sourceId :: string() | undefined}).

-type 'OperationDefinition.ReferencedFrom'() :: #'OperationDefinition.ReferencedFrom'{}.


-record('OperationDefinition.Binding', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	strength :: 'BindingStrength'(),
	valueSet :: canonical()}).

-type 'OperationDefinition.Binding'() :: #'OperationDefinition.Binding'{}.


-record('OperationDefinition.Parameter', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	name :: code(),
	use :: 'OperationParameterUse'(),
	min :: integer(),
	max :: string(),
	documentation :: string() | undefined,
	type :: code() | undefined,
	targetProfile :: [canonical()] | undefined,
	searchType :: 'SearchParamType'() | undefined,
	binding :: 'OperationDefinition.Binding'() | undefined,
	referencedFrom :: ['OperationDefinition.ReferencedFrom'()] | undefined,
	part :: ['OperationDefinition.Parameter'()] | undefined}).

-type 'OperationDefinition.Parameter'() :: #'OperationDefinition.Parameter'{}.


-record('OperationDefinition', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	url :: uri() | undefined,
	version :: string() | undefined,
	name :: string(),
	title :: string() | undefined,
	status :: 'PublicationStatus'(),
	kind :: 'OperationKind'(),
	experimental :: boolean() | undefined,
	date :: dateTime() | undefined,
	publisher :: string() | undefined,
	contact :: ['ContactDetail'()] | undefined,
	description :: markdown() | undefined,
	useContext :: ['UsageContext'()] | undefined,
	jurisdiction :: ['CodeableConcept'()] | undefined,
	purpose :: markdown() | undefined,
	affectsState :: boolean() | undefined,
	code :: code(),
	comment :: markdown() | undefined,
	base :: canonical() | undefined,
	resource :: [code()] | undefined,
	system :: boolean(),
	type :: boolean(),
	instance :: boolean(),
	inputProfile :: canonical() | undefined,
	outputProfile :: canonical() | undefined,
	parameter :: ['OperationDefinition.Parameter'()] | undefined,
	overload :: ['OperationDefinition.Overload'()] | undefined}).

-type 'OperationDefinition'() :: #'OperationDefinition'{}.


-record('ObservationRangeCategory', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'ObservationRangeCategory'() :: #'ObservationRangeCategory'{}.


-record('ObservationDataType', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'ObservationDataType'() :: #'ObservationDataType'{}.


-record('ObservationDefinition.QualifiedInterval', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	category :: 'ObservationRangeCategory'() | undefined,
	range :: 'Range'() | undefined,
	context :: 'CodeableConcept'() | undefined,
	appliesTo :: ['CodeableConcept'()] | undefined,
	gender :: 'AdministrativeGender'() | undefined,
	age :: 'Range'() | undefined,
	gestationalAge :: 'Range'() | undefined,
	condition :: string() | undefined}).

-type 'ObservationDefinition.QualifiedInterval'() :: #'ObservationDefinition.QualifiedInterval'{}.


-record('ObservationDefinition.QuantitativeDetails', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	customaryUnit :: 'CodeableConcept'() | undefined,
	unit :: 'CodeableConcept'() | undefined,
	conversionFactor :: decimal() | undefined,
	decimalPrecision :: integer() | undefined}).

-type 'ObservationDefinition.QuantitativeDetails'() :: #'ObservationDefinition.QuantitativeDetails'{}.


-record('ObservationDefinition', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	category :: ['CodeableConcept'()] | undefined,
	code :: 'CodeableConcept'(),
	identifier :: ['Identifier'()] | undefined,
	permittedDataType :: ['ObservationDataType'()] | undefined,
	multipleResultsAllowed :: boolean() | undefined,
	method :: 'CodeableConcept'() | undefined,
	preferredReportName :: string() | undefined,
	quantitativeDetails :: 'ObservationDefinition.QuantitativeDetails'() | undefined,
	qualifiedInterval :: ['ObservationDefinition.QualifiedInterval'()] | undefined,
	validCodedValueSet :: 'Reference'() | undefined,
	normalCodedValueSet :: 'Reference'() | undefined,
	abnormalCodedValueSet :: 'Reference'() | undefined,
	criticalCodedValueSet :: 'Reference'() | undefined}).

-type 'ObservationDefinition'() :: #'ObservationDefinition'{}.


-record('Observation.Component', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	code :: 'CodeableConcept'(),
	choice :: time() | string() | 'SampledData'() | 'Ratio'() | 'Range'() | 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | 'Period'() | integer() | dateTime() | 'CodeableConcept'() | boolean() | undefined,
	dataAbsentReason :: 'CodeableConcept'() | undefined,
	interpretation :: ['CodeableConcept'()] | undefined,
	referenceRange :: ['Observation.ReferenceRange'()] | undefined}).

-type 'Observation.Component'() :: #'Observation.Component'{}.


-record('Observation.ReferenceRange', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	low :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	high :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	type :: 'CodeableConcept'() | undefined,
	appliesTo :: ['CodeableConcept'()] | undefined,
	age :: 'Range'() | undefined,
	text :: string() | undefined}).

-type 'Observation.ReferenceRange'() :: #'Observation.ReferenceRange'{}.


-record('Observation', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	basedOn :: ['Reference'()] | undefined,
	partOf :: ['Reference'()] | undefined,
	status :: 'ObservationStatus'(),
	category :: ['CodeableConcept'()] | undefined,
	code :: 'CodeableConcept'(),
	subject :: 'Reference'() | undefined,
	focus :: ['Reference'()] | undefined,
	encounter :: 'Reference'() | undefined,
	choice :: 'Timing'() | 'Period'() | instant() | dateTime() | undefined,
	issued :: instant() | undefined,
	performer :: ['Reference'()] | undefined,
	choice1 :: time() | string() | 'SampledData'() | 'Ratio'() | 'Range'() | 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | 'Period'() | integer() | dateTime() | 'CodeableConcept'() | boolean() | undefined,
	dataAbsentReason :: 'CodeableConcept'() | undefined,
	interpretation :: ['CodeableConcept'()] | undefined,
	note :: ['Annotation'()] | undefined,
	bodySite :: 'CodeableConcept'() | undefined,
	method :: 'CodeableConcept'() | undefined,
	specimen :: 'Reference'() | undefined,
	device :: 'Reference'() | undefined,
	referenceRange :: ['Observation.ReferenceRange'()] | undefined,
	hasMember :: ['Reference'()] | undefined,
	derivedFrom :: ['Reference'()] | undefined,
	component :: ['Observation.Component'()] | undefined}).

-type 'Observation'() :: #'Observation'{}.


-record('NutritionOrder.Administration', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	schedule :: 'Timing'() | undefined,
	quantity :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	choice :: 'Ratio'() | 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined}).

-type 'NutritionOrder.Administration'() :: #'NutritionOrder.Administration'{}.


-record('NutritionOrder.EnteralFormula', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	baseFormulaType :: 'CodeableConcept'() | undefined,
	baseFormulaProductName :: string() | undefined,
	additiveType :: 'CodeableConcept'() | undefined,
	additiveProductName :: string() | undefined,
	caloricDensity :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	routeofAdministration :: 'CodeableConcept'() | undefined,
	administration :: ['NutritionOrder.Administration'()] | undefined,
	maxVolumeToDeliver :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	administrationInstruction :: string() | undefined}).

-type 'NutritionOrder.EnteralFormula'() :: #'NutritionOrder.EnteralFormula'{}.


-record('NutritionOrder.Supplement', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: 'CodeableConcept'() | undefined,
	productName :: string() | undefined,
	schedule :: ['Timing'()] | undefined,
	quantity :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	instruction :: string() | undefined}).

-type 'NutritionOrder.Supplement'() :: #'NutritionOrder.Supplement'{}.


-record('NutritionOrder.Texture', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	modifier :: 'CodeableConcept'() | undefined,
	foodType :: 'CodeableConcept'() | undefined}).

-type 'NutritionOrder.Texture'() :: #'NutritionOrder.Texture'{}.


-record('NutritionOrder.Nutrient', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	modifier :: 'CodeableConcept'() | undefined,
	amount :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined}).

-type 'NutritionOrder.Nutrient'() :: #'NutritionOrder.Nutrient'{}.


-record('NutritionOrder.OralDiet', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: ['CodeableConcept'()] | undefined,
	schedule :: ['Timing'()] | undefined,
	nutrient :: ['NutritionOrder.Nutrient'()] | undefined,
	texture :: ['NutritionOrder.Texture'()] | undefined,
	fluidConsistencyType :: ['CodeableConcept'()] | undefined,
	instruction :: string() | undefined}).

-type 'NutritionOrder.OralDiet'() :: #'NutritionOrder.OralDiet'{}.


-record('NutritionOrder', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	instantiatesCanonical :: [canonical()] | undefined,
	instantiatesUri :: [uri()] | undefined,
	instantiates :: [uri()] | undefined,
	status :: 'RequestStatus'(),
	intent :: 'RequestIntent'(),
	patient :: 'Reference'(),
	encounter :: 'Reference'() | undefined,
	dateTime :: dateTime(),
	orderer :: 'Reference'() | undefined,
	allergyIntolerance :: ['Reference'()] | undefined,
	foodPreferenceModifier :: ['CodeableConcept'()] | undefined,
	excludeFoodModifier :: ['CodeableConcept'()] | undefined,
	oralDiet :: 'NutritionOrder.OralDiet'() | undefined,
	supplement :: ['NutritionOrder.Supplement'()] | undefined,
	enteralFormula :: 'NutritionOrder.EnteralFormula'() | undefined,
	note :: ['Annotation'()] | undefined}).

-type 'NutritionOrder'() :: #'NutritionOrder'{}.


-record('NamingSystemType', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'NamingSystemType'() :: #'NamingSystemType'{}.


-record('NamingSystemIdentifierType', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'NamingSystemIdentifierType'() :: #'NamingSystemIdentifierType'{}.


-record('NamingSystem.UniqueId', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: 'NamingSystemIdentifierType'(),
	value :: string(),
	preferred :: boolean() | undefined,
	comment :: string() | undefined,
	period :: 'Period'() | undefined}).

-type 'NamingSystem.UniqueId'() :: #'NamingSystem.UniqueId'{}.


-record('NamingSystem', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	name :: string(),
	status :: 'PublicationStatus'(),
	kind :: 'NamingSystemType'(),
	date :: dateTime(),
	publisher :: string() | undefined,
	contact :: ['ContactDetail'()] | undefined,
	responsible :: string() | undefined,
	type :: 'CodeableConcept'() | undefined,
	description :: markdown() | undefined,
	useContext :: ['UsageContext'()] | undefined,
	jurisdiction :: ['CodeableConcept'()] | undefined,
	usage :: string() | undefined,
	uniqueId :: ['NamingSystem.UniqueId'()]}).

-type 'NamingSystem'() :: #'NamingSystem'{}.


-record(sequenceType, {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type sequenceType() :: #sequenceType{}.


-record(qualityType, {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type qualityType() :: #qualityType{}.


-record(repositoryType, {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type repositoryType() :: #repositoryType{}.


-record(orientationType, {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type orientationType() :: #orientationType{}.


-record(strandType, {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type strandType() :: #strandType{}.


-record('MolecularSequence.Inner', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	start :: integer() | undefined,
	'end' :: integer() | undefined}).

-type 'MolecularSequence.Inner'() :: #'MolecularSequence.Inner'{}.


-record('MolecularSequence.Outer', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	start :: integer() | undefined,
	'end' :: integer() | undefined}).

-type 'MolecularSequence.Outer'() :: #'MolecularSequence.Outer'{}.


-record('MolecularSequence.StructureVariant', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	variantType :: 'CodeableConcept'() | undefined,
	exact :: boolean() | undefined,
	length :: integer() | undefined,
	outer :: 'MolecularSequence.Outer'() | undefined,
	inner :: 'MolecularSequence.Inner'() | undefined}).

-type 'MolecularSequence.StructureVariant'() :: #'MolecularSequence.StructureVariant'{}.


-record('MolecularSequence.Repository', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: repositoryType(),
	url :: uri() | undefined,
	name :: string() | undefined,
	datasetId :: string() | undefined,
	variantsetId :: string() | undefined,
	readsetId :: string() | undefined}).

-type 'MolecularSequence.Repository'() :: #'MolecularSequence.Repository'{}.


-record('MolecularSequence.Roc', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	score :: [integer()] | undefined,
	numTP :: [integer()] | undefined,
	numFP :: [integer()] | undefined,
	numFN :: [integer()] | undefined,
	precision :: [decimal()] | undefined,
	sensitivity :: [decimal()] | undefined,
	fMeasure :: [decimal()] | undefined}).

-type 'MolecularSequence.Roc'() :: #'MolecularSequence.Roc'{}.


-record('MolecularSequence.Quality', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: qualityType(),
	standardSequence :: 'CodeableConcept'() | undefined,
	start :: integer() | undefined,
	'end' :: integer() | undefined,
	score :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	method :: 'CodeableConcept'() | undefined,
	truthTP :: decimal() | undefined,
	queryTP :: decimal() | undefined,
	truthFN :: decimal() | undefined,
	queryFP :: decimal() | undefined,
	gtFP :: decimal() | undefined,
	precision :: decimal() | undefined,
	recall :: decimal() | undefined,
	fScore :: decimal() | undefined,
	roc :: 'MolecularSequence.Roc'() | undefined}).

-type 'MolecularSequence.Quality'() :: #'MolecularSequence.Quality'{}.


-record('MolecularSequence.Variant', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	start :: integer() | undefined,
	'end' :: integer() | undefined,
	observedAllele :: string() | undefined,
	referenceAllele :: string() | undefined,
	cigar :: string() | undefined,
	variantPointer :: 'Reference'() | undefined}).

-type 'MolecularSequence.Variant'() :: #'MolecularSequence.Variant'{}.


-record('MolecularSequence.ReferenceSeq', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	chromosome :: 'CodeableConcept'() | undefined,
	genomeBuild :: string() | undefined,
	orientation :: orientationType() | undefined,
	referenceSeqId :: 'CodeableConcept'() | undefined,
	referenceSeqPointer :: 'Reference'() | undefined,
	referenceSeqString :: string() | undefined,
	strand :: strandType() | undefined,
	windowStart :: integer() | undefined,
	windowEnd :: integer() | undefined}).

-type 'MolecularSequence.ReferenceSeq'() :: #'MolecularSequence.ReferenceSeq'{}.


-record('MolecularSequence', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	type :: sequenceType() | undefined,
	coordinateSystem :: integer(),
	patient :: 'Reference'() | undefined,
	specimen :: 'Reference'() | undefined,
	device :: 'Reference'() | undefined,
	performer :: 'Reference'() | undefined,
	quantity :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	referenceSeq :: 'MolecularSequence.ReferenceSeq'() | undefined,
	variant :: ['MolecularSequence.Variant'()] | undefined,
	observedSeq :: string() | undefined,
	quality :: ['MolecularSequence.Quality'()] | undefined,
	readCoverage :: integer() | undefined,
	repository :: ['MolecularSequence.Repository'()] | undefined,
	pointer :: ['Reference'()] | undefined,
	structureVariant :: ['MolecularSequence.StructureVariant'()] | undefined}).

-type 'MolecularSequence'() :: #'MolecularSequence'{}.


-record('ResponseType', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'ResponseType'() :: #'ResponseType'{}.


-record('MessageHeader.Response', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: id(),
	code :: 'ResponseType'(),
	details :: 'Reference'() | undefined}).

-type 'MessageHeader.Response'() :: #'MessageHeader.Response'{}.


-record('MessageHeader.Source', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	name :: string() | undefined,
	software :: string() | undefined,
	version :: string() | undefined,
	contact :: 'ContactPoint'() | undefined,
	endpoint :: url()}).

-type 'MessageHeader.Source'() :: #'MessageHeader.Source'{}.


-record('MessageHeader.Destination', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	name :: string() | undefined,
	target :: 'Reference'() | undefined,
	endpoint :: url(),
	receiver :: 'Reference'() | undefined}).

-type 'MessageHeader.Destination'() :: #'MessageHeader.Destination'{}.


-record('MessageHeader', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	choice :: uri() | 'Coding'(),
	destination :: ['MessageHeader.Destination'()] | undefined,
	sender :: 'Reference'() | undefined,
	enterer :: 'Reference'() | undefined,
	author :: 'Reference'() | undefined,
	source :: 'MessageHeader.Source'(),
	responsible :: 'Reference'() | undefined,
	reason :: 'CodeableConcept'() | undefined,
	response :: 'MessageHeader.Response'() | undefined,
	focus :: ['Reference'()] | undefined,
	definition :: canonical() | undefined}).

-type 'MessageHeader'() :: #'MessageHeader'{}.


-record(messageheaderResponseRequest, {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type messageheaderResponseRequest() :: #messageheaderResponseRequest{}.


-record('MessageSignificanceCategory', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'MessageSignificanceCategory'() :: #'MessageSignificanceCategory'{}.


-record('MessageDefinition.AllowedResponse', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	message :: canonical(),
	situation :: markdown() | undefined}).

-type 'MessageDefinition.AllowedResponse'() :: #'MessageDefinition.AllowedResponse'{}.


-record('MessageDefinition.Focus', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	code :: code(),
	profile :: canonical() | undefined,
	min :: unsignedInt(),
	max :: string() | undefined}).

-type 'MessageDefinition.Focus'() :: #'MessageDefinition.Focus'{}.


-record('MessageDefinition', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	url :: uri() | undefined,
	identifier :: ['Identifier'()] | undefined,
	version :: string() | undefined,
	name :: string() | undefined,
	title :: string() | undefined,
	replaces :: [canonical()] | undefined,
	status :: 'PublicationStatus'(),
	experimental :: boolean() | undefined,
	date :: dateTime(),
	publisher :: string() | undefined,
	contact :: ['ContactDetail'()] | undefined,
	description :: markdown() | undefined,
	useContext :: ['UsageContext'()] | undefined,
	jurisdiction :: ['CodeableConcept'()] | undefined,
	purpose :: markdown() | undefined,
	copyright :: markdown() | undefined,
	base :: canonical() | undefined,
	parent :: [canonical()] | undefined,
	choice :: uri() | 'Coding'(),
	category :: 'MessageSignificanceCategory'() | undefined,
	focus :: ['MessageDefinition.Focus'()] | undefined,
	responseRequired :: messageheaderResponseRequest() | undefined,
	allowedResponse :: ['MessageDefinition.AllowedResponse'()] | undefined,
	graph :: [canonical()] | undefined}).

-type 'MessageDefinition'() :: #'MessageDefinition'{}.


-record('MedicinalProductUndesirableEffect', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	subject :: ['Reference'()] | undefined,
	symptomConditionEffect :: 'CodeableConcept'() | undefined,
	classification :: 'CodeableConcept'() | undefined,
	frequencyOfOccurrence :: 'CodeableConcept'() | undefined,
	population :: ['Population'()] | undefined}).

-type 'MedicinalProductUndesirableEffect'() :: #'MedicinalProductUndesirableEffect'{}.


-record('MedicinalProductPharmaceutical.WithdrawalPeriod', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	tissue :: 'CodeableConcept'(),
	value :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'(),
	supportingInformation :: string() | undefined}).

-type 'MedicinalProductPharmaceutical.WithdrawalPeriod'() :: #'MedicinalProductPharmaceutical.WithdrawalPeriod'{}.


-record('MedicinalProductPharmaceutical.TargetSpecies', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	code :: 'CodeableConcept'(),
	withdrawalPeriod :: ['MedicinalProductPharmaceutical.WithdrawalPeriod'()] | undefined}).

-type 'MedicinalProductPharmaceutical.TargetSpecies'() :: #'MedicinalProductPharmaceutical.TargetSpecies'{}.


-record('MedicinalProductPharmaceutical.RouteOfAdministration', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	code :: 'CodeableConcept'(),
	firstDose :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	maxSingleDose :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	maxDosePerDay :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	maxDosePerTreatmentPeriod :: 'Ratio'() | undefined,
	maxTreatmentPeriod :: 'Duration'() | undefined,
	targetSpecies :: ['MedicinalProductPharmaceutical.TargetSpecies'()] | undefined}).

-type 'MedicinalProductPharmaceutical.RouteOfAdministration'() :: #'MedicinalProductPharmaceutical.RouteOfAdministration'{}.


-record('MedicinalProductPharmaceutical.Characteristics', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	code :: 'CodeableConcept'(),
	status :: 'CodeableConcept'() | undefined}).

-type 'MedicinalProductPharmaceutical.Characteristics'() :: #'MedicinalProductPharmaceutical.Characteristics'{}.


-record('MedicinalProductPharmaceutical', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	administrableDoseForm :: 'CodeableConcept'(),
	unitOfPresentation :: 'CodeableConcept'() | undefined,
	ingredient :: ['Reference'()] | undefined,
	device :: ['Reference'()] | undefined,
	characteristics :: ['MedicinalProductPharmaceutical.Characteristics'()] | undefined,
	routeOfAdministration :: ['MedicinalProductPharmaceutical.RouteOfAdministration'()]}).

-type 'MedicinalProductPharmaceutical'() :: #'MedicinalProductPharmaceutical'{}.


-record('MedicinalProductPackaged.PackageItem', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	type :: 'CodeableConcept'(),
	quantity :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'(),
	material :: ['CodeableConcept'()] | undefined,
	alternateMaterial :: ['CodeableConcept'()] | undefined,
	device :: ['Reference'()] | undefined,
	manufacturedItem :: ['Reference'()] | undefined,
	packageItem :: ['MedicinalProductPackaged.PackageItem'()] | undefined,
	physicalCharacteristics :: 'ProdCharacteristic'() | undefined,
	otherCharacteristics :: ['CodeableConcept'()] | undefined,
	shelfLifeStorage :: ['ProductShelfLife'()] | undefined,
	manufacturer :: ['Reference'()] | undefined}).

-type 'MedicinalProductPackaged.PackageItem'() :: #'MedicinalProductPackaged.PackageItem'{}.


-record('MedicinalProductPackaged.BatchIdentifier', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	outerPackaging :: 'Identifier'(),
	immediatePackaging :: 'Identifier'() | undefined}).

-type 'MedicinalProductPackaged.BatchIdentifier'() :: #'MedicinalProductPackaged.BatchIdentifier'{}.


-record('MedicinalProductPackaged', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	subject :: ['Reference'()] | undefined,
	description :: string() | undefined,
	legalStatusOfSupply :: 'CodeableConcept'() | undefined,
	marketingStatus :: ['MarketingStatus'()] | undefined,
	marketingAuthorization :: 'Reference'() | undefined,
	manufacturer :: ['Reference'()] | undefined,
	batchIdentifier :: ['MedicinalProductPackaged.BatchIdentifier'()] | undefined,
	packageItem :: ['MedicinalProductPackaged.PackageItem'()]}).

-type 'MedicinalProductPackaged'() :: #'MedicinalProductPackaged'{}.


-record('MedicinalProductManufactured', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	manufacturedDoseForm :: 'CodeableConcept'(),
	unitOfPresentation :: 'CodeableConcept'() | undefined,
	quantity :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'(),
	manufacturer :: ['Reference'()] | undefined,
	ingredient :: ['Reference'()] | undefined,
	physicalCharacteristics :: 'ProdCharacteristic'() | undefined,
	otherCharacteristics :: ['CodeableConcept'()] | undefined}).

-type 'MedicinalProductManufactured'() :: #'MedicinalProductManufactured'{}.


-record('MedicinalProductInteraction.Interactant', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	choice :: 'Reference'() | 'CodeableConcept'()}).

-type 'MedicinalProductInteraction.Interactant'() :: #'MedicinalProductInteraction.Interactant'{}.


-record('MedicinalProductInteraction', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	subject :: ['Reference'()] | undefined,
	description :: string() | undefined,
	interactant :: ['MedicinalProductInteraction.Interactant'()] | undefined,
	type :: 'CodeableConcept'() | undefined,
	effect :: 'CodeableConcept'() | undefined,
	incidence :: 'CodeableConcept'() | undefined,
	management :: 'CodeableConcept'() | undefined}).

-type 'MedicinalProductInteraction'() :: #'MedicinalProductInteraction'{}.


-record('MedicinalProductIngredient.Substance', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	code :: 'CodeableConcept'(),
	strength :: ['MedicinalProductIngredient.Strength'()] | undefined}).

-type 'MedicinalProductIngredient.Substance'() :: #'MedicinalProductIngredient.Substance'{}.


-record('MedicinalProductIngredient.ReferenceStrength', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	substance :: 'CodeableConcept'() | undefined,
	strength :: 'Ratio'(),
	strengthLowLimit :: 'Ratio'() | undefined,
	measurementPoint :: string() | undefined,
	country :: ['CodeableConcept'()] | undefined}).

-type 'MedicinalProductIngredient.ReferenceStrength'() :: #'MedicinalProductIngredient.ReferenceStrength'{}.


-record('MedicinalProductIngredient.Strength', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	presentation :: 'Ratio'(),
	presentationLowLimit :: 'Ratio'() | undefined,
	concentration :: 'Ratio'() | undefined,
	concentrationLowLimit :: 'Ratio'() | undefined,
	measurementPoint :: string() | undefined,
	country :: ['CodeableConcept'()] | undefined,
	referenceStrength :: ['MedicinalProductIngredient.ReferenceStrength'()] | undefined}).

-type 'MedicinalProductIngredient.Strength'() :: #'MedicinalProductIngredient.Strength'{}.


-record('MedicinalProductIngredient.SpecifiedSubstance', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	code :: 'CodeableConcept'(),
	group :: 'CodeableConcept'(),
	confidentiality :: 'CodeableConcept'() | undefined,
	strength :: ['MedicinalProductIngredient.Strength'()] | undefined}).

-type 'MedicinalProductIngredient.SpecifiedSubstance'() :: #'MedicinalProductIngredient.SpecifiedSubstance'{}.


-record('MedicinalProductIngredient', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: 'Identifier'() | undefined,
	role :: 'CodeableConcept'(),
	allergenicIndicator :: boolean() | undefined,
	manufacturer :: ['Reference'()] | undefined,
	specifiedSubstance :: ['MedicinalProductIngredient.SpecifiedSubstance'()] | undefined,
	substance :: 'MedicinalProductIngredient.Substance'() | undefined}).

-type 'MedicinalProductIngredient'() :: #'MedicinalProductIngredient'{}.


-record('MedicinalProductIndication.OtherTherapy', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	therapyRelationshipType :: 'CodeableConcept'(),
	choice :: 'Reference'() | 'CodeableConcept'()}).

-type 'MedicinalProductIndication.OtherTherapy'() :: #'MedicinalProductIndication.OtherTherapy'{}.


-record('MedicinalProductIndication', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	subject :: ['Reference'()] | undefined,
	diseaseSymptomProcedure :: 'CodeableConcept'() | undefined,
	diseaseStatus :: 'CodeableConcept'() | undefined,
	comorbidity :: ['CodeableConcept'()] | undefined,
	intendedEffect :: 'CodeableConcept'() | undefined,
	duration :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	otherTherapy :: ['MedicinalProductIndication.OtherTherapy'()] | undefined,
	undesirableEffect :: ['Reference'()] | undefined,
	population :: ['Population'()] | undefined}).

-type 'MedicinalProductIndication'() :: #'MedicinalProductIndication'{}.


-record('MedicinalProductContraindication.OtherTherapy', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	therapyRelationshipType :: 'CodeableConcept'(),
	choice :: 'Reference'() | 'CodeableConcept'()}).

-type 'MedicinalProductContraindication.OtherTherapy'() :: #'MedicinalProductContraindication.OtherTherapy'{}.


-record('MedicinalProductContraindication', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	subject :: ['Reference'()] | undefined,
	disease :: 'CodeableConcept'() | undefined,
	diseaseStatus :: 'CodeableConcept'() | undefined,
	comorbidity :: ['CodeableConcept'()] | undefined,
	therapeuticIndication :: ['Reference'()] | undefined,
	otherTherapy :: ['MedicinalProductContraindication.OtherTherapy'()] | undefined,
	population :: ['Population'()] | undefined}).

-type 'MedicinalProductContraindication'() :: #'MedicinalProductContraindication'{}.


-record('MedicinalProductAuthorization.Procedure', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: 'Identifier'() | undefined,
	type :: 'CodeableConcept'(),
	choice :: 'Period'() | dateTime() | undefined,
	application :: ['MedicinalProductAuthorization.Procedure'()] | undefined}).

-type 'MedicinalProductAuthorization.Procedure'() :: #'MedicinalProductAuthorization.Procedure'{}.


-record('MedicinalProductAuthorization.JurisdictionalAuthorization', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	country :: 'CodeableConcept'() | undefined,
	jurisdiction :: ['CodeableConcept'()] | undefined,
	legalStatusOfSupply :: 'CodeableConcept'() | undefined,
	validityPeriod :: 'Period'() | undefined}).

-type 'MedicinalProductAuthorization.JurisdictionalAuthorization'() :: #'MedicinalProductAuthorization.JurisdictionalAuthorization'{}.


-record('MedicinalProductAuthorization', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	subject :: 'Reference'() | undefined,
	country :: ['CodeableConcept'()] | undefined,
	jurisdiction :: ['CodeableConcept'()] | undefined,
	status :: 'CodeableConcept'() | undefined,
	statusDate :: dateTime() | undefined,
	restoreDate :: dateTime() | undefined,
	validityPeriod :: 'Period'() | undefined,
	dataExclusivityPeriod :: 'Period'() | undefined,
	dateOfFirstAuthorization :: dateTime() | undefined,
	internationalBirthDate :: dateTime() | undefined,
	legalBasis :: 'CodeableConcept'() | undefined,
	jurisdictionalAuthorization :: ['MedicinalProductAuthorization.JurisdictionalAuthorization'()] | undefined,
	holder :: 'Reference'() | undefined,
	regulator :: 'Reference'() | undefined,
	procedure :: 'MedicinalProductAuthorization.Procedure'() | undefined}).

-type 'MedicinalProductAuthorization'() :: #'MedicinalProductAuthorization'{}.


-record('MedicinalProduct.SpecialDesignation', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	type :: 'CodeableConcept'() | undefined,
	intendedUse :: 'CodeableConcept'() | undefined,
	choice :: 'Reference'() | 'CodeableConcept'() | undefined,
	status :: 'CodeableConcept'() | undefined,
	date :: dateTime() | undefined,
	species :: 'CodeableConcept'() | undefined}).

-type 'MedicinalProduct.SpecialDesignation'() :: #'MedicinalProduct.SpecialDesignation'{}.


-record('MedicinalProduct.ManufacturingBusinessOperation', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	operationType :: 'CodeableConcept'() | undefined,
	authorisationReferenceNumber :: 'Identifier'() | undefined,
	effectiveDate :: dateTime() | undefined,
	confidentialityIndicator :: 'CodeableConcept'() | undefined,
	manufacturer :: ['Reference'()] | undefined,
	regulator :: 'Reference'() | undefined}).

-type 'MedicinalProduct.ManufacturingBusinessOperation'() :: #'MedicinalProduct.ManufacturingBusinessOperation'{}.


-record('MedicinalProduct.CountryLanguage', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	country :: 'CodeableConcept'(),
	jurisdiction :: 'CodeableConcept'() | undefined,
	language :: 'CodeableConcept'()}).

-type 'MedicinalProduct.CountryLanguage'() :: #'MedicinalProduct.CountryLanguage'{}.


-record('MedicinalProduct.NamePart', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	part :: string(),
	type :: 'Coding'()}).

-type 'MedicinalProduct.NamePart'() :: #'MedicinalProduct.NamePart'{}.


-record('MedicinalProduct.Name', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	productName :: string(),
	namePart :: ['MedicinalProduct.NamePart'()] | undefined,
	countryLanguage :: ['MedicinalProduct.CountryLanguage'()] | undefined}).

-type 'MedicinalProduct.Name'() :: #'MedicinalProduct.Name'{}.


-record('MedicinalProduct', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	type :: 'CodeableConcept'() | undefined,
	domain :: 'Coding'() | undefined,
	combinedPharmaceuticalDoseForm :: 'CodeableConcept'() | undefined,
	legalStatusOfSupply :: 'CodeableConcept'() | undefined,
	additionalMonitoringIndicator :: 'CodeableConcept'() | undefined,
	specialMeasures :: [string()] | undefined,
	paediatricUseIndicator :: 'CodeableConcept'() | undefined,
	productClassification :: ['CodeableConcept'()] | undefined,
	marketingStatus :: ['MarketingStatus'()] | undefined,
	pharmaceuticalProduct :: ['Reference'()] | undefined,
	packagedMedicinalProduct :: ['Reference'()] | undefined,
	attachedDocument :: ['Reference'()] | undefined,
	masterFile :: ['Reference'()] | undefined,
	contact :: ['Reference'()] | undefined,
	clinicalTrial :: ['Reference'()] | undefined,
	name :: ['MedicinalProduct.Name'()],
	crossReference :: ['Identifier'()] | undefined,
	manufacturingBusinessOperation :: ['MedicinalProduct.ManufacturingBusinessOperation'()] | undefined,
	specialDesignation :: ['MedicinalProduct.SpecialDesignation'()] | undefined}).

-type 'MedicinalProduct'() :: #'MedicinalProduct'{}.


-record('MedicationStatement', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	basedOn :: ['Reference'()] | undefined,
	partOf :: ['Reference'()] | undefined,
	status :: 'MedicationStatusCodes'(),
	statusReason :: ['CodeableConcept'()] | undefined,
	category :: 'CodeableConcept'() | undefined,
	choice :: 'Reference'() | 'CodeableConcept'(),
	subject :: 'Reference'(),
	context :: 'Reference'() | undefined,
	choice1 :: 'Period'() | dateTime() | undefined,
	dateAsserted :: dateTime() | undefined,
	informationSource :: 'Reference'() | undefined,
	derivedFrom :: ['Reference'()] | undefined,
	reasonCode :: ['CodeableConcept'()] | undefined,
	reasonReference :: ['Reference'()] | undefined,
	note :: ['Annotation'()] | undefined,
	dosage :: ['Dosage'()] | undefined}).

-type 'MedicationStatement'() :: #'MedicationStatement'{}.


-record(medicationRequestIntent, {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type medicationRequestIntent() :: #medicationRequestIntent{}.


-record(medicationrequestStatus, {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type medicationrequestStatus() :: #medicationrequestStatus{}.


-record('MedicationRequest.Substitution', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	choice :: 'CodeableConcept'() | boolean(),
	reason :: 'CodeableConcept'() | undefined}).

-type 'MedicationRequest.Substitution'() :: #'MedicationRequest.Substitution'{}.


-record('MedicationRequest.InitialFill', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	quantity :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	duration :: 'Duration'() | undefined}).

-type 'MedicationRequest.InitialFill'() :: #'MedicationRequest.InitialFill'{}.


-record('MedicationRequest.DispenseRequest', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	initialFill :: 'MedicationRequest.InitialFill'() | undefined,
	dispenseInterval :: 'Duration'() | undefined,
	validityPeriod :: 'Period'() | undefined,
	numberOfRepeatsAllowed :: unsignedInt() | undefined,
	quantity :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	expectedSupplyDuration :: 'Duration'() | undefined,
	performer :: 'Reference'() | undefined}).

-type 'MedicationRequest.DispenseRequest'() :: #'MedicationRequest.DispenseRequest'{}.


-record('MedicationRequest', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	status :: medicationrequestStatus(),
	statusReason :: 'CodeableConcept'() | undefined,
	intent :: medicationRequestIntent(),
	category :: ['CodeableConcept'()] | undefined,
	priority :: 'RequestPriority'() | undefined,
	doNotPerform :: boolean() | undefined,
	choice :: 'Reference'() | boolean() | undefined,
	choice1 :: 'Reference'() | 'CodeableConcept'(),
	subject :: 'Reference'(),
	encounter :: 'Reference'() | undefined,
	supportingInformation :: ['Reference'()] | undefined,
	authoredOn :: dateTime() | undefined,
	requester :: 'Reference'() | undefined,
	performer :: 'Reference'() | undefined,
	performerType :: 'CodeableConcept'() | undefined,
	recorder :: 'Reference'() | undefined,
	reasonCode :: ['CodeableConcept'()] | undefined,
	reasonReference :: ['Reference'()] | undefined,
	instantiatesCanonical :: [canonical()] | undefined,
	instantiatesUri :: [uri()] | undefined,
	basedOn :: ['Reference'()] | undefined,
	groupIdentifier :: 'Identifier'() | undefined,
	courseOfTherapyType :: 'CodeableConcept'() | undefined,
	insurance :: ['Reference'()] | undefined,
	note :: ['Annotation'()] | undefined,
	dosageInstruction :: ['Dosage'()] | undefined,
	dispenseRequest :: 'MedicationRequest.DispenseRequest'() | undefined,
	substitution :: 'MedicationRequest.Substitution'() | undefined,
	priorPrescription :: 'Reference'() | undefined,
	detectedIssue :: ['Reference'()] | undefined,
	eventHistory :: ['Reference'()] | undefined}).

-type 'MedicationRequest'() :: #'MedicationRequest'{}.


-record('MedicationKnowledge.Kinetics', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	areaUnderCurve :: ['Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'()] | undefined,
	lethalDose50 :: ['Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'()] | undefined,
	halfLifePeriod :: 'Duration'() | undefined}).

-type 'MedicationKnowledge.Kinetics'() :: #'MedicationKnowledge.Kinetics'{}.


-record('MedicationKnowledge.MaxDispense', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	quantity :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'(),
	period :: 'Duration'() | undefined}).

-type 'MedicationKnowledge.MaxDispense'() :: #'MedicationKnowledge.MaxDispense'{}.


-record('MedicationKnowledge.Schedule', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	schedule :: 'CodeableConcept'()}).

-type 'MedicationKnowledge.Schedule'() :: #'MedicationKnowledge.Schedule'{}.


-record('MedicationKnowledge.Substitution', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: 'CodeableConcept'(),
	allowed :: boolean()}).

-type 'MedicationKnowledge.Substitution'() :: #'MedicationKnowledge.Substitution'{}.


-record('MedicationKnowledge.Regulatory', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	regulatoryAuthority :: 'Reference'(),
	substitution :: ['MedicationKnowledge.Substitution'()] | undefined,
	schedule :: ['MedicationKnowledge.Schedule'()] | undefined,
	maxDispense :: 'MedicationKnowledge.MaxDispense'() | undefined}).

-type 'MedicationKnowledge.Regulatory'() :: #'MedicationKnowledge.Regulatory'{}.


-record('MedicationKnowledge.DrugCharacteristic', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: 'CodeableConcept'() | undefined,
	choice :: string() | 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | 'CodeableConcept'() | base64Binary() | undefined}).

-type 'MedicationKnowledge.DrugCharacteristic'() :: #'MedicationKnowledge.DrugCharacteristic'{}.


-record('MedicationKnowledge.Packaging', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: 'CodeableConcept'() | undefined,
	quantity :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined}).

-type 'MedicationKnowledge.Packaging'() :: #'MedicationKnowledge.Packaging'{}.


-record('MedicationKnowledge.MedicineClassification', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: 'CodeableConcept'(),
	classification :: ['CodeableConcept'()] | undefined}).

-type 'MedicationKnowledge.MedicineClassification'() :: #'MedicationKnowledge.MedicineClassification'{}.


-record('MedicationKnowledge.PatientCharacteristics', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	choice :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | 'CodeableConcept'(),
	value :: [string()] | undefined}).

-type 'MedicationKnowledge.PatientCharacteristics'() :: #'MedicationKnowledge.PatientCharacteristics'{}.


-record('MedicationKnowledge.Dosage', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: 'CodeableConcept'(),
	dosage :: ['Dosage'()]}).

-type 'MedicationKnowledge.Dosage'() :: #'MedicationKnowledge.Dosage'{}.


-record('MedicationKnowledge.AdministrationGuidelines', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	dosage :: ['MedicationKnowledge.Dosage'()] | undefined,
	choice :: 'Reference'() | 'CodeableConcept'() | undefined,
	patientCharacteristics :: ['MedicationKnowledge.PatientCharacteristics'()] | undefined}).

-type 'MedicationKnowledge.AdministrationGuidelines'() :: #'MedicationKnowledge.AdministrationGuidelines'{}.


-record('MedicationKnowledge.MonitoringProgram', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: 'CodeableConcept'() | undefined,
	name :: string() | undefined}).

-type 'MedicationKnowledge.MonitoringProgram'() :: #'MedicationKnowledge.MonitoringProgram'{}.


-record('MedicationKnowledge.Cost', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: 'CodeableConcept'(),
	source :: string() | undefined,
	cost :: 'Money'()}).

-type 'MedicationKnowledge.Cost'() :: #'MedicationKnowledge.Cost'{}.


-record('MedicationKnowledge.Ingredient', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	choice :: 'Reference'() | 'CodeableConcept'(),
	isActive :: boolean() | undefined,
	strength :: 'Ratio'() | undefined}).

-type 'MedicationKnowledge.Ingredient'() :: #'MedicationKnowledge.Ingredient'{}.


-record('MedicationKnowledge.Monograph', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: 'CodeableConcept'() | undefined,
	source :: 'Reference'() | undefined}).

-type 'MedicationKnowledge.Monograph'() :: #'MedicationKnowledge.Monograph'{}.


-record('MedicationKnowledge.RelatedMedicationKnowledge', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: 'CodeableConcept'(),
	reference :: ['Reference'()]}).

-type 'MedicationKnowledge.RelatedMedicationKnowledge'() :: #'MedicationKnowledge.RelatedMedicationKnowledge'{}.


-record('MedicationKnowledge', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	code :: 'CodeableConcept'() | undefined,
	status :: code() | undefined,
	manufacturer :: 'Reference'() | undefined,
	doseForm :: 'CodeableConcept'() | undefined,
	amount :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	synonym :: [string()] | undefined,
	relatedMedicationKnowledge :: ['MedicationKnowledge.RelatedMedicationKnowledge'()] | undefined,
	associatedMedication :: ['Reference'()] | undefined,
	productType :: ['CodeableConcept'()] | undefined,
	monograph :: ['MedicationKnowledge.Monograph'()] | undefined,
	ingredient :: ['MedicationKnowledge.Ingredient'()] | undefined,
	preparationInstruction :: markdown() | undefined,
	intendedRoute :: ['CodeableConcept'()] | undefined,
	cost :: ['MedicationKnowledge.Cost'()] | undefined,
	monitoringProgram :: ['MedicationKnowledge.MonitoringProgram'()] | undefined,
	administrationGuidelines :: ['MedicationKnowledge.AdministrationGuidelines'()] | undefined,
	medicineClassification :: ['MedicationKnowledge.MedicineClassification'()] | undefined,
	packaging :: 'MedicationKnowledge.Packaging'() | undefined,
	drugCharacteristic :: ['MedicationKnowledge.DrugCharacteristic'()] | undefined,
	contraindication :: ['Reference'()] | undefined,
	regulatory :: ['MedicationKnowledge.Regulatory'()] | undefined,
	kinetics :: ['MedicationKnowledge.Kinetics'()] | undefined}).

-type 'MedicationKnowledge'() :: #'MedicationKnowledge'{}.


-record('MedicationDispense.Substitution', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	wasSubstituted :: boolean(),
	type :: 'CodeableConcept'() | undefined,
	reason :: ['CodeableConcept'()] | undefined,
	responsibleParty :: ['Reference'()] | undefined}).

-type 'MedicationDispense.Substitution'() :: #'MedicationDispense.Substitution'{}.


-record('MedicationDispense.Performer', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	function :: 'CodeableConcept'() | undefined,
	actor :: 'Reference'()}).

-type 'MedicationDispense.Performer'() :: #'MedicationDispense.Performer'{}.


-record('MedicationDispense', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	partOf :: ['Reference'()] | undefined,
	status :: code(),
	choice :: 'Reference'() | 'CodeableConcept'() | undefined,
	category :: 'CodeableConcept'() | undefined,
	choice1 :: 'Reference'() | 'CodeableConcept'(),
	subject :: 'Reference'() | undefined,
	context :: 'Reference'() | undefined,
	supportingInformation :: ['Reference'()] | undefined,
	performer :: ['MedicationDispense.Performer'()] | undefined,
	location :: 'Reference'() | undefined,
	authorizingPrescription :: ['Reference'()] | undefined,
	type :: 'CodeableConcept'() | undefined,
	quantity :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	daysSupply :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	whenPrepared :: dateTime() | undefined,
	whenHandedOver :: dateTime() | undefined,
	destination :: 'Reference'() | undefined,
	receiver :: ['Reference'()] | undefined,
	note :: ['Annotation'()] | undefined,
	dosageInstruction :: ['Dosage'()] | undefined,
	substitution :: 'MedicationDispense.Substitution'() | undefined,
	detectedIssue :: ['Reference'()] | undefined,
	eventHistory :: ['Reference'()] | undefined}).

-type 'MedicationDispense'() :: #'MedicationDispense'{}.


-record('MedicationAdministration.Dosage', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	text :: string() | undefined,
	site :: 'CodeableConcept'() | undefined,
	route :: 'CodeableConcept'() | undefined,
	method :: 'CodeableConcept'() | undefined,
	dose :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	choice :: 'Ratio'() | 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined}).

-type 'MedicationAdministration.Dosage'() :: #'MedicationAdministration.Dosage'{}.


-record('MedicationAdministration.Performer', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	function :: 'CodeableConcept'() | undefined,
	actor :: 'Reference'()}).

-type 'MedicationAdministration.Performer'() :: #'MedicationAdministration.Performer'{}.


-record('MedicationAdministration', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	instantiates :: [uri()] | undefined,
	partOf :: ['Reference'()] | undefined,
	status :: code(),
	statusReason :: ['CodeableConcept'()] | undefined,
	category :: 'CodeableConcept'() | undefined,
	choice :: 'Reference'() | 'CodeableConcept'(),
	subject :: 'Reference'(),
	context :: 'Reference'() | undefined,
	supportingInformation :: ['Reference'()] | undefined,
	choice1 :: 'Period'() | dateTime(),
	performer :: ['MedicationAdministration.Performer'()] | undefined,
	reasonCode :: ['CodeableConcept'()] | undefined,
	reasonReference :: ['Reference'()] | undefined,
	request :: 'Reference'() | undefined,
	device :: ['Reference'()] | undefined,
	note :: ['Annotation'()] | undefined,
	dosage :: 'MedicationAdministration.Dosage'() | undefined,
	eventHistory :: ['Reference'()] | undefined}).

-type 'MedicationAdministration'() :: #'MedicationAdministration'{}.


-record('MedicationStatusCodes', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'MedicationStatusCodes'() :: #'MedicationStatusCodes'{}.


-record('Medication.Batch', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	lotNumber :: string() | undefined,
	expirationDate :: dateTime() | undefined}).

-type 'Medication.Batch'() :: #'Medication.Batch'{}.


-record('Medication.Ingredient', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	choice :: 'Reference'() | 'CodeableConcept'(),
	isActive :: boolean() | undefined,
	strength :: 'Ratio'() | undefined}).

-type 'Medication.Ingredient'() :: #'Medication.Ingredient'{}.


-record('Medication', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	code :: 'CodeableConcept'() | undefined,
	status :: 'MedicationStatusCodes'() | undefined,
	manufacturer :: 'Reference'() | undefined,
	form :: 'CodeableConcept'() | undefined,
	amount :: 'Ratio'() | undefined,
	ingredient :: ['Medication.Ingredient'()] | undefined,
	batch :: 'Medication.Batch'() | undefined}).

-type 'Medication'() :: #'Medication'{}.


-record('Media', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	basedOn :: ['Reference'()] | undefined,
	partOf :: ['Reference'()] | undefined,
	status :: 'EventStatus'(),
	type :: 'CodeableConcept'() | undefined,
	modality :: 'CodeableConcept'() | undefined,
	view :: 'CodeableConcept'() | undefined,
	subject :: 'Reference'() | undefined,
	encounter :: 'Reference'() | undefined,
	choice :: 'Period'() | dateTime() | undefined,
	issued :: instant() | undefined,
	operator :: 'Reference'() | undefined,
	reasonCode :: ['CodeableConcept'()] | undefined,
	bodySite :: 'CodeableConcept'() | undefined,
	deviceName :: string() | undefined,
	device :: 'Reference'() | undefined,
	height :: positiveInt() | undefined,
	width :: positiveInt() | undefined,
	frames :: positiveInt() | undefined,
	duration :: decimal() | undefined,
	content :: 'Attachment'(),
	note :: ['Annotation'()] | undefined}).

-type 'Media'() :: #'Media'{}.


-record('MeasureReportType', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'MeasureReportType'() :: #'MeasureReportType'{}.


-record('MeasureReportStatus', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'MeasureReportStatus'() :: #'MeasureReportStatus'{}.


-record('MeasureReport.Population1', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	code :: 'CodeableConcept'() | undefined,
	count :: integer() | undefined,
	subjectResults :: 'Reference'() | undefined}).

-type 'MeasureReport.Population1'() :: #'MeasureReport.Population1'{}.


-record('MeasureReport.Component', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	code :: 'CodeableConcept'(),
	value :: 'CodeableConcept'()}).

-type 'MeasureReport.Component'() :: #'MeasureReport.Component'{}.


-record('MeasureReport.Stratum', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	value :: 'CodeableConcept'() | undefined,
	component :: ['MeasureReport.Component'()] | undefined,
	population :: ['MeasureReport.Population1'()] | undefined,
	measureScore :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined}).

-type 'MeasureReport.Stratum'() :: #'MeasureReport.Stratum'{}.


-record('MeasureReport.Stratifier', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	code :: ['CodeableConcept'()] | undefined,
	stratum :: ['MeasureReport.Stratum'()] | undefined}).

-type 'MeasureReport.Stratifier'() :: #'MeasureReport.Stratifier'{}.


-record('MeasureReport.Population', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	code :: 'CodeableConcept'() | undefined,
	count :: integer() | undefined,
	subjectResults :: 'Reference'() | undefined}).

-type 'MeasureReport.Population'() :: #'MeasureReport.Population'{}.


-record('MeasureReport.Group', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	code :: 'CodeableConcept'() | undefined,
	population :: ['MeasureReport.Population'()] | undefined,
	measureScore :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	stratifier :: ['MeasureReport.Stratifier'()] | undefined}).

-type 'MeasureReport.Group'() :: #'MeasureReport.Group'{}.


-record('MeasureReport', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	status :: 'MeasureReportStatus'(),
	type :: 'MeasureReportType'(),
	measure :: canonical(),
	subject :: 'Reference'() | undefined,
	date :: dateTime() | undefined,
	reporter :: 'Reference'() | undefined,
	period :: 'Period'(),
	improvementNotation :: 'CodeableConcept'() | undefined,
	group :: ['MeasureReport.Group'()] | undefined,
	evaluatedResource :: ['Reference'()] | undefined}).

-type 'MeasureReport'() :: #'MeasureReport'{}.


-record('Measure.SupplementalData', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	code :: 'CodeableConcept'() | undefined,
	usage :: ['CodeableConcept'()] | undefined,
	description :: string() | undefined,
	criteria :: 'Expression'()}).

-type 'Measure.SupplementalData'() :: #'Measure.SupplementalData'{}.


-record('Measure.Component', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	code :: 'CodeableConcept'() | undefined,
	description :: string() | undefined,
	criteria :: 'Expression'()}).

-type 'Measure.Component'() :: #'Measure.Component'{}.


-record('Measure.Stratifier', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	code :: 'CodeableConcept'() | undefined,
	description :: string() | undefined,
	criteria :: 'Expression'() | undefined,
	component :: ['Measure.Component'()] | undefined}).

-type 'Measure.Stratifier'() :: #'Measure.Stratifier'{}.


-record('Measure.Population', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	code :: 'CodeableConcept'() | undefined,
	description :: string() | undefined,
	criteria :: 'Expression'()}).

-type 'Measure.Population'() :: #'Measure.Population'{}.


-record('Measure.Group', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	code :: 'CodeableConcept'() | undefined,
	description :: string() | undefined,
	population :: ['Measure.Population'()] | undefined,
	stratifier :: ['Measure.Stratifier'()] | undefined}).

-type 'Measure.Group'() :: #'Measure.Group'{}.


-record('Measure', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	url :: uri() | undefined,
	identifier :: ['Identifier'()] | undefined,
	version :: string() | undefined,
	name :: string() | undefined,
	title :: string() | undefined,
	subtitle :: string() | undefined,
	status :: 'PublicationStatus'(),
	experimental :: boolean() | undefined,
	choice :: 'Reference'() | 'CodeableConcept'() | undefined,
	date :: dateTime() | undefined,
	publisher :: string() | undefined,
	contact :: ['ContactDetail'()] | undefined,
	description :: markdown() | undefined,
	useContext :: ['UsageContext'()] | undefined,
	jurisdiction :: ['CodeableConcept'()] | undefined,
	purpose :: markdown() | undefined,
	usage :: string() | undefined,
	copyright :: markdown() | undefined,
	approvalDate :: date() | undefined,
	lastReviewDate :: date() | undefined,
	effectivePeriod :: 'Period'() | undefined,
	topic :: ['CodeableConcept'()] | undefined,
	author :: ['ContactDetail'()] | undefined,
	editor :: ['ContactDetail'()] | undefined,
	reviewer :: ['ContactDetail'()] | undefined,
	endorser :: ['ContactDetail'()] | undefined,
	relatedArtifact :: ['RelatedArtifact'()] | undefined,
	library :: [canonical()] | undefined,
	disclaimer :: markdown() | undefined,
	scoring :: 'CodeableConcept'() | undefined,
	compositeScoring :: 'CodeableConcept'() | undefined,
	type :: ['CodeableConcept'()] | undefined,
	riskAdjustment :: string() | undefined,
	rateAggregation :: string() | undefined,
	rationale :: markdown() | undefined,
	clinicalRecommendationStatement :: markdown() | undefined,
	improvementNotation :: 'CodeableConcept'() | undefined,
	definition :: [markdown()] | undefined,
	guidance :: markdown() | undefined,
	group :: ['Measure.Group'()] | undefined,
	supplementalData :: ['Measure.SupplementalData'()] | undefined}).

-type 'Measure'() :: #'Measure'{}.


-record('LocationStatus', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'LocationStatus'() :: #'LocationStatus'{}.


-record('LocationMode', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'LocationMode'() :: #'LocationMode'{}.


-record('Location.HoursOfOperation', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	daysOfWeek :: ['DaysOfWeek'()] | undefined,
	allDay :: boolean() | undefined,
	openingTime :: time() | undefined,
	closingTime :: time() | undefined}).

-type 'Location.HoursOfOperation'() :: #'Location.HoursOfOperation'{}.


-record('Location.Position', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	longitude :: decimal(),
	latitude :: decimal(),
	altitude :: decimal() | undefined}).

-type 'Location.Position'() :: #'Location.Position'{}.


-record('Location', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	status :: 'LocationStatus'() | undefined,
	operationalStatus :: 'Coding'() | undefined,
	name :: string() | undefined,
	alias :: [string()] | undefined,
	description :: string() | undefined,
	mode :: 'LocationMode'() | undefined,
	type :: ['CodeableConcept'()] | undefined,
	telecom :: ['ContactPoint'()] | undefined,
	address :: 'Address'() | undefined,
	physicalType :: 'CodeableConcept'() | undefined,
	position :: 'Location.Position'() | undefined,
	managingOrganization :: 'Reference'() | undefined,
	partOf :: 'Reference'() | undefined,
	hoursOfOperation :: ['Location.HoursOfOperation'()] | undefined,
	availabilityExceptions :: string() | undefined,
	endpoint :: ['Reference'()] | undefined}).

-type 'Location'() :: #'Location'{}.


-record('ListStatus', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'ListStatus'() :: #'ListStatus'{}.


-record('List.Entry', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	flag :: 'CodeableConcept'() | undefined,
	deleted :: boolean() | undefined,
	date :: dateTime() | undefined,
	item :: 'Reference'()}).

-type 'List.Entry'() :: #'List.Entry'{}.


-record('List', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	status :: 'ListStatus'(),
	mode :: 'ListMode'(),
	title :: string() | undefined,
	code :: 'CodeableConcept'() | undefined,
	subject :: 'Reference'() | undefined,
	encounter :: 'Reference'() | undefined,
	date :: dateTime() | undefined,
	source :: 'Reference'() | undefined,
	orderedBy :: 'CodeableConcept'() | undefined,
	note :: ['Annotation'()] | undefined,
	entry :: ['List.Entry'()] | undefined,
	emptyReason :: 'CodeableConcept'() | undefined}).

-type 'List'() :: #'List'{}.


-record('LinkageType', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'LinkageType'() :: #'LinkageType'{}.


-record('Linkage.Item', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: 'LinkageType'(),
	resource :: 'Reference'()}).

-type 'Linkage.Item'() :: #'Linkage.Item'{}.


-record('Linkage', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	active :: boolean() | undefined,
	author :: 'Reference'() | undefined,
	item :: ['Linkage.Item'()]}).

-type 'Linkage'() :: #'Linkage'{}.


-record('Library', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	url :: uri() | undefined,
	identifier :: ['Identifier'()] | undefined,
	version :: string() | undefined,
	name :: string() | undefined,
	title :: string() | undefined,
	subtitle :: string() | undefined,
	status :: 'PublicationStatus'(),
	experimental :: boolean() | undefined,
	type :: 'CodeableConcept'(),
	choice :: 'Reference'() | 'CodeableConcept'() | undefined,
	date :: dateTime() | undefined,
	publisher :: string() | undefined,
	contact :: ['ContactDetail'()] | undefined,
	description :: markdown() | undefined,
	useContext :: ['UsageContext'()] | undefined,
	jurisdiction :: ['CodeableConcept'()] | undefined,
	purpose :: markdown() | undefined,
	usage :: string() | undefined,
	copyright :: markdown() | undefined,
	approvalDate :: date() | undefined,
	lastReviewDate :: date() | undefined,
	effectivePeriod :: 'Period'() | undefined,
	topic :: ['CodeableConcept'()] | undefined,
	author :: ['ContactDetail'()] | undefined,
	editor :: ['ContactDetail'()] | undefined,
	reviewer :: ['ContactDetail'()] | undefined,
	endorser :: ['ContactDetail'()] | undefined,
	relatedArtifact :: ['RelatedArtifact'()] | undefined,
	parameter :: ['ParameterDefinition'()] | undefined,
	dataRequirement :: ['DataRequirement'()] | undefined,
	content :: ['Attachment'()] | undefined}).

-type 'Library'() :: #'Library'{}.


-record('InvoiceStatus', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'InvoiceStatus'() :: #'InvoiceStatus'{}.


-record('Invoice.PriceComponent', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: 'InvoicePriceComponentType'(),
	code :: 'CodeableConcept'() | undefined,
	factor :: decimal() | undefined,
	amount :: 'Money'() | undefined}).

-type 'Invoice.PriceComponent'() :: #'Invoice.PriceComponent'{}.


-record('Invoice.LineItem', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	sequence :: positiveInt() | undefined,
	choice :: 'Reference'() | 'CodeableConcept'(),
	priceComponent :: ['Invoice.PriceComponent'()] | undefined}).

-type 'Invoice.LineItem'() :: #'Invoice.LineItem'{}.


-record('Invoice.Participant', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	role :: 'CodeableConcept'() | undefined,
	actor :: 'Reference'()}).

-type 'Invoice.Participant'() :: #'Invoice.Participant'{}.


-record('Invoice', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	status :: 'InvoiceStatus'(),
	cancelledReason :: string() | undefined,
	type :: 'CodeableConcept'() | undefined,
	subject :: 'Reference'() | undefined,
	recipient :: 'Reference'() | undefined,
	date :: dateTime() | undefined,
	participant :: ['Invoice.Participant'()] | undefined,
	issuer :: 'Reference'() | undefined,
	account :: 'Reference'() | undefined,
	lineItem :: ['Invoice.LineItem'()] | undefined,
	totalPriceComponent :: ['Invoice.PriceComponent'()] | undefined,
	totalNet :: 'Money'() | undefined,
	totalGross :: 'Money'() | undefined,
	paymentTerms :: markdown() | undefined,
	note :: ['Annotation'()] | undefined}).

-type 'Invoice'() :: #'Invoice'{}.


-record('InsurancePlan.Cost', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: 'CodeableConcept'(),
	applicability :: 'CodeableConcept'() | undefined,
	qualifiers :: ['CodeableConcept'()] | undefined,
	value :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined}).

-type 'InsurancePlan.Cost'() :: #'InsurancePlan.Cost'{}.


-record('InsurancePlan.Benefit1', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: 'CodeableConcept'(),
	cost :: ['InsurancePlan.Cost'()] | undefined}).

-type 'InsurancePlan.Benefit1'() :: #'InsurancePlan.Benefit1'{}.


-record('InsurancePlan.SpecificCost', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	category :: 'CodeableConcept'(),
	benefit :: ['InsurancePlan.Benefit1'()] | undefined}).

-type 'InsurancePlan.SpecificCost'() :: #'InsurancePlan.SpecificCost'{}.


-record('InsurancePlan.GeneralCost', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: 'CodeableConcept'() | undefined,
	groupSize :: positiveInt() | undefined,
	cost :: 'Money'() | undefined,
	comment :: string() | undefined}).

-type 'InsurancePlan.GeneralCost'() :: #'InsurancePlan.GeneralCost'{}.


-record('InsurancePlan.Plan', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	type :: 'CodeableConcept'() | undefined,
	coverageArea :: ['Reference'()] | undefined,
	network :: ['Reference'()] | undefined,
	generalCost :: ['InsurancePlan.GeneralCost'()] | undefined,
	specificCost :: ['InsurancePlan.SpecificCost'()] | undefined}).

-type 'InsurancePlan.Plan'() :: #'InsurancePlan.Plan'{}.


-record('InsurancePlan.Limit', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	value :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	code :: 'CodeableConcept'() | undefined}).

-type 'InsurancePlan.Limit'() :: #'InsurancePlan.Limit'{}.


-record('InsurancePlan.Benefit', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: 'CodeableConcept'(),
	requirement :: string() | undefined,
	limit :: ['InsurancePlan.Limit'()] | undefined}).

-type 'InsurancePlan.Benefit'() :: #'InsurancePlan.Benefit'{}.


-record('InsurancePlan.Coverage', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: 'CodeableConcept'(),
	network :: ['Reference'()] | undefined,
	benefit :: ['InsurancePlan.Benefit'()]}).

-type 'InsurancePlan.Coverage'() :: #'InsurancePlan.Coverage'{}.


-record('InsurancePlan.Contact', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	purpose :: 'CodeableConcept'() | undefined,
	name :: 'HumanName'() | undefined,
	telecom :: ['ContactPoint'()] | undefined,
	address :: 'Address'() | undefined}).

-type 'InsurancePlan.Contact'() :: #'InsurancePlan.Contact'{}.


-record('InsurancePlan', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	status :: 'PublicationStatus'() | undefined,
	type :: ['CodeableConcept'()] | undefined,
	name :: string() | undefined,
	alias :: [string()] | undefined,
	period :: 'Period'() | undefined,
	ownedBy :: 'Reference'() | undefined,
	administeredBy :: 'Reference'() | undefined,
	coverageArea :: ['Reference'()] | undefined,
	contact :: ['InsurancePlan.Contact'()] | undefined,
	endpoint :: ['Reference'()] | undefined,
	network :: ['Reference'()] | undefined,
	coverage :: ['InsurancePlan.Coverage'()] | undefined,
	plan :: ['InsurancePlan.Plan'()] | undefined}).

-type 'InsurancePlan'() :: #'InsurancePlan'{}.


-record('GuidePageGeneration', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'GuidePageGeneration'() :: #'GuidePageGeneration'{}.


-record('SPDXLicense', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'SPDXLicense'() :: #'SPDXLicense'{}.


-record('GuideParameterCode', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'GuideParameterCode'() :: #'GuideParameterCode'{}.


-record('ImplementationGuide.Page1', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	name :: string(),
	title :: string() | undefined,
	anchor :: [string()] | undefined}).

-type 'ImplementationGuide.Page1'() :: #'ImplementationGuide.Page1'{}.


-record('ImplementationGuide.Resource1', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	reference :: 'Reference'(),
	choice :: canonical() | boolean() | undefined,
	relativePath :: url() | undefined}).

-type 'ImplementationGuide.Resource1'() :: #'ImplementationGuide.Resource1'{}.


-record('ImplementationGuide.Manifest', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	rendering :: url() | undefined,
	resource :: ['ImplementationGuide.Resource1'()],
	page :: ['ImplementationGuide.Page1'()] | undefined,
	image :: [string()] | undefined,
	other :: [string()] | undefined}).

-type 'ImplementationGuide.Manifest'() :: #'ImplementationGuide.Manifest'{}.


-record('ImplementationGuide.Template', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	code :: code(),
	source :: string(),
	scope :: string() | undefined}).

-type 'ImplementationGuide.Template'() :: #'ImplementationGuide.Template'{}.


-record('ImplementationGuide.Parameter', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	code :: 'GuideParameterCode'(),
	value :: string()}).

-type 'ImplementationGuide.Parameter'() :: #'ImplementationGuide.Parameter'{}.


-record('ImplementationGuide.Page', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	choice :: url() | 'Reference'(),
	title :: string(),
	generation :: 'GuidePageGeneration'(),
	page :: ['ImplementationGuide.Page'()] | undefined}).

-type 'ImplementationGuide.Page'() :: #'ImplementationGuide.Page'{}.


-record('ImplementationGuide.Resource', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	reference :: 'Reference'(),
	fhirVersion :: ['FHIRVersion'()] | undefined,
	name :: string() | undefined,
	description :: string() | undefined,
	choice :: canonical() | boolean() | undefined,
	groupingId :: id() | undefined}).

-type 'ImplementationGuide.Resource'() :: #'ImplementationGuide.Resource'{}.


-record('ImplementationGuide.Grouping', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	name :: string(),
	description :: string() | undefined}).

-type 'ImplementationGuide.Grouping'() :: #'ImplementationGuide.Grouping'{}.


-record('ImplementationGuide.Definition', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	grouping :: ['ImplementationGuide.Grouping'()] | undefined,
	resource :: ['ImplementationGuide.Resource'()],
	page :: 'ImplementationGuide.Page'() | undefined,
	parameter :: ['ImplementationGuide.Parameter'()] | undefined,
	template :: ['ImplementationGuide.Template'()] | undefined}).

-type 'ImplementationGuide.Definition'() :: #'ImplementationGuide.Definition'{}.


-record('ImplementationGuide.Global', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: code(),
	profile :: canonical()}).

-type 'ImplementationGuide.Global'() :: #'ImplementationGuide.Global'{}.


-record('ImplementationGuide.DependsOn', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	uri :: canonical(),
	packageId :: id() | undefined,
	version :: string() | undefined}).

-type 'ImplementationGuide.DependsOn'() :: #'ImplementationGuide.DependsOn'{}.


-record('ImplementationGuide', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	url :: uri(),
	version :: string() | undefined,
	name :: string(),
	title :: string() | undefined,
	status :: 'PublicationStatus'(),
	experimental :: boolean() | undefined,
	date :: dateTime() | undefined,
	publisher :: string() | undefined,
	contact :: ['ContactDetail'()] | undefined,
	description :: markdown() | undefined,
	useContext :: ['UsageContext'()] | undefined,
	jurisdiction :: ['CodeableConcept'()] | undefined,
	copyright :: markdown() | undefined,
	packageId :: id(),
	license :: 'SPDXLicense'() | undefined,
	fhirVersion :: ['FHIRVersion'()],
	dependsOn :: ['ImplementationGuide.DependsOn'()] | undefined,
	global :: ['ImplementationGuide.Global'()] | undefined,
	definition :: 'ImplementationGuide.Definition'() | undefined,
	manifest :: 'ImplementationGuide.Manifest'() | undefined}).

-type 'ImplementationGuide'() :: #'ImplementationGuide'{}.


-record('ImmunizationRecommendation.DateCriterion', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	code :: 'CodeableConcept'(),
	value :: dateTime()}).

-type 'ImmunizationRecommendation.DateCriterion'() :: #'ImmunizationRecommendation.DateCriterion'{}.


-record('ImmunizationRecommendation.Recommendation', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	vaccineCode :: ['CodeableConcept'()] | undefined,
	targetDisease :: 'CodeableConcept'() | undefined,
	contraindicatedVaccineCode :: ['CodeableConcept'()] | undefined,
	forecastStatus :: 'CodeableConcept'(),
	forecastReason :: ['CodeableConcept'()] | undefined,
	dateCriterion :: ['ImmunizationRecommendation.DateCriterion'()] | undefined,
	description :: string() | undefined,
	series :: string() | undefined,
	choice :: string() | positiveInt() | undefined,
	choice1 :: string() | positiveInt() | undefined,
	supportingImmunization :: ['Reference'()] | undefined,
	supportingPatientInformation :: ['Reference'()] | undefined}).

-type 'ImmunizationRecommendation.Recommendation'() :: #'ImmunizationRecommendation.Recommendation'{}.


-record('ImmunizationRecommendation', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	patient :: 'Reference'(),
	date :: dateTime(),
	authority :: 'Reference'() | undefined,
	recommendation :: ['ImmunizationRecommendation.Recommendation'()]}).

-type 'ImmunizationRecommendation'() :: #'ImmunizationRecommendation'{}.


-record('ImmunizationEvaluationStatusCodes', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'ImmunizationEvaluationStatusCodes'() :: #'ImmunizationEvaluationStatusCodes'{}.


-record('ImmunizationEvaluation', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	status :: 'ImmunizationEvaluationStatusCodes'(),
	patient :: 'Reference'(),
	date :: dateTime() | undefined,
	authority :: 'Reference'() | undefined,
	targetDisease :: 'CodeableConcept'(),
	immunizationEvent :: 'Reference'(),
	doseStatus :: 'CodeableConcept'(),
	doseStatusReason :: ['CodeableConcept'()] | undefined,
	description :: string() | undefined,
	series :: string() | undefined,
	choice :: string() | positiveInt() | undefined,
	choice1 :: string() | positiveInt() | undefined}).

-type 'ImmunizationEvaluation'() :: #'ImmunizationEvaluation'{}.


-record('ImmunizationStatusCodes', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'ImmunizationStatusCodes'() :: #'ImmunizationStatusCodes'{}.


-record('Immunization.ProtocolApplied', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	series :: string() | undefined,
	authority :: 'Reference'() | undefined,
	targetDisease :: ['CodeableConcept'()] | undefined,
	choice :: string() | positiveInt(),
	choice1 :: string() | positiveInt() | undefined}).

-type 'Immunization.ProtocolApplied'() :: #'Immunization.ProtocolApplied'{}.


-record('Immunization.Reaction', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	date :: dateTime() | undefined,
	detail :: 'Reference'() | undefined,
	reported :: boolean() | undefined}).

-type 'Immunization.Reaction'() :: #'Immunization.Reaction'{}.


-record('Immunization.Education', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	documentType :: string() | undefined,
	reference :: uri() | undefined,
	publicationDate :: dateTime() | undefined,
	presentationDate :: dateTime() | undefined}).

-type 'Immunization.Education'() :: #'Immunization.Education'{}.


-record('Immunization.Performer', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	function :: 'CodeableConcept'() | undefined,
	actor :: 'Reference'()}).

-type 'Immunization.Performer'() :: #'Immunization.Performer'{}.


-record('Immunization', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	status :: 'ImmunizationStatusCodes'(),
	statusReason :: 'CodeableConcept'() | undefined,
	vaccineCode :: 'CodeableConcept'(),
	patient :: 'Reference'(),
	encounter :: 'Reference'() | undefined,
	choice :: string() | dateTime(),
	recorded :: dateTime() | undefined,
	primarySource :: boolean() | undefined,
	reportOrigin :: 'CodeableConcept'() | undefined,
	location :: 'Reference'() | undefined,
	manufacturer :: 'Reference'() | undefined,
	lotNumber :: string() | undefined,
	expirationDate :: date() | undefined,
	site :: 'CodeableConcept'() | undefined,
	route :: 'CodeableConcept'() | undefined,
	doseQuantity :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	performer :: ['Immunization.Performer'()] | undefined,
	note :: ['Annotation'()] | undefined,
	reasonCode :: ['CodeableConcept'()] | undefined,
	reasonReference :: ['Reference'()] | undefined,
	isSubpotent :: boolean() | undefined,
	subpotentReason :: ['CodeableConcept'()] | undefined,
	education :: ['Immunization.Education'()] | undefined,
	programEligibility :: ['CodeableConcept'()] | undefined,
	fundingSource :: 'CodeableConcept'() | undefined,
	reaction :: ['Immunization.Reaction'()] | undefined,
	protocolApplied :: ['Immunization.ProtocolApplied'()] | undefined}).

-type 'Immunization'() :: #'Immunization'{}.


-record('ImagingStudyStatus', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'ImagingStudyStatus'() :: #'ImagingStudyStatus'{}.


-record('ImagingStudy.Instance', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	uid :: id(),
	sopClass :: 'Coding'(),
	number :: unsignedInt() | undefined,
	title :: string() | undefined}).

-type 'ImagingStudy.Instance'() :: #'ImagingStudy.Instance'{}.


-record('ImagingStudy.Performer', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	function :: 'CodeableConcept'() | undefined,
	actor :: 'Reference'()}).

-type 'ImagingStudy.Performer'() :: #'ImagingStudy.Performer'{}.


-record('ImagingStudy.Series', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	uid :: id(),
	number :: unsignedInt() | undefined,
	modality :: 'Coding'(),
	description :: string() | undefined,
	numberOfInstances :: unsignedInt() | undefined,
	endpoint :: ['Reference'()] | undefined,
	bodySite :: 'Coding'() | undefined,
	laterality :: 'Coding'() | undefined,
	specimen :: ['Reference'()] | undefined,
	started :: dateTime() | undefined,
	performer :: ['ImagingStudy.Performer'()] | undefined,
	instance :: ['ImagingStudy.Instance'()] | undefined}).

-type 'ImagingStudy.Series'() :: #'ImagingStudy.Series'{}.


-record('ImagingStudy', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	status :: 'ImagingStudyStatus'(),
	modality :: ['Coding'()] | undefined,
	subject :: 'Reference'(),
	encounter :: 'Reference'() | undefined,
	started :: dateTime() | undefined,
	basedOn :: ['Reference'()] | undefined,
	referrer :: 'Reference'() | undefined,
	interpreter :: ['Reference'()] | undefined,
	endpoint :: ['Reference'()] | undefined,
	numberOfSeries :: unsignedInt() | undefined,
	numberOfInstances :: unsignedInt() | undefined,
	procedureReference :: 'Reference'() | undefined,
	procedureCode :: ['CodeableConcept'()] | undefined,
	location :: 'Reference'() | undefined,
	reasonCode :: ['CodeableConcept'()] | undefined,
	reasonReference :: ['Reference'()] | undefined,
	note :: ['Annotation'()] | undefined,
	description :: string() | undefined,
	series :: ['ImagingStudy.Series'()] | undefined}).

-type 'ImagingStudy'() :: #'ImagingStudy'{}.


-record('DaysOfWeek', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'DaysOfWeek'() :: #'DaysOfWeek'{}.


-record('HealthcareService.NotAvailable', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	description :: string(),
	during :: 'Period'() | undefined}).

-type 'HealthcareService.NotAvailable'() :: #'HealthcareService.NotAvailable'{}.


-record('HealthcareService.AvailableTime', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	daysOfWeek :: ['DaysOfWeek'()] | undefined,
	allDay :: boolean() | undefined,
	availableStartTime :: time() | undefined,
	availableEndTime :: time() | undefined}).

-type 'HealthcareService.AvailableTime'() :: #'HealthcareService.AvailableTime'{}.


-record('HealthcareService.Eligibility', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	code :: 'CodeableConcept'() | undefined,
	comment :: markdown() | undefined}).

-type 'HealthcareService.Eligibility'() :: #'HealthcareService.Eligibility'{}.


-record('HealthcareService', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	active :: boolean() | undefined,
	providedBy :: 'Reference'() | undefined,
	category :: ['CodeableConcept'()] | undefined,
	type :: ['CodeableConcept'()] | undefined,
	specialty :: ['CodeableConcept'()] | undefined,
	location :: ['Reference'()] | undefined,
	name :: string() | undefined,
	comment :: string() | undefined,
	extraDetails :: markdown() | undefined,
	photo :: 'Attachment'() | undefined,
	telecom :: ['ContactPoint'()] | undefined,
	coverageArea :: ['Reference'()] | undefined,
	serviceProvisionCode :: ['CodeableConcept'()] | undefined,
	eligibility :: ['HealthcareService.Eligibility'()] | undefined,
	program :: ['CodeableConcept'()] | undefined,
	characteristic :: ['CodeableConcept'()] | undefined,
	communication :: ['CodeableConcept'()] | undefined,
	referralMethod :: ['CodeableConcept'()] | undefined,
	appointmentRequired :: boolean() | undefined,
	availableTime :: ['HealthcareService.AvailableTime'()] | undefined,
	notAvailable :: ['HealthcareService.NotAvailable'()] | undefined,
	availabilityExceptions :: string() | undefined,
	endpoint :: ['Reference'()] | undefined}).

-type 'HealthcareService'() :: #'HealthcareService'{}.


-record('GuidanceResponseStatus', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'GuidanceResponseStatus'() :: #'GuidanceResponseStatus'{}.


-record('GuidanceResponse', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	requestIdentifier :: 'Identifier'() | undefined,
	identifier :: ['Identifier'()] | undefined,
	choice :: uri() | 'CodeableConcept'() | canonical(),
	status :: 'GuidanceResponseStatus'(),
	subject :: 'Reference'() | undefined,
	encounter :: 'Reference'() | undefined,
	occurrenceDateTime :: dateTime() | undefined,
	performer :: 'Reference'() | undefined,
	reasonCode :: ['CodeableConcept'()] | undefined,
	reasonReference :: ['Reference'()] | undefined,
	note :: ['Annotation'()] | undefined,
	evaluationMessage :: ['Reference'()] | undefined,
	outputParameters :: 'Reference'() | undefined,
	result :: 'Reference'() | undefined,
	dataRequirement :: ['DataRequirement'()] | undefined}).

-type 'GuidanceResponse'() :: #'GuidanceResponse'{}.


-record('GroupType', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'GroupType'() :: #'GroupType'{}.


-record('Group.Member', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	entity :: 'Reference'(),
	period :: 'Period'() | undefined,
	inactive :: boolean() | undefined}).

-type 'Group.Member'() :: #'Group.Member'{}.


-record('Group.Characteristic', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	code :: 'CodeableConcept'(),
	choice :: 'Reference'() | 'Range'() | 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | 'CodeableConcept'() | boolean(),
	exclude :: boolean(),
	period :: 'Period'() | undefined}).

-type 'Group.Characteristic'() :: #'Group.Characteristic'{}.


-record('Group', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	active :: boolean() | undefined,
	type :: 'GroupType'(),
	actual :: boolean(),
	code :: 'CodeableConcept'() | undefined,
	name :: string() | undefined,
	quantity :: unsignedInt() | undefined,
	managingEntity :: 'Reference'() | undefined,
	characteristic :: ['Group.Characteristic'()] | undefined,
	member :: ['Group.Member'()] | undefined}).

-type 'Group'() :: #'Group'{}.


-record('GraphCompartmentRule', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'GraphCompartmentRule'() :: #'GraphCompartmentRule'{}.


-record('GraphCompartmentUse', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'GraphCompartmentUse'() :: #'GraphCompartmentUse'{}.


-record('GraphDefinition.Compartment', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	use :: 'GraphCompartmentUse'(),
	code :: 'CompartmentType'(),
	rule :: 'GraphCompartmentRule'(),
	expression :: string() | undefined,
	description :: string() | undefined}).

-type 'GraphDefinition.Compartment'() :: #'GraphDefinition.Compartment'{}.


-record('GraphDefinition.Target', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: code(),
	params :: string() | undefined,
	profile :: canonical() | undefined,
	compartment :: ['GraphDefinition.Compartment'()] | undefined,
	link :: ['GraphDefinition.Link'()] | undefined}).

-type 'GraphDefinition.Target'() :: #'GraphDefinition.Target'{}.


-record('GraphDefinition.Link', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	path :: string() | undefined,
	sliceName :: string() | undefined,
	min :: integer() | undefined,
	max :: string() | undefined,
	description :: string() | undefined,
	target :: ['GraphDefinition.Target'()] | undefined}).

-type 'GraphDefinition.Link'() :: #'GraphDefinition.Link'{}.


-record('GraphDefinition', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	url :: uri() | undefined,
	version :: string() | undefined,
	name :: string(),
	status :: 'PublicationStatus'(),
	experimental :: boolean() | undefined,
	date :: dateTime() | undefined,
	publisher :: string() | undefined,
	contact :: ['ContactDetail'()] | undefined,
	description :: markdown() | undefined,
	useContext :: ['UsageContext'()] | undefined,
	jurisdiction :: ['CodeableConcept'()] | undefined,
	purpose :: markdown() | undefined,
	start :: code(),
	profile :: canonical() | undefined,
	link :: ['GraphDefinition.Link'()] | undefined}).

-type 'GraphDefinition'() :: #'GraphDefinition'{}.


-record('GoalLifecycleStatus', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'GoalLifecycleStatus'() :: #'GoalLifecycleStatus'{}.


-record('Goal.Target', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	measure :: 'CodeableConcept'() | undefined,
	choice :: string() | 'Ratio'() | 'Range'() | 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | integer() | 'CodeableConcept'() | boolean() | undefined,
	choice1 :: 'Duration'() | date() | undefined}).

-type 'Goal.Target'() :: #'Goal.Target'{}.


-record('Goal', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	lifecycleStatus :: 'GoalLifecycleStatus'(),
	achievementStatus :: 'CodeableConcept'() | undefined,
	category :: ['CodeableConcept'()] | undefined,
	priority :: 'CodeableConcept'() | undefined,
	description :: 'CodeableConcept'(),
	subject :: 'Reference'(),
	choice :: date() | 'CodeableConcept'() | undefined,
	target :: ['Goal.Target'()] | undefined,
	statusDate :: date() | undefined,
	statusReason :: string() | undefined,
	expressedBy :: 'Reference'() | undefined,
	addresses :: ['Reference'()] | undefined,
	note :: ['Annotation'()] | undefined,
	outcomeCode :: ['CodeableConcept'()] | undefined,
	outcomeReference :: ['Reference'()] | undefined}).

-type 'Goal'() :: #'Goal'{}.


-record('FlagStatus', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'FlagStatus'() :: #'FlagStatus'{}.


-record('Flag', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	status :: 'FlagStatus'(),
	category :: ['CodeableConcept'()] | undefined,
	code :: 'CodeableConcept'(),
	subject :: 'Reference'(),
	period :: 'Period'() | undefined,
	encounter :: 'Reference'() | undefined,
	author :: 'Reference'() | undefined}).

-type 'Flag'() :: #'Flag'{}.


-record('FamilyHistoryStatus', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'FamilyHistoryStatus'() :: #'FamilyHistoryStatus'{}.


-record('FamilyMemberHistory.Condition', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	code :: 'CodeableConcept'(),
	outcome :: 'CodeableConcept'() | undefined,
	contributedToDeath :: boolean() | undefined,
	choice :: string() | 'Range'() | 'Period'() | 'Age'() | undefined,
	note :: ['Annotation'()] | undefined}).

-type 'FamilyMemberHistory.Condition'() :: #'FamilyMemberHistory.Condition'{}.


-record('FamilyMemberHistory', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	instantiatesCanonical :: [canonical()] | undefined,
	instantiatesUri :: [uri()] | undefined,
	status :: 'FamilyHistoryStatus'(),
	dataAbsentReason :: 'CodeableConcept'() | undefined,
	patient :: 'Reference'(),
	date :: dateTime() | undefined,
	name :: string() | undefined,
	relationship :: 'CodeableConcept'(),
	sex :: 'CodeableConcept'() | undefined,
	choice :: string() | 'Period'() | date() | undefined,
	choice1 :: string() | 'Range'() | 'Age'() | undefined,
	estimatedAge :: boolean() | undefined,
	choice2 :: string() | 'Range'() | date() | boolean() | 'Age'() | undefined,
	reasonCode :: ['CodeableConcept'()] | undefined,
	reasonReference :: ['Reference'()] | undefined,
	note :: ['Annotation'()] | undefined,
	condition :: ['FamilyMemberHistory.Condition'()] | undefined}).

-type 'FamilyMemberHistory'() :: #'FamilyMemberHistory'{}.


-record('ExplanationOfBenefitStatus', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'ExplanationOfBenefitStatus'() :: #'ExplanationOfBenefitStatus'{}.


-record('ExplanationOfBenefit.Financial', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: 'CodeableConcept'(),
	choice :: unsignedInt() | string() | 'Money'() | undefined,
	choice1 :: unsignedInt() | 'Money'() | undefined}).

-type 'ExplanationOfBenefit.Financial'() :: #'ExplanationOfBenefit.Financial'{}.


-record('ExplanationOfBenefit.BenefitBalance', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	category :: 'CodeableConcept'(),
	excluded :: boolean() | undefined,
	name :: string() | undefined,
	description :: string() | undefined,
	network :: 'CodeableConcept'() | undefined,
	unit :: 'CodeableConcept'() | undefined,
	term :: 'CodeableConcept'() | undefined,
	financial :: ['ExplanationOfBenefit.Financial'()] | undefined}).

-type 'ExplanationOfBenefit.BenefitBalance'() :: #'ExplanationOfBenefit.BenefitBalance'{}.


-record('ExplanationOfBenefit.ProcessNote', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	number :: positiveInt() | undefined,
	type :: 'NoteType'() | undefined,
	text :: string() | undefined,
	language :: 'CodeableConcept'() | undefined}).

-type 'ExplanationOfBenefit.ProcessNote'() :: #'ExplanationOfBenefit.ProcessNote'{}.


-record('ExplanationOfBenefit.Payment', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: 'CodeableConcept'() | undefined,
	adjustment :: 'Money'() | undefined,
	adjustmentReason :: 'CodeableConcept'() | undefined,
	date :: date() | undefined,
	amount :: 'Money'() | undefined,
	identifier :: 'Identifier'() | undefined}).

-type 'ExplanationOfBenefit.Payment'() :: #'ExplanationOfBenefit.Payment'{}.


-record('ExplanationOfBenefit.Total', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	category :: 'CodeableConcept'(),
	amount :: 'Money'()}).

-type 'ExplanationOfBenefit.Total'() :: #'ExplanationOfBenefit.Total'{}.


-record('ExplanationOfBenefit.SubDetail1', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	productOrService :: 'CodeableConcept'(),
	modifier :: ['CodeableConcept'()] | undefined,
	quantity :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	unitPrice :: 'Money'() | undefined,
	factor :: decimal() | undefined,
	net :: 'Money'() | undefined,
	noteNumber :: [positiveInt()] | undefined,
	adjudication :: ['ExplanationOfBenefit.Adjudication'()] | undefined}).

-type 'ExplanationOfBenefit.SubDetail1'() :: #'ExplanationOfBenefit.SubDetail1'{}.


-record('ExplanationOfBenefit.Detail1', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	productOrService :: 'CodeableConcept'(),
	modifier :: ['CodeableConcept'()] | undefined,
	quantity :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	unitPrice :: 'Money'() | undefined,
	factor :: decimal() | undefined,
	net :: 'Money'() | undefined,
	noteNumber :: [positiveInt()] | undefined,
	adjudication :: ['ExplanationOfBenefit.Adjudication'()] | undefined,
	subDetail :: ['ExplanationOfBenefit.SubDetail1'()] | undefined}).

-type 'ExplanationOfBenefit.Detail1'() :: #'ExplanationOfBenefit.Detail1'{}.


-record('ExplanationOfBenefit.AddItem', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	itemSequence :: [positiveInt()] | undefined,
	detailSequence :: [positiveInt()] | undefined,
	subDetailSequence :: [positiveInt()] | undefined,
	provider :: ['Reference'()] | undefined,
	productOrService :: 'CodeableConcept'(),
	modifier :: ['CodeableConcept'()] | undefined,
	programCode :: ['CodeableConcept'()] | undefined,
	choice :: 'Period'() | date() | undefined,
	choice1 :: 'Reference'() | 'CodeableConcept'() | 'Address'() | undefined,
	quantity :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	unitPrice :: 'Money'() | undefined,
	factor :: decimal() | undefined,
	net :: 'Money'() | undefined,
	bodySite :: 'CodeableConcept'() | undefined,
	subSite :: ['CodeableConcept'()] | undefined,
	noteNumber :: [positiveInt()] | undefined,
	adjudication :: ['ExplanationOfBenefit.Adjudication'()] | undefined,
	detail :: ['ExplanationOfBenefit.Detail1'()] | undefined}).

-type 'ExplanationOfBenefit.AddItem'() :: #'ExplanationOfBenefit.AddItem'{}.


-record('ExplanationOfBenefit.SubDetail', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	sequence :: positiveInt(),
	revenue :: 'CodeableConcept'() | undefined,
	category :: 'CodeableConcept'() | undefined,
	productOrService :: 'CodeableConcept'(),
	modifier :: ['CodeableConcept'()] | undefined,
	programCode :: ['CodeableConcept'()] | undefined,
	quantity :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	unitPrice :: 'Money'() | undefined,
	factor :: decimal() | undefined,
	net :: 'Money'() | undefined,
	udi :: ['Reference'()] | undefined,
	noteNumber :: [positiveInt()] | undefined,
	adjudication :: ['ExplanationOfBenefit.Adjudication'()] | undefined}).

-type 'ExplanationOfBenefit.SubDetail'() :: #'ExplanationOfBenefit.SubDetail'{}.


-record('ExplanationOfBenefit.Detail', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	sequence :: positiveInt(),
	revenue :: 'CodeableConcept'() | undefined,
	category :: 'CodeableConcept'() | undefined,
	productOrService :: 'CodeableConcept'(),
	modifier :: ['CodeableConcept'()] | undefined,
	programCode :: ['CodeableConcept'()] | undefined,
	quantity :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	unitPrice :: 'Money'() | undefined,
	factor :: decimal() | undefined,
	net :: 'Money'() | undefined,
	udi :: ['Reference'()] | undefined,
	noteNumber :: [positiveInt()] | undefined,
	adjudication :: ['ExplanationOfBenefit.Adjudication'()] | undefined,
	subDetail :: ['ExplanationOfBenefit.SubDetail'()] | undefined}).

-type 'ExplanationOfBenefit.Detail'() :: #'ExplanationOfBenefit.Detail'{}.


-record('ExplanationOfBenefit.Adjudication', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	category :: 'CodeableConcept'(),
	reason :: 'CodeableConcept'() | undefined,
	amount :: 'Money'() | undefined,
	value :: decimal() | undefined}).

-type 'ExplanationOfBenefit.Adjudication'() :: #'ExplanationOfBenefit.Adjudication'{}.


-record('ExplanationOfBenefit.Item', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	sequence :: positiveInt(),
	careTeamSequence :: [positiveInt()] | undefined,
	diagnosisSequence :: [positiveInt()] | undefined,
	procedureSequence :: [positiveInt()] | undefined,
	informationSequence :: [positiveInt()] | undefined,
	revenue :: 'CodeableConcept'() | undefined,
	category :: 'CodeableConcept'() | undefined,
	productOrService :: 'CodeableConcept'(),
	modifier :: ['CodeableConcept'()] | undefined,
	programCode :: ['CodeableConcept'()] | undefined,
	choice :: 'Period'() | date() | undefined,
	choice1 :: 'Reference'() | 'CodeableConcept'() | 'Address'() | undefined,
	quantity :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	unitPrice :: 'Money'() | undefined,
	factor :: decimal() | undefined,
	net :: 'Money'() | undefined,
	udi :: ['Reference'()] | undefined,
	bodySite :: 'CodeableConcept'() | undefined,
	subSite :: ['CodeableConcept'()] | undefined,
	encounter :: ['Reference'()] | undefined,
	noteNumber :: [positiveInt()] | undefined,
	adjudication :: ['ExplanationOfBenefit.Adjudication'()] | undefined,
	detail :: ['ExplanationOfBenefit.Detail'()] | undefined}).

-type 'ExplanationOfBenefit.Item'() :: #'ExplanationOfBenefit.Item'{}.


-record('ExplanationOfBenefit.Accident', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	date :: date() | undefined,
	type :: 'CodeableConcept'() | undefined,
	choice :: 'Reference'() | 'Address'() | undefined}).

-type 'ExplanationOfBenefit.Accident'() :: #'ExplanationOfBenefit.Accident'{}.


-record('ExplanationOfBenefit.Insurance', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	focal :: boolean(),
	coverage :: 'Reference'(),
	preAuthRef :: [string()] | undefined}).

-type 'ExplanationOfBenefit.Insurance'() :: #'ExplanationOfBenefit.Insurance'{}.


-record('ExplanationOfBenefit.Procedure', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	sequence :: positiveInt(),
	type :: ['CodeableConcept'()] | undefined,
	date :: dateTime() | undefined,
	choice :: 'Reference'() | 'CodeableConcept'(),
	udi :: ['Reference'()] | undefined}).

-type 'ExplanationOfBenefit.Procedure'() :: #'ExplanationOfBenefit.Procedure'{}.


-record('ExplanationOfBenefit.Diagnosis', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	sequence :: positiveInt(),
	choice :: 'Reference'() | 'CodeableConcept'(),
	type :: ['CodeableConcept'()] | undefined,
	onAdmission :: 'CodeableConcept'() | undefined,
	packageCode :: 'CodeableConcept'() | undefined}).

-type 'ExplanationOfBenefit.Diagnosis'() :: #'ExplanationOfBenefit.Diagnosis'{}.


-record('ExplanationOfBenefit.SupportingInfo', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	sequence :: positiveInt(),
	category :: 'CodeableConcept'(),
	code :: 'CodeableConcept'() | undefined,
	choice :: 'Period'() | date() | undefined,
	choice1 :: string() | 'Reference'() | 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | boolean() | 'Attachment'() | undefined,
	reason :: 'Coding'() | undefined}).

-type 'ExplanationOfBenefit.SupportingInfo'() :: #'ExplanationOfBenefit.SupportingInfo'{}.


-record('ExplanationOfBenefit.CareTeam', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	sequence :: positiveInt(),
	provider :: 'Reference'(),
	responsible :: boolean() | undefined,
	role :: 'CodeableConcept'() | undefined,
	qualification :: 'CodeableConcept'() | undefined}).

-type 'ExplanationOfBenefit.CareTeam'() :: #'ExplanationOfBenefit.CareTeam'{}.


-record('ExplanationOfBenefit.Payee', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: 'CodeableConcept'() | undefined,
	party :: 'Reference'() | undefined}).

-type 'ExplanationOfBenefit.Payee'() :: #'ExplanationOfBenefit.Payee'{}.


-record('ExplanationOfBenefit.Related', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	claim :: 'Reference'() | undefined,
	relationship :: 'CodeableConcept'() | undefined,
	reference :: 'Identifier'() | undefined}).

-type 'ExplanationOfBenefit.Related'() :: #'ExplanationOfBenefit.Related'{}.


-record('ExplanationOfBenefit', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	status :: 'ExplanationOfBenefitStatus'(),
	type :: 'CodeableConcept'(),
	subType :: 'CodeableConcept'() | undefined,
	use :: 'Use'(),
	patient :: 'Reference'(),
	billablePeriod :: 'Period'() | undefined,
	created :: dateTime(),
	enterer :: 'Reference'() | undefined,
	insurer :: 'Reference'(),
	provider :: 'Reference'(),
	priority :: 'CodeableConcept'() | undefined,
	fundsReserveRequested :: 'CodeableConcept'() | undefined,
	fundsReserve :: 'CodeableConcept'() | undefined,
	related :: ['ExplanationOfBenefit.Related'()] | undefined,
	prescription :: 'Reference'() | undefined,
	originalPrescription :: 'Reference'() | undefined,
	payee :: 'ExplanationOfBenefit.Payee'() | undefined,
	referral :: 'Reference'() | undefined,
	facility :: 'Reference'() | undefined,
	claim :: 'Reference'() | undefined,
	claimResponse :: 'Reference'() | undefined,
	outcome :: 'ClaimProcessingCodes'(),
	disposition :: string() | undefined,
	preAuthRef :: [string()] | undefined,
	preAuthRefPeriod :: ['Period'()] | undefined,
	careTeam :: ['ExplanationOfBenefit.CareTeam'()] | undefined,
	supportingInfo :: ['ExplanationOfBenefit.SupportingInfo'()] | undefined,
	diagnosis :: ['ExplanationOfBenefit.Diagnosis'()] | undefined,
	procedure :: ['ExplanationOfBenefit.Procedure'()] | undefined,
	precedence :: positiveInt() | undefined,
	insurance :: ['ExplanationOfBenefit.Insurance'()],
	accident :: 'ExplanationOfBenefit.Accident'() | undefined,
	item :: ['ExplanationOfBenefit.Item'()] | undefined,
	addItem :: ['ExplanationOfBenefit.AddItem'()] | undefined,
	adjudication :: ['ExplanationOfBenefit.Adjudication'()] | undefined,
	total :: ['ExplanationOfBenefit.Total'()] | undefined,
	payment :: 'ExplanationOfBenefit.Payment'() | undefined,
	formCode :: 'CodeableConcept'() | undefined,
	form :: 'Attachment'() | undefined,
	processNote :: ['ExplanationOfBenefit.ProcessNote'()] | undefined,
	benefitPeriod :: 'Period'() | undefined,
	benefitBalance :: ['ExplanationOfBenefit.BenefitBalance'()] | undefined}).

-type 'ExplanationOfBenefit'() :: #'ExplanationOfBenefit'{}.


-record('ResourceType', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'ResourceType'() :: #'ResourceType'{}.


-record('ExampleScenarioActorType', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'ExampleScenarioActorType'() :: #'ExampleScenarioActorType'{}.


-record('ExampleScenario.Alternative', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	title :: string(),
	description :: markdown() | undefined,
	step :: ['ExampleScenario.Step'()] | undefined}).

-type 'ExampleScenario.Alternative'() :: #'ExampleScenario.Alternative'{}.


-record('ExampleScenario.Operation', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	number :: string(),
	type :: string() | undefined,
	name :: string() | undefined,
	initiator :: string() | undefined,
	receiver :: string() | undefined,
	description :: markdown() | undefined,
	initiatorActive :: boolean() | undefined,
	receiverActive :: boolean() | undefined,
	request :: 'ExampleScenario.ContainedInstance'() | undefined,
	response :: 'ExampleScenario.ContainedInstance'() | undefined}).

-type 'ExampleScenario.Operation'() :: #'ExampleScenario.Operation'{}.


-record('ExampleScenario.Step', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	process :: ['ExampleScenario.Process'()] | undefined,
	pause :: boolean() | undefined,
	operation :: 'ExampleScenario.Operation'() | undefined,
	alternative :: ['ExampleScenario.Alternative'()] | undefined}).

-type 'ExampleScenario.Step'() :: #'ExampleScenario.Step'{}.


-record('ExampleScenario.Process', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	title :: string(),
	description :: markdown() | undefined,
	preConditions :: markdown() | undefined,
	postConditions :: markdown() | undefined,
	step :: ['ExampleScenario.Step'()] | undefined}).

-type 'ExampleScenario.Process'() :: #'ExampleScenario.Process'{}.


-record('ExampleScenario.ContainedInstance', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	resourceId :: string(),
	versionId :: string() | undefined}).

-type 'ExampleScenario.ContainedInstance'() :: #'ExampleScenario.ContainedInstance'{}.


-record('ExampleScenario.Version', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	versionId :: string(),
	description :: markdown()}).

-type 'ExampleScenario.Version'() :: #'ExampleScenario.Version'{}.


-record('ExampleScenario.Instance', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	resourceId :: string(),
	resourceType :: 'ResourceType'(),
	name :: string() | undefined,
	description :: markdown() | undefined,
	version :: ['ExampleScenario.Version'()] | undefined,
	containedInstance :: ['ExampleScenario.ContainedInstance'()] | undefined}).

-type 'ExampleScenario.Instance'() :: #'ExampleScenario.Instance'{}.


-record('ExampleScenario.Actor', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	actorId :: string(),
	type :: 'ExampleScenarioActorType'(),
	name :: string() | undefined,
	description :: markdown() | undefined}).

-type 'ExampleScenario.Actor'() :: #'ExampleScenario.Actor'{}.


-record('ExampleScenario', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	url :: uri() | undefined,
	identifier :: ['Identifier'()] | undefined,
	version :: string() | undefined,
	name :: string() | undefined,
	status :: 'PublicationStatus'(),
	experimental :: boolean() | undefined,
	date :: dateTime() | undefined,
	publisher :: string() | undefined,
	contact :: ['ContactDetail'()] | undefined,
	useContext :: ['UsageContext'()] | undefined,
	jurisdiction :: ['CodeableConcept'()] | undefined,
	copyright :: markdown() | undefined,
	purpose :: markdown() | undefined,
	actor :: ['ExampleScenario.Actor'()] | undefined,
	instance :: ['ExampleScenario.Instance'()] | undefined,
	process :: ['ExampleScenario.Process'()] | undefined,
	workflow :: [canonical()] | undefined}).

-type 'ExampleScenario'() :: #'ExampleScenario'{}.


-record('GroupMeasure', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'GroupMeasure'() :: #'GroupMeasure'{}.


-record('EvidenceVariableType', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'EvidenceVariableType'() :: #'EvidenceVariableType'{}.


-record('EvidenceVariable.Characteristic', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	description :: string() | undefined,
	choice :: 'TriggerDefinition'() | 'Reference'() | 'Expression'() | 'DataRequirement'() | 'CodeableConcept'() | canonical(),
	usageContext :: ['UsageContext'()] | undefined,
	exclude :: boolean() | undefined,
	choice1 :: 'Timing'() | 'Period'() | 'Duration'() | dateTime() | undefined,
	timeFromStart :: 'Duration'() | undefined,
	groupMeasure :: 'GroupMeasure'() | undefined}).

-type 'EvidenceVariable.Characteristic'() :: #'EvidenceVariable.Characteristic'{}.


-record('EvidenceVariable', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	url :: uri() | undefined,
	identifier :: ['Identifier'()] | undefined,
	version :: string() | undefined,
	name :: string() | undefined,
	title :: string() | undefined,
	shortTitle :: string() | undefined,
	subtitle :: string() | undefined,
	status :: 'PublicationStatus'(),
	date :: dateTime() | undefined,
	publisher :: string() | undefined,
	contact :: ['ContactDetail'()] | undefined,
	description :: markdown() | undefined,
	note :: ['Annotation'()] | undefined,
	useContext :: ['UsageContext'()] | undefined,
	jurisdiction :: ['CodeableConcept'()] | undefined,
	copyright :: markdown() | undefined,
	approvalDate :: date() | undefined,
	lastReviewDate :: date() | undefined,
	effectivePeriod :: 'Period'() | undefined,
	topic :: ['CodeableConcept'()] | undefined,
	author :: ['ContactDetail'()] | undefined,
	editor :: ['ContactDetail'()] | undefined,
	reviewer :: ['ContactDetail'()] | undefined,
	endorser :: ['ContactDetail'()] | undefined,
	relatedArtifact :: ['RelatedArtifact'()] | undefined,
	type :: 'EvidenceVariableType'() | undefined,
	characteristic :: ['EvidenceVariable.Characteristic'()]}).

-type 'EvidenceVariable'() :: #'EvidenceVariable'{}.


-record('Evidence', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	url :: uri() | undefined,
	identifier :: ['Identifier'()] | undefined,
	version :: string() | undefined,
	name :: string() | undefined,
	title :: string() | undefined,
	shortTitle :: string() | undefined,
	subtitle :: string() | undefined,
	status :: 'PublicationStatus'(),
	date :: dateTime() | undefined,
	publisher :: string() | undefined,
	contact :: ['ContactDetail'()] | undefined,
	description :: markdown() | undefined,
	note :: ['Annotation'()] | undefined,
	useContext :: ['UsageContext'()] | undefined,
	jurisdiction :: ['CodeableConcept'()] | undefined,
	copyright :: markdown() | undefined,
	approvalDate :: date() | undefined,
	lastReviewDate :: date() | undefined,
	effectivePeriod :: 'Period'() | undefined,
	topic :: ['CodeableConcept'()] | undefined,
	author :: ['ContactDetail'()] | undefined,
	editor :: ['ContactDetail'()] | undefined,
	reviewer :: ['ContactDetail'()] | undefined,
	endorser :: ['ContactDetail'()] | undefined,
	relatedArtifact :: ['RelatedArtifact'()] | undefined,
	exposureBackground :: 'Reference'(),
	exposureVariant :: ['Reference'()] | undefined,
	outcome :: ['Reference'()] | undefined}).

-type 'Evidence'() :: #'Evidence'{}.


-record('EventDefinition', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	url :: uri() | undefined,
	identifier :: ['Identifier'()] | undefined,
	version :: string() | undefined,
	name :: string() | undefined,
	title :: string() | undefined,
	subtitle :: string() | undefined,
	status :: 'PublicationStatus'(),
	experimental :: boolean() | undefined,
	choice :: 'Reference'() | 'CodeableConcept'() | undefined,
	date :: dateTime() | undefined,
	publisher :: string() | undefined,
	contact :: ['ContactDetail'()] | undefined,
	description :: markdown() | undefined,
	useContext :: ['UsageContext'()] | undefined,
	jurisdiction :: ['CodeableConcept'()] | undefined,
	purpose :: markdown() | undefined,
	usage :: string() | undefined,
	copyright :: markdown() | undefined,
	approvalDate :: date() | undefined,
	lastReviewDate :: date() | undefined,
	effectivePeriod :: 'Period'() | undefined,
	topic :: ['CodeableConcept'()] | undefined,
	author :: ['ContactDetail'()] | undefined,
	editor :: ['ContactDetail'()] | undefined,
	reviewer :: ['ContactDetail'()] | undefined,
	endorser :: ['ContactDetail'()] | undefined,
	relatedArtifact :: ['RelatedArtifact'()] | undefined,
	trigger :: ['TriggerDefinition'()]}).

-type 'EventDefinition'() :: #'EventDefinition'{}.


-record('EpisodeOfCareStatus', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'EpisodeOfCareStatus'() :: #'EpisodeOfCareStatus'{}.


-record('EpisodeOfCare.Diagnosis', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	condition :: 'Reference'(),
	role :: 'CodeableConcept'() | undefined,
	rank :: positiveInt() | undefined}).

-type 'EpisodeOfCare.Diagnosis'() :: #'EpisodeOfCare.Diagnosis'{}.


-record('EpisodeOfCare.StatusHistory', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	status :: 'EpisodeOfCareStatus'(),
	period :: 'Period'()}).

-type 'EpisodeOfCare.StatusHistory'() :: #'EpisodeOfCare.StatusHistory'{}.


-record('EpisodeOfCare', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	status :: 'EpisodeOfCareStatus'(),
	statusHistory :: ['EpisodeOfCare.StatusHistory'()] | undefined,
	type :: ['CodeableConcept'()] | undefined,
	diagnosis :: ['EpisodeOfCare.Diagnosis'()] | undefined,
	patient :: 'Reference'(),
	managingOrganization :: 'Reference'() | undefined,
	period :: 'Period'() | undefined,
	referralRequest :: ['Reference'()] | undefined,
	careManager :: 'Reference'() | undefined,
	team :: ['Reference'()] | undefined,
	account :: ['Reference'()] | undefined}).

-type 'EpisodeOfCare'() :: #'EpisodeOfCare'{}.


-record('EnrollmentResponse', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	status :: 'FinancialResourceStatusCodes'() | undefined,
	request :: 'Reference'() | undefined,
	outcome :: 'RemittanceOutcome'() | undefined,
	disposition :: string() | undefined,
	created :: dateTime() | undefined,
	organization :: 'Reference'() | undefined,
	requestProvider :: 'Reference'() | undefined}).

-type 'EnrollmentResponse'() :: #'EnrollmentResponse'{}.


-record('EnrollmentRequest', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	status :: 'FinancialResourceStatusCodes'() | undefined,
	created :: dateTime() | undefined,
	insurer :: 'Reference'() | undefined,
	provider :: 'Reference'() | undefined,
	candidate :: 'Reference'() | undefined,
	coverage :: 'Reference'() | undefined}).

-type 'EnrollmentRequest'() :: #'EnrollmentRequest'{}.


-record('EndpointStatus', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'EndpointStatus'() :: #'EndpointStatus'{}.


-record('Endpoint', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	status :: 'EndpointStatus'(),
	connectionType :: 'Coding'(),
	name :: string() | undefined,
	managingOrganization :: 'Reference'() | undefined,
	contact :: ['ContactPoint'()] | undefined,
	period :: 'Period'() | undefined,
	payloadType :: ['CodeableConcept'()],
	payloadMimeType :: [code()] | undefined,
	address :: url(),
	header :: [string()] | undefined}).

-type 'Endpoint'() :: #'Endpoint'{}.


-record('EncounterStatus', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'EncounterStatus'() :: #'EncounterStatus'{}.


-record('EncounterLocationStatus', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'EncounterLocationStatus'() :: #'EncounterLocationStatus'{}.


-record('Encounter.Location', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	location :: 'Reference'(),
	status :: 'EncounterLocationStatus'() | undefined,
	physicalType :: 'CodeableConcept'() | undefined,
	period :: 'Period'() | undefined}).

-type 'Encounter.Location'() :: #'Encounter.Location'{}.


-record('Encounter.Hospitalization', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	preAdmissionIdentifier :: 'Identifier'() | undefined,
	origin :: 'Reference'() | undefined,
	admitSource :: 'CodeableConcept'() | undefined,
	reAdmission :: 'CodeableConcept'() | undefined,
	dietPreference :: ['CodeableConcept'()] | undefined,
	specialCourtesy :: ['CodeableConcept'()] | undefined,
	specialArrangement :: ['CodeableConcept'()] | undefined,
	destination :: 'Reference'() | undefined,
	dischargeDisposition :: 'CodeableConcept'() | undefined}).

-type 'Encounter.Hospitalization'() :: #'Encounter.Hospitalization'{}.


-record('Encounter.Diagnosis', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	condition :: 'Reference'(),
	use :: 'CodeableConcept'() | undefined,
	rank :: positiveInt() | undefined}).

-type 'Encounter.Diagnosis'() :: #'Encounter.Diagnosis'{}.


-record('Encounter.Participant', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: ['CodeableConcept'()] | undefined,
	period :: 'Period'() | undefined,
	individual :: 'Reference'() | undefined}).

-type 'Encounter.Participant'() :: #'Encounter.Participant'{}.


-record('Encounter.ClassHistory', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	class :: 'Coding'(),
	period :: 'Period'()}).

-type 'Encounter.ClassHistory'() :: #'Encounter.ClassHistory'{}.


-record('Encounter.StatusHistory', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	status :: 'EncounterStatus'(),
	period :: 'Period'()}).

-type 'Encounter.StatusHistory'() :: #'Encounter.StatusHistory'{}.


-record('Encounter', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	status :: 'EncounterStatus'(),
	statusHistory :: ['Encounter.StatusHistory'()] | undefined,
	class :: 'Coding'(),
	classHistory :: ['Encounter.ClassHistory'()] | undefined,
	type :: ['CodeableConcept'()] | undefined,
	serviceType :: 'CodeableConcept'() | undefined,
	priority :: 'CodeableConcept'() | undefined,
	subject :: 'Reference'() | undefined,
	episodeOfCare :: ['Reference'()] | undefined,
	basedOn :: ['Reference'()] | undefined,
	participant :: ['Encounter.Participant'()] | undefined,
	appointment :: ['Reference'()] | undefined,
	period :: 'Period'() | undefined,
	length :: 'Duration'() | undefined,
	reasonCode :: ['CodeableConcept'()] | undefined,
	reasonReference :: ['Reference'()] | undefined,
	diagnosis :: ['Encounter.Diagnosis'()] | undefined,
	account :: ['Reference'()] | undefined,
	hospitalization :: 'Encounter.Hospitalization'() | undefined,
	location :: ['Encounter.Location'()] | undefined,
	serviceProvider :: 'Reference'() | undefined,
	partOf :: 'Reference'() | undefined}).

-type 'Encounter'() :: #'Encounter'{}.


-record('ExposureState', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'ExposureState'() :: #'ExposureState'{}.


-record('EffectEvidenceSynthesis.CertaintySubcomponent', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: 'CodeableConcept'() | undefined,
	rating :: ['CodeableConcept'()] | undefined,
	note :: ['Annotation'()] | undefined}).

-type 'EffectEvidenceSynthesis.CertaintySubcomponent'() :: #'EffectEvidenceSynthesis.CertaintySubcomponent'{}.


-record('EffectEvidenceSynthesis.Certainty', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	rating :: ['CodeableConcept'()] | undefined,
	note :: ['Annotation'()] | undefined,
	certaintySubcomponent :: ['EffectEvidenceSynthesis.CertaintySubcomponent'()] | undefined}).

-type 'EffectEvidenceSynthesis.Certainty'() :: #'EffectEvidenceSynthesis.Certainty'{}.


-record('EffectEvidenceSynthesis.PrecisionEstimate', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: 'CodeableConcept'() | undefined,
	level :: decimal() | undefined,
	from :: decimal() | undefined,
	to :: decimal() | undefined}).

-type 'EffectEvidenceSynthesis.PrecisionEstimate'() :: #'EffectEvidenceSynthesis.PrecisionEstimate'{}.


-record('EffectEvidenceSynthesis.EffectEstimate', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	description :: string() | undefined,
	type :: 'CodeableConcept'() | undefined,
	variantState :: 'CodeableConcept'() | undefined,
	value :: decimal() | undefined,
	unitOfMeasure :: 'CodeableConcept'() | undefined,
	precisionEstimate :: ['EffectEvidenceSynthesis.PrecisionEstimate'()] | undefined}).

-type 'EffectEvidenceSynthesis.EffectEstimate'() :: #'EffectEvidenceSynthesis.EffectEstimate'{}.


-record('EffectEvidenceSynthesis.ResultsByExposure', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	description :: string() | undefined,
	exposureState :: 'ExposureState'() | undefined,
	variantState :: 'CodeableConcept'() | undefined,
	riskEvidenceSynthesis :: 'Reference'()}).

-type 'EffectEvidenceSynthesis.ResultsByExposure'() :: #'EffectEvidenceSynthesis.ResultsByExposure'{}.


-record('EffectEvidenceSynthesis.SampleSize', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	description :: string() | undefined,
	numberOfStudies :: integer() | undefined,
	numberOfParticipants :: integer() | undefined}).

-type 'EffectEvidenceSynthesis.SampleSize'() :: #'EffectEvidenceSynthesis.SampleSize'{}.


-record('EffectEvidenceSynthesis', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	url :: uri() | undefined,
	identifier :: ['Identifier'()] | undefined,
	version :: string() | undefined,
	name :: string() | undefined,
	title :: string() | undefined,
	status :: 'PublicationStatus'(),
	date :: dateTime() | undefined,
	publisher :: string() | undefined,
	contact :: ['ContactDetail'()] | undefined,
	description :: markdown() | undefined,
	note :: ['Annotation'()] | undefined,
	useContext :: ['UsageContext'()] | undefined,
	jurisdiction :: ['CodeableConcept'()] | undefined,
	copyright :: markdown() | undefined,
	approvalDate :: date() | undefined,
	lastReviewDate :: date() | undefined,
	effectivePeriod :: 'Period'() | undefined,
	topic :: ['CodeableConcept'()] | undefined,
	author :: ['ContactDetail'()] | undefined,
	editor :: ['ContactDetail'()] | undefined,
	reviewer :: ['ContactDetail'()] | undefined,
	endorser :: ['ContactDetail'()] | undefined,
	relatedArtifact :: ['RelatedArtifact'()] | undefined,
	synthesisType :: 'CodeableConcept'() | undefined,
	studyType :: 'CodeableConcept'() | undefined,
	population :: 'Reference'(),
	exposure :: 'Reference'(),
	exposureAlternative :: 'Reference'(),
	outcome :: 'Reference'(),
	sampleSize :: 'EffectEvidenceSynthesis.SampleSize'() | undefined,
	resultsByExposure :: ['EffectEvidenceSynthesis.ResultsByExposure'()] | undefined,
	effectEstimate :: ['EffectEvidenceSynthesis.EffectEstimate'()] | undefined,
	certainty :: ['EffectEvidenceSynthesis.Certainty'()] | undefined}).

-type 'EffectEvidenceSynthesis'() :: #'EffectEvidenceSynthesis'{}.


-record('DocumentReference.Context', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	encounter :: ['Reference'()] | undefined,
	event :: ['CodeableConcept'()] | undefined,
	period :: 'Period'() | undefined,
	facilityType :: 'CodeableConcept'() | undefined,
	practiceSetting :: 'CodeableConcept'() | undefined,
	sourcePatientInfo :: 'Reference'() | undefined,
	related :: ['Reference'()] | undefined}).

-type 'DocumentReference.Context'() :: #'DocumentReference.Context'{}.


-record('DocumentReference.Content', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	attachment :: 'Attachment'(),
	format :: 'Coding'() | undefined}).

-type 'DocumentReference.Content'() :: #'DocumentReference.Content'{}.


-record('DocumentReference.RelatesTo', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	code :: 'DocumentRelationshipType'(),
	target :: 'Reference'()}).

-type 'DocumentReference.RelatesTo'() :: #'DocumentReference.RelatesTo'{}.


-record('DocumentReference', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	masterIdentifier :: 'Identifier'() | undefined,
	identifier :: ['Identifier'()] | undefined,
	status :: 'DocumentReferenceStatus'(),
	docStatus :: 'CompositionStatus'() | undefined,
	type :: 'CodeableConcept'() | undefined,
	category :: ['CodeableConcept'()] | undefined,
	subject :: 'Reference'() | undefined,
	date :: instant() | undefined,
	author :: ['Reference'()] | undefined,
	authenticator :: 'Reference'() | undefined,
	custodian :: 'Reference'() | undefined,
	relatesTo :: ['DocumentReference.RelatesTo'()] | undefined,
	description :: string() | undefined,
	securityLabel :: ['CodeableConcept'()] | undefined,
	content :: ['DocumentReference.Content'()],
	context :: 'DocumentReference.Context'() | undefined}).

-type 'DocumentReference'() :: #'DocumentReference'{}.


-record('DocumentManifest.Related', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: 'Identifier'() | undefined,
	ref :: 'Reference'() | undefined}).

-type 'DocumentManifest.Related'() :: #'DocumentManifest.Related'{}.


-record('DocumentManifest', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	masterIdentifier :: 'Identifier'() | undefined,
	identifier :: ['Identifier'()] | undefined,
	status :: 'DocumentReferenceStatus'(),
	type :: 'CodeableConcept'() | undefined,
	subject :: 'Reference'() | undefined,
	created :: dateTime() | undefined,
	author :: ['Reference'()] | undefined,
	recipient :: ['Reference'()] | undefined,
	source :: uri() | undefined,
	description :: string() | undefined,
	content :: ['Reference'()],
	related :: ['DocumentManifest.Related'()] | undefined}).

-type 'DocumentManifest'() :: #'DocumentManifest'{}.


-record('DiagnosticReportStatus', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'DiagnosticReportStatus'() :: #'DiagnosticReportStatus'{}.


-record('DiagnosticReport.Media', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	comment :: string() | undefined,
	link :: 'Reference'()}).

-type 'DiagnosticReport.Media'() :: #'DiagnosticReport.Media'{}.


-record('DiagnosticReport', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	basedOn :: ['Reference'()] | undefined,
	status :: 'DiagnosticReportStatus'(),
	category :: ['CodeableConcept'()] | undefined,
	code :: 'CodeableConcept'(),
	subject :: 'Reference'() | undefined,
	encounter :: 'Reference'() | undefined,
	choice :: 'Period'() | dateTime() | undefined,
	issued :: instant() | undefined,
	performer :: ['Reference'()] | undefined,
	resultsInterpreter :: ['Reference'()] | undefined,
	specimen :: ['Reference'()] | undefined,
	result :: ['Reference'()] | undefined,
	imagingStudy :: ['Reference'()] | undefined,
	media :: ['DiagnosticReport.Media'()] | undefined,
	conclusion :: string() | undefined,
	conclusionCode :: ['CodeableConcept'()] | undefined,
	presentedForm :: ['Attachment'()] | undefined}).

-type 'DiagnosticReport'() :: #'DiagnosticReport'{}.


-record('DeviceUseStatementStatus', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'DeviceUseStatementStatus'() :: #'DeviceUseStatementStatus'{}.


-record('DeviceUseStatement', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	basedOn :: ['Reference'()] | undefined,
	status :: 'DeviceUseStatementStatus'(),
	subject :: 'Reference'(),
	derivedFrom :: ['Reference'()] | undefined,
	choice :: 'Timing'() | 'Period'() | dateTime() | undefined,
	recordedOn :: dateTime() | undefined,
	source :: 'Reference'() | undefined,
	device :: 'Reference'(),
	reasonCode :: ['CodeableConcept'()] | undefined,
	reasonReference :: ['Reference'()] | undefined,
	bodySite :: 'CodeableConcept'() | undefined,
	note :: ['Annotation'()] | undefined}).

-type 'DeviceUseStatement'() :: #'DeviceUseStatement'{}.


-record('DeviceRequest.Parameter', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	code :: 'CodeableConcept'() | undefined,
	choice :: 'Range'() | 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | 'CodeableConcept'() | boolean() | undefined}).

-type 'DeviceRequest.Parameter'() :: #'DeviceRequest.Parameter'{}.


-record('DeviceRequest', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	instantiatesCanonical :: [canonical()] | undefined,
	instantiatesUri :: [uri()] | undefined,
	basedOn :: ['Reference'()] | undefined,
	priorRequest :: ['Reference'()] | undefined,
	groupIdentifier :: 'Identifier'() | undefined,
	status :: 'RequestStatus'() | undefined,
	intent :: 'RequestIntent'(),
	priority :: 'RequestPriority'() | undefined,
	choice :: 'Reference'() | 'CodeableConcept'(),
	parameter :: ['DeviceRequest.Parameter'()] | undefined,
	subject :: 'Reference'(),
	encounter :: 'Reference'() | undefined,
	choice1 :: 'Timing'() | 'Period'() | dateTime() | undefined,
	authoredOn :: dateTime() | undefined,
	requester :: 'Reference'() | undefined,
	performerType :: 'CodeableConcept'() | undefined,
	performer :: 'Reference'() | undefined,
	reasonCode :: ['CodeableConcept'()] | undefined,
	reasonReference :: ['Reference'()] | undefined,
	insurance :: ['Reference'()] | undefined,
	supportingInfo :: ['Reference'()] | undefined,
	note :: ['Annotation'()] | undefined,
	relevantHistory :: ['Reference'()] | undefined}).

-type 'DeviceRequest'() :: #'DeviceRequest'{}.


-record('DeviceMetricCategory', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'DeviceMetricCategory'() :: #'DeviceMetricCategory'{}.


-record('DeviceMetricOperationalStatus', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'DeviceMetricOperationalStatus'() :: #'DeviceMetricOperationalStatus'{}.


-record('DeviceMetricCalibrationState', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'DeviceMetricCalibrationState'() :: #'DeviceMetricCalibrationState'{}.


-record('DeviceMetricColor', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'DeviceMetricColor'() :: #'DeviceMetricColor'{}.


-record('DeviceMetricCalibrationType', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'DeviceMetricCalibrationType'() :: #'DeviceMetricCalibrationType'{}.


-record('DeviceMetric.Calibration', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: 'DeviceMetricCalibrationType'() | undefined,
	state :: 'DeviceMetricCalibrationState'() | undefined,
	time :: instant() | undefined}).

-type 'DeviceMetric.Calibration'() :: #'DeviceMetric.Calibration'{}.


-record('DeviceMetric', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	type :: 'CodeableConcept'(),
	unit :: 'CodeableConcept'() | undefined,
	source :: 'Reference'() | undefined,
	parent :: 'Reference'() | undefined,
	operationalStatus :: 'DeviceMetricOperationalStatus'() | undefined,
	color :: 'DeviceMetricColor'() | undefined,
	category :: 'DeviceMetricCategory'(),
	measurementPeriod :: 'Timing'() | undefined,
	calibration :: ['DeviceMetric.Calibration'()] | undefined}).

-type 'DeviceMetric'() :: #'DeviceMetric'{}.


-record('DeviceDefinition.Material', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	substance :: 'CodeableConcept'(),
	alternate :: boolean() | undefined,
	allergenicIndicator :: boolean() | undefined}).

-type 'DeviceDefinition.Material'() :: #'DeviceDefinition.Material'{}.


-record('DeviceDefinition.Property', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: 'CodeableConcept'(),
	valueQuantity :: ['Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'()] | undefined,
	valueCode :: ['CodeableConcept'()] | undefined}).

-type 'DeviceDefinition.Property'() :: #'DeviceDefinition.Property'{}.


-record('DeviceDefinition.Capability', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: 'CodeableConcept'(),
	description :: ['CodeableConcept'()] | undefined}).

-type 'DeviceDefinition.Capability'() :: #'DeviceDefinition.Capability'{}.


-record('DeviceDefinition.Specialization', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	systemType :: string(),
	version :: string() | undefined}).

-type 'DeviceDefinition.Specialization'() :: #'DeviceDefinition.Specialization'{}.


-record('DeviceDefinition.DeviceName', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	name :: string(),
	type :: 'DeviceNameType'()}).

-type 'DeviceDefinition.DeviceName'() :: #'DeviceDefinition.DeviceName'{}.


-record('DeviceDefinition.UdiDeviceIdentifier', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	deviceIdentifier :: string(),
	issuer :: uri(),
	jurisdiction :: uri()}).

-type 'DeviceDefinition.UdiDeviceIdentifier'() :: #'DeviceDefinition.UdiDeviceIdentifier'{}.


-record('DeviceDefinition', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	udiDeviceIdentifier :: ['DeviceDefinition.UdiDeviceIdentifier'()] | undefined,
	choice :: string() | 'Reference'() | undefined,
	deviceName :: ['DeviceDefinition.DeviceName'()] | undefined,
	modelNumber :: string() | undefined,
	type :: 'CodeableConcept'() | undefined,
	specialization :: ['DeviceDefinition.Specialization'()] | undefined,
	version :: [string()] | undefined,
	safety :: ['CodeableConcept'()] | undefined,
	shelfLifeStorage :: ['ProductShelfLife'()] | undefined,
	physicalCharacteristics :: 'ProdCharacteristic'() | undefined,
	languageCode :: ['CodeableConcept'()] | undefined,
	capability :: ['DeviceDefinition.Capability'()] | undefined,
	property :: ['DeviceDefinition.Property'()] | undefined,
	owner :: 'Reference'() | undefined,
	contact :: ['ContactPoint'()] | undefined,
	url :: uri() | undefined,
	onlineInformation :: uri() | undefined,
	note :: ['Annotation'()] | undefined,
	quantity :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	parentDevice :: 'Reference'() | undefined,
	material :: ['DeviceDefinition.Material'()] | undefined}).

-type 'DeviceDefinition'() :: #'DeviceDefinition'{}.


-record('UDIEntryType', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'UDIEntryType'() :: #'UDIEntryType'{}.


-record('DeviceNameType', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'DeviceNameType'() :: #'DeviceNameType'{}.


-record('FHIRDeviceStatus', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'FHIRDeviceStatus'() :: #'FHIRDeviceStatus'{}.


-record('Device.Property', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: 'CodeableConcept'(),
	valueQuantity :: ['Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'()] | undefined,
	valueCode :: ['CodeableConcept'()] | undefined}).

-type 'Device.Property'() :: #'Device.Property'{}.


-record('Device.Version', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: 'CodeableConcept'() | undefined,
	component :: 'Identifier'() | undefined,
	value :: string()}).

-type 'Device.Version'() :: #'Device.Version'{}.


-record('Device.Specialization', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	systemType :: 'CodeableConcept'(),
	version :: string() | undefined}).

-type 'Device.Specialization'() :: #'Device.Specialization'{}.


-record('Device.DeviceName', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	name :: string(),
	type :: 'DeviceNameType'()}).

-type 'Device.DeviceName'() :: #'Device.DeviceName'{}.


-record('Device.UdiCarrier', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	deviceIdentifier :: string() | undefined,
	issuer :: uri() | undefined,
	jurisdiction :: uri() | undefined,
	carrierAIDC :: base64Binary() | undefined,
	carrierHRF :: string() | undefined,
	entryType :: 'UDIEntryType'() | undefined}).

-type 'Device.UdiCarrier'() :: #'Device.UdiCarrier'{}.


-record('Device', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	definition :: 'Reference'() | undefined,
	udiCarrier :: ['Device.UdiCarrier'()] | undefined,
	status :: 'FHIRDeviceStatus'() | undefined,
	statusReason :: ['CodeableConcept'()] | undefined,
	distinctIdentifier :: string() | undefined,
	manufacturer :: string() | undefined,
	manufactureDate :: dateTime() | undefined,
	expirationDate :: dateTime() | undefined,
	lotNumber :: string() | undefined,
	serialNumber :: string() | undefined,
	deviceName :: ['Device.DeviceName'()] | undefined,
	modelNumber :: string() | undefined,
	partNumber :: string() | undefined,
	type :: 'CodeableConcept'() | undefined,
	specialization :: ['Device.Specialization'()] | undefined,
	version :: ['Device.Version'()] | undefined,
	property :: ['Device.Property'()] | undefined,
	patient :: 'Reference'() | undefined,
	owner :: 'Reference'() | undefined,
	contact :: ['ContactPoint'()] | undefined,
	location :: 'Reference'() | undefined,
	url :: uri() | undefined,
	note :: ['Annotation'()] | undefined,
	safety :: ['CodeableConcept'()] | undefined,
	parent :: 'Reference'() | undefined}).

-type 'Device'() :: #'Device'{}.


-record('DetectedIssueSeverity', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'DetectedIssueSeverity'() :: #'DetectedIssueSeverity'{}.


-record('ObservationStatus', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'ObservationStatus'() :: #'ObservationStatus'{}.


-record('DetectedIssue.Mitigation', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	action :: 'CodeableConcept'(),
	date :: dateTime() | undefined,
	author :: 'Reference'() | undefined}).

-type 'DetectedIssue.Mitigation'() :: #'DetectedIssue.Mitigation'{}.


-record('DetectedIssue.Evidence', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	code :: ['CodeableConcept'()] | undefined,
	detail :: ['Reference'()] | undefined}).

-type 'DetectedIssue.Evidence'() :: #'DetectedIssue.Evidence'{}.


-record('DetectedIssue', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	status :: 'ObservationStatus'(),
	code :: 'CodeableConcept'() | undefined,
	severity :: 'DetectedIssueSeverity'() | undefined,
	patient :: 'Reference'() | undefined,
	choice :: 'Period'() | dateTime() | undefined,
	author :: 'Reference'() | undefined,
	implicated :: ['Reference'()] | undefined,
	evidence :: ['DetectedIssue.Evidence'()] | undefined,
	detail :: string() | undefined,
	reference :: uri() | undefined,
	mitigation :: ['DetectedIssue.Mitigation'()] | undefined}).

-type 'DetectedIssue'() :: #'DetectedIssue'{}.


-record('EligibilityResponsePurpose', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'EligibilityResponsePurpose'() :: #'EligibilityResponsePurpose'{}.


-record('CoverageEligibilityResponse.Error', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	code :: 'CodeableConcept'()}).

-type 'CoverageEligibilityResponse.Error'() :: #'CoverageEligibilityResponse.Error'{}.


-record('CoverageEligibilityResponse.Benefit', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: 'CodeableConcept'(),
	choice :: unsignedInt() | string() | 'Money'() | undefined,
	choice1 :: unsignedInt() | string() | 'Money'() | undefined}).

-type 'CoverageEligibilityResponse.Benefit'() :: #'CoverageEligibilityResponse.Benefit'{}.


-record('CoverageEligibilityResponse.Item', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	category :: 'CodeableConcept'() | undefined,
	productOrService :: 'CodeableConcept'() | undefined,
	modifier :: ['CodeableConcept'()] | undefined,
	provider :: 'Reference'() | undefined,
	excluded :: boolean() | undefined,
	name :: string() | undefined,
	description :: string() | undefined,
	network :: 'CodeableConcept'() | undefined,
	unit :: 'CodeableConcept'() | undefined,
	term :: 'CodeableConcept'() | undefined,
	benefit :: ['CoverageEligibilityResponse.Benefit'()] | undefined,
	authorizationRequired :: boolean() | undefined,
	authorizationSupporting :: ['CodeableConcept'()] | undefined,
	authorizationUrl :: uri() | undefined}).

-type 'CoverageEligibilityResponse.Item'() :: #'CoverageEligibilityResponse.Item'{}.


-record('CoverageEligibilityResponse.Insurance', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	coverage :: 'Reference'(),
	inforce :: boolean() | undefined,
	benefitPeriod :: 'Period'() | undefined,
	item :: ['CoverageEligibilityResponse.Item'()] | undefined}).

-type 'CoverageEligibilityResponse.Insurance'() :: #'CoverageEligibilityResponse.Insurance'{}.


-record('CoverageEligibilityResponse', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	status :: 'FinancialResourceStatusCodes'(),
	purpose :: ['EligibilityResponsePurpose'()],
	patient :: 'Reference'(),
	choice :: 'Period'() | date() | undefined,
	created :: dateTime(),
	requestor :: 'Reference'() | undefined,
	request :: 'Reference'(),
	outcome :: 'RemittanceOutcome'(),
	disposition :: string() | undefined,
	insurer :: 'Reference'(),
	insurance :: ['CoverageEligibilityResponse.Insurance'()] | undefined,
	preAuthRef :: string() | undefined,
	form :: 'CodeableConcept'() | undefined,
	error :: ['CoverageEligibilityResponse.Error'()] | undefined}).

-type 'CoverageEligibilityResponse'() :: #'CoverageEligibilityResponse'{}.


-record('EligibilityRequestPurpose', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'EligibilityRequestPurpose'() :: #'EligibilityRequestPurpose'{}.


-record('CoverageEligibilityRequest.Diagnosis', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	choice :: 'Reference'() | 'CodeableConcept'() | undefined}).

-type 'CoverageEligibilityRequest.Diagnosis'() :: #'CoverageEligibilityRequest.Diagnosis'{}.


-record('CoverageEligibilityRequest.Item', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	supportingInfoSequence :: [positiveInt()] | undefined,
	category :: 'CodeableConcept'() | undefined,
	productOrService :: 'CodeableConcept'() | undefined,
	modifier :: ['CodeableConcept'()] | undefined,
	provider :: 'Reference'() | undefined,
	quantity :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	unitPrice :: 'Money'() | undefined,
	facility :: 'Reference'() | undefined,
	diagnosis :: ['CoverageEligibilityRequest.Diagnosis'()] | undefined,
	detail :: ['Reference'()] | undefined}).

-type 'CoverageEligibilityRequest.Item'() :: #'CoverageEligibilityRequest.Item'{}.


-record('CoverageEligibilityRequest.Insurance', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	focal :: boolean() | undefined,
	coverage :: 'Reference'(),
	businessArrangement :: string() | undefined}).

-type 'CoverageEligibilityRequest.Insurance'() :: #'CoverageEligibilityRequest.Insurance'{}.


-record('CoverageEligibilityRequest.SupportingInfo', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	sequence :: positiveInt(),
	information :: 'Reference'(),
	appliesToAll :: boolean() | undefined}).

-type 'CoverageEligibilityRequest.SupportingInfo'() :: #'CoverageEligibilityRequest.SupportingInfo'{}.


-record('CoverageEligibilityRequest', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	status :: 'FinancialResourceStatusCodes'(),
	priority :: 'CodeableConcept'() | undefined,
	purpose :: ['EligibilityRequestPurpose'()],
	patient :: 'Reference'(),
	choice :: 'Period'() | date() | undefined,
	created :: dateTime(),
	enterer :: 'Reference'() | undefined,
	provider :: 'Reference'() | undefined,
	insurer :: 'Reference'(),
	facility :: 'Reference'() | undefined,
	supportingInfo :: ['CoverageEligibilityRequest.SupportingInfo'()] | undefined,
	insurance :: ['CoverageEligibilityRequest.Insurance'()] | undefined,
	item :: ['CoverageEligibilityRequest.Item'()] | undefined}).

-type 'CoverageEligibilityRequest'() :: #'CoverageEligibilityRequest'{}.


-record('Coverage.Exception', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: 'CodeableConcept'(),
	period :: 'Period'() | undefined}).

-type 'Coverage.Exception'() :: #'Coverage.Exception'{}.


-record('Coverage.CostToBeneficiary', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: 'CodeableConcept'() | undefined,
	choice :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | 'Money'(),
	exception :: ['Coverage.Exception'()] | undefined}).

-type 'Coverage.CostToBeneficiary'() :: #'Coverage.CostToBeneficiary'{}.


-record('Coverage.Class', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: 'CodeableConcept'(),
	value :: string(),
	name :: string() | undefined}).

-type 'Coverage.Class'() :: #'Coverage.Class'{}.


-record('Coverage', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	status :: 'FinancialResourceStatusCodes'(),
	type :: 'CodeableConcept'() | undefined,
	policyHolder :: 'Reference'() | undefined,
	subscriber :: 'Reference'() | undefined,
	subscriberId :: string() | undefined,
	beneficiary :: 'Reference'(),
	dependent :: string() | undefined,
	relationship :: 'CodeableConcept'() | undefined,
	period :: 'Period'() | undefined,
	payor :: ['Reference'()],
	class :: ['Coverage.Class'()] | undefined,
	order :: positiveInt() | undefined,
	network :: string() | undefined,
	costToBeneficiary :: ['Coverage.CostToBeneficiary'()] | undefined,
	subrogation :: boolean() | undefined,
	contract :: ['Reference'()] | undefined}).

-type 'Coverage'() :: #'Coverage'{}.


-record('ContractResourcePublicationStatusCodes', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'ContractResourcePublicationStatusCodes'() :: #'ContractResourcePublicationStatusCodes'{}.


-record('ContractResourceStatusCodes', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'ContractResourceStatusCodes'() :: #'ContractResourceStatusCodes'{}.


-record('Contract.Rule', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	choice :: 'Reference'() | 'Attachment'()}).

-type 'Contract.Rule'() :: #'Contract.Rule'{}.


-record('Contract.Legal', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	choice :: 'Reference'() | 'Attachment'()}).

-type 'Contract.Legal'() :: #'Contract.Legal'{}.


-record('Contract.Friendly', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	choice :: 'Reference'() | 'Attachment'()}).

-type 'Contract.Friendly'() :: #'Contract.Friendly'{}.


-record('Contract.Signer', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: 'Coding'(),
	party :: 'Reference'(),
	signature :: ['Signature'()]}).

-type 'Contract.Signer'() :: #'Contract.Signer'{}.


-record('Contract.Subject', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	reference :: ['Reference'()],
	role :: 'CodeableConcept'() | undefined}).

-type 'Contract.Subject'() :: #'Contract.Subject'{}.


-record('Contract.Action', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	doNotPerform :: boolean() | undefined,
	type :: 'CodeableConcept'(),
	subject :: ['Contract.Subject'()] | undefined,
	intent :: 'CodeableConcept'(),
	linkId :: [string()] | undefined,
	status :: 'CodeableConcept'(),
	context :: 'Reference'() | undefined,
	contextLinkId :: [string()] | undefined,
	choice :: 'Timing'() | 'Period'() | dateTime() | undefined,
	requester :: ['Reference'()] | undefined,
	requesterLinkId :: [string()] | undefined,
	performerType :: ['CodeableConcept'()] | undefined,
	performerRole :: 'CodeableConcept'() | undefined,
	performer :: 'Reference'() | undefined,
	performerLinkId :: [string()] | undefined,
	reasonCode :: ['CodeableConcept'()] | undefined,
	reasonReference :: ['Reference'()] | undefined,
	reason :: [string()] | undefined,
	reasonLinkId :: [string()] | undefined,
	note :: ['Annotation'()] | undefined,
	securityLabelNumber :: [unsignedInt()] | undefined}).

-type 'Contract.Action'() :: #'Contract.Action'{}.


-record('Contract.ValuedItem', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	choice :: 'Reference'() | 'CodeableConcept'() | undefined,
	identifier :: 'Identifier'() | undefined,
	effectiveTime :: dateTime() | undefined,
	quantity :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	unitPrice :: 'Money'() | undefined,
	factor :: decimal() | undefined,
	points :: decimal() | undefined,
	net :: 'Money'() | undefined,
	payment :: string() | undefined,
	paymentDate :: dateTime() | undefined,
	responsible :: 'Reference'() | undefined,
	recipient :: 'Reference'() | undefined,
	linkId :: [string()] | undefined,
	securityLabelNumber :: [unsignedInt()] | undefined}).

-type 'Contract.ValuedItem'() :: #'Contract.ValuedItem'{}.


-record('Contract.Context', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	reference :: 'Reference'() | undefined,
	code :: ['CodeableConcept'()] | undefined,
	text :: string() | undefined}).

-type 'Contract.Context'() :: #'Contract.Context'{}.


-record('Contract.Asset', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	scope :: 'CodeableConcept'() | undefined,
	type :: ['CodeableConcept'()] | undefined,
	typeReference :: ['Reference'()] | undefined,
	subtype :: ['CodeableConcept'()] | undefined,
	relationship :: 'Coding'() | undefined,
	context :: ['Contract.Context'()] | undefined,
	condition :: string() | undefined,
	periodType :: ['CodeableConcept'()] | undefined,
	period :: ['Period'()] | undefined,
	usePeriod :: ['Period'()] | undefined,
	text :: string() | undefined,
	linkId :: [string()] | undefined,
	answer :: ['Contract.Answer'()] | undefined,
	securityLabelNumber :: [unsignedInt()] | undefined,
	valuedItem :: ['Contract.ValuedItem'()] | undefined}).

-type 'Contract.Asset'() :: #'Contract.Asset'{}.


-record('Contract.Answer', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	choice :: uri() | time() | string() | 'Reference'() | 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | integer() | decimal() | dateTime() | date() | 'Coding'() | boolean() | 'Attachment'()}).

-type 'Contract.Answer'() :: #'Contract.Answer'{}.


-record('Contract.Party', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	reference :: ['Reference'()],
	role :: 'CodeableConcept'()}).

-type 'Contract.Party'() :: #'Contract.Party'{}.


-record('Contract.Offer', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	party :: ['Contract.Party'()] | undefined,
	topic :: 'Reference'() | undefined,
	type :: 'CodeableConcept'() | undefined,
	decision :: 'CodeableConcept'() | undefined,
	decisionMode :: ['CodeableConcept'()] | undefined,
	answer :: ['Contract.Answer'()] | undefined,
	text :: string() | undefined,
	linkId :: [string()] | undefined,
	securityLabelNumber :: [unsignedInt()] | undefined}).

-type 'Contract.Offer'() :: #'Contract.Offer'{}.


-record('Contract.SecurityLabel', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	number :: [unsignedInt()] | undefined,
	classification :: 'Coding'(),
	category :: ['Coding'()] | undefined,
	control :: ['Coding'()] | undefined}).

-type 'Contract.SecurityLabel'() :: #'Contract.SecurityLabel'{}.


-record('Contract.Term', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: 'Identifier'() | undefined,
	issued :: dateTime() | undefined,
	applies :: 'Period'() | undefined,
	choice :: 'Reference'() | 'CodeableConcept'() | undefined,
	type :: 'CodeableConcept'() | undefined,
	subType :: 'CodeableConcept'() | undefined,
	text :: string() | undefined,
	securityLabel :: ['Contract.SecurityLabel'()] | undefined,
	offer :: 'Contract.Offer'(),
	asset :: ['Contract.Asset'()] | undefined,
	action :: ['Contract.Action'()] | undefined,
	group :: ['Contract.Term'()] | undefined}).

-type 'Contract.Term'() :: #'Contract.Term'{}.


-record('Contract.ContentDefinition', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: 'CodeableConcept'(),
	subType :: 'CodeableConcept'() | undefined,
	publisher :: 'Reference'() | undefined,
	publicationDate :: dateTime() | undefined,
	publicationStatus :: 'ContractResourcePublicationStatusCodes'(),
	copyright :: markdown() | undefined}).

-type 'Contract.ContentDefinition'() :: #'Contract.ContentDefinition'{}.


-record('Contract', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	url :: uri() | undefined,
	version :: string() | undefined,
	status :: 'ContractResourceStatusCodes'() | undefined,
	legalState :: 'CodeableConcept'() | undefined,
	instantiatesCanonical :: 'Reference'() | undefined,
	instantiatesUri :: uri() | undefined,
	contentDerivative :: 'CodeableConcept'() | undefined,
	issued :: dateTime() | undefined,
	applies :: 'Period'() | undefined,
	expirationType :: 'CodeableConcept'() | undefined,
	subject :: ['Reference'()] | undefined,
	authority :: ['Reference'()] | undefined,
	domain :: ['Reference'()] | undefined,
	site :: ['Reference'()] | undefined,
	name :: string() | undefined,
	title :: string() | undefined,
	subtitle :: string() | undefined,
	alias :: [string()] | undefined,
	author :: 'Reference'() | undefined,
	scope :: 'CodeableConcept'() | undefined,
	choice :: 'Reference'() | 'CodeableConcept'() | undefined,
	type :: 'CodeableConcept'() | undefined,
	subType :: ['CodeableConcept'()] | undefined,
	contentDefinition :: 'Contract.ContentDefinition'() | undefined,
	term :: ['Contract.Term'()] | undefined,
	supportingInfo :: ['Reference'()] | undefined,
	relevantHistory :: ['Reference'()] | undefined,
	signer :: ['Contract.Signer'()] | undefined,
	friendly :: ['Contract.Friendly'()] | undefined,
	legal :: ['Contract.Legal'()] | undefined,
	rule :: ['Contract.Rule'()] | undefined,
	choice1 :: 'Reference'() | 'Attachment'() | undefined}).

-type 'Contract'() :: #'Contract'{}.


-record('ConsentState', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'ConsentState'() :: #'ConsentState'{}.


-record('ConsentDataMeaning', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'ConsentDataMeaning'() :: #'ConsentDataMeaning'{}.


-record('ConsentProvisionType', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'ConsentProvisionType'() :: #'ConsentProvisionType'{}.


-record('Consent.Data', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	meaning :: 'ConsentDataMeaning'(),
	reference :: 'Reference'()}).

-type 'Consent.Data'() :: #'Consent.Data'{}.


-record('Consent.Actor', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	role :: 'CodeableConcept'(),
	reference :: 'Reference'()}).

-type 'Consent.Actor'() :: #'Consent.Actor'{}.


-record('Consent.Provision', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: 'ConsentProvisionType'() | undefined,
	period :: 'Period'() | undefined,
	actor :: ['Consent.Actor'()] | undefined,
	action :: ['CodeableConcept'()] | undefined,
	securityLabel :: ['Coding'()] | undefined,
	purpose :: ['Coding'()] | undefined,
	class :: ['Coding'()] | undefined,
	code :: ['CodeableConcept'()] | undefined,
	dataPeriod :: 'Period'() | undefined,
	data :: ['Consent.Data'()] | undefined,
	provision :: ['Consent.Provision'()] | undefined}).

-type 'Consent.Provision'() :: #'Consent.Provision'{}.


-record('Consent.Verification', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	verified :: boolean(),
	verifiedWith :: 'Reference'() | undefined,
	verificationDate :: dateTime() | undefined}).

-type 'Consent.Verification'() :: #'Consent.Verification'{}.


-record('Consent.Policy', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	authority :: uri() | undefined,
	uri :: uri() | undefined}).

-type 'Consent.Policy'() :: #'Consent.Policy'{}.


-record('Consent', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	status :: 'ConsentState'(),
	scope :: 'CodeableConcept'(),
	category :: ['CodeableConcept'()],
	patient :: 'Reference'() | undefined,
	dateTime :: dateTime() | undefined,
	performer :: ['Reference'()] | undefined,
	organization :: ['Reference'()] | undefined,
	choice :: 'Reference'() | 'Attachment'() | undefined,
	policy :: ['Consent.Policy'()] | undefined,
	policyRule :: 'CodeableConcept'() | undefined,
	verification :: ['Consent.Verification'()] | undefined,
	provision :: 'Consent.Provision'() | undefined}).

-type 'Consent'() :: #'Consent'{}.


-record('Condition.Evidence', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	code :: ['CodeableConcept'()] | undefined,
	detail :: ['Reference'()] | undefined}).

-type 'Condition.Evidence'() :: #'Condition.Evidence'{}.


-record('Condition.Stage', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	summary :: 'CodeableConcept'() | undefined,
	assessment :: ['Reference'()] | undefined,
	type :: 'CodeableConcept'() | undefined}).

-type 'Condition.Stage'() :: #'Condition.Stage'{}.


-record('Condition', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	clinicalStatus :: 'CodeableConcept'() | undefined,
	verificationStatus :: 'CodeableConcept'() | undefined,
	category :: ['CodeableConcept'()] | undefined,
	severity :: 'CodeableConcept'() | undefined,
	code :: 'CodeableConcept'() | undefined,
	bodySite :: ['CodeableConcept'()] | undefined,
	subject :: 'Reference'(),
	encounter :: 'Reference'() | undefined,
	choice :: string() | 'Range'() | 'Period'() | dateTime() | 'Age'() | undefined,
	choice1 :: string() | 'Range'() | 'Period'() | dateTime() | 'Age'() | undefined,
	recordedDate :: dateTime() | undefined,
	recorder :: 'Reference'() | undefined,
	asserter :: 'Reference'() | undefined,
	stage :: ['Condition.Stage'()] | undefined,
	evidence :: ['Condition.Evidence'()] | undefined,
	note :: ['Annotation'()] | undefined}).

-type 'Condition'() :: #'Condition'{}.


-record('ConceptMapGroupUnmappedMode', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'ConceptMapGroupUnmappedMode'() :: #'ConceptMapGroupUnmappedMode'{}.


-record('ConceptMap.Unmapped', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	mode :: 'ConceptMapGroupUnmappedMode'(),
	code :: code() | undefined,
	display :: string() | undefined,
	url :: canonical() | undefined}).

-type 'ConceptMap.Unmapped'() :: #'ConceptMap.Unmapped'{}.


-record('ConceptMap.DependsOn', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	property :: uri(),
	system :: canonical() | undefined,
	value :: string(),
	display :: string() | undefined}).

-type 'ConceptMap.DependsOn'() :: #'ConceptMap.DependsOn'{}.


-record('ConceptMap.Target', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	code :: code() | undefined,
	display :: string() | undefined,
	equivalence :: 'ConceptMapEquivalence'(),
	comment :: string() | undefined,
	dependsOn :: ['ConceptMap.DependsOn'()] | undefined,
	product :: ['ConceptMap.DependsOn'()] | undefined}).

-type 'ConceptMap.Target'() :: #'ConceptMap.Target'{}.


-record('ConceptMap.Element', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	code :: code() | undefined,
	display :: string() | undefined,
	target :: ['ConceptMap.Target'()] | undefined}).

-type 'ConceptMap.Element'() :: #'ConceptMap.Element'{}.


-record('ConceptMap.Group', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	source :: uri() | undefined,
	sourceVersion :: string() | undefined,
	target :: uri() | undefined,
	targetVersion :: string() | undefined,
	element :: ['ConceptMap.Element'()],
	unmapped :: 'ConceptMap.Unmapped'() | undefined}).

-type 'ConceptMap.Group'() :: #'ConceptMap.Group'{}.


-record('ConceptMap', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	url :: uri() | undefined,
	identifier :: 'Identifier'() | undefined,
	version :: string() | undefined,
	name :: string() | undefined,
	title :: string() | undefined,
	status :: 'PublicationStatus'(),
	experimental :: boolean() | undefined,
	date :: dateTime() | undefined,
	publisher :: string() | undefined,
	contact :: ['ContactDetail'()] | undefined,
	description :: markdown() | undefined,
	useContext :: ['UsageContext'()] | undefined,
	jurisdiction :: ['CodeableConcept'()] | undefined,
	purpose :: markdown() | undefined,
	copyright :: markdown() | undefined,
	choice :: uri() | canonical() | undefined,
	choice1 :: uri() | canonical() | undefined,
	group :: ['ConceptMap.Group'()] | undefined}).

-type 'ConceptMap'() :: #'ConceptMap'{}.


-record('ListMode', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'ListMode'() :: #'ListMode'{}.


-record('CompositionAttestationMode', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'CompositionAttestationMode'() :: #'CompositionAttestationMode'{}.


-record('DocumentRelationshipType', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'DocumentRelationshipType'() :: #'DocumentRelationshipType'{}.


-record('CompositionStatus', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'CompositionStatus'() :: #'CompositionStatus'{}.


-record(vConfidentialityClassification, {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type vConfidentialityClassification() :: #vConfidentialityClassification{}.


-record('Composition.Section', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	title :: string() | undefined,
	code :: 'CodeableConcept'() | undefined,
	author :: ['Reference'()] | undefined,
	focus :: 'Reference'() | undefined,
	text :: 'Narrative'() | undefined,
	mode :: 'ListMode'() | undefined,
	orderedBy :: 'CodeableConcept'() | undefined,
	entry :: ['Reference'()] | undefined,
	emptyReason :: 'CodeableConcept'() | undefined,
	section :: ['Composition.Section'()] | undefined}).

-type 'Composition.Section'() :: #'Composition.Section'{}.


-record('Composition.Event', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	code :: ['CodeableConcept'()] | undefined,
	period :: 'Period'() | undefined,
	detail :: ['Reference'()] | undefined}).

-type 'Composition.Event'() :: #'Composition.Event'{}.


-record('Composition.RelatesTo', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	code :: 'DocumentRelationshipType'(),
	choice :: 'Reference'() | 'Identifier'()}).

-type 'Composition.RelatesTo'() :: #'Composition.RelatesTo'{}.


-record('Composition.Attester', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	mode :: 'CompositionAttestationMode'(),
	time :: dateTime() | undefined,
	party :: 'Reference'() | undefined}).

-type 'Composition.Attester'() :: #'Composition.Attester'{}.


-record('Composition', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: 'Identifier'() | undefined,
	status :: 'CompositionStatus'(),
	type :: 'CodeableConcept'(),
	category :: ['CodeableConcept'()] | undefined,
	subject :: 'Reference'() | undefined,
	encounter :: 'Reference'() | undefined,
	date :: dateTime(),
	author :: ['Reference'()],
	title :: string(),
	confidentiality :: vConfidentialityClassification() | undefined,
	attester :: ['Composition.Attester'()] | undefined,
	custodian :: 'Reference'() | undefined,
	relatesTo :: ['Composition.RelatesTo'()] | undefined,
	event :: ['Composition.Event'()] | undefined,
	section :: ['Composition.Section'()] | undefined}).

-type 'Composition'() :: #'Composition'{}.


-record('CompartmentType', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'CompartmentType'() :: #'CompartmentType'{}.


-record('CompartmentDefinition.Resource', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	code :: code(),
	param :: [string()] | undefined,
	documentation :: string() | undefined}).

-type 'CompartmentDefinition.Resource'() :: #'CompartmentDefinition.Resource'{}.


-record('CompartmentDefinition', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	url :: uri(),
	version :: string() | undefined,
	name :: string(),
	status :: 'PublicationStatus'(),
	experimental :: boolean() | undefined,
	date :: dateTime() | undefined,
	publisher :: string() | undefined,
	contact :: ['ContactDetail'()] | undefined,
	description :: markdown() | undefined,
	useContext :: ['UsageContext'()] | undefined,
	purpose :: markdown() | undefined,
	code :: 'CompartmentType'(),
	search :: boolean(),
	resource :: ['CompartmentDefinition.Resource'()] | undefined}).

-type 'CompartmentDefinition'() :: #'CompartmentDefinition'{}.


-record('CommunicationRequest.Payload', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	choice :: string() | 'Reference'() | 'Attachment'()}).

-type 'CommunicationRequest.Payload'() :: #'CommunicationRequest.Payload'{}.


-record('CommunicationRequest', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	basedOn :: ['Reference'()] | undefined,
	replaces :: ['Reference'()] | undefined,
	groupIdentifier :: 'Identifier'() | undefined,
	status :: 'RequestStatus'(),
	statusReason :: 'CodeableConcept'() | undefined,
	category :: ['CodeableConcept'()] | undefined,
	priority :: 'RequestPriority'() | undefined,
	doNotPerform :: boolean() | undefined,
	medium :: ['CodeableConcept'()] | undefined,
	subject :: 'Reference'() | undefined,
	about :: ['Reference'()] | undefined,
	encounter :: 'Reference'() | undefined,
	payload :: ['CommunicationRequest.Payload'()] | undefined,
	choice :: 'Period'() | dateTime() | undefined,
	authoredOn :: dateTime() | undefined,
	requester :: 'Reference'() | undefined,
	recipient :: ['Reference'()] | undefined,
	sender :: 'Reference'() | undefined,
	reasonCode :: ['CodeableConcept'()] | undefined,
	reasonReference :: ['Reference'()] | undefined,
	note :: ['Annotation'()] | undefined}).

-type 'CommunicationRequest'() :: #'CommunicationRequest'{}.


-record('EventStatus', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'EventStatus'() :: #'EventStatus'{}.


-record('Communication.Payload', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	choice :: string() | 'Reference'() | 'Attachment'()}).

-type 'Communication.Payload'() :: #'Communication.Payload'{}.


-record('Communication', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	instantiatesCanonical :: [canonical()] | undefined,
	instantiatesUri :: [uri()] | undefined,
	basedOn :: ['Reference'()] | undefined,
	partOf :: ['Reference'()] | undefined,
	inResponseTo :: ['Reference'()] | undefined,
	status :: 'EventStatus'(),
	statusReason :: 'CodeableConcept'() | undefined,
	category :: ['CodeableConcept'()] | undefined,
	priority :: 'RequestPriority'() | undefined,
	medium :: ['CodeableConcept'()] | undefined,
	subject :: 'Reference'() | undefined,
	topic :: 'CodeableConcept'() | undefined,
	about :: ['Reference'()] | undefined,
	encounter :: 'Reference'() | undefined,
	sent :: dateTime() | undefined,
	received :: dateTime() | undefined,
	recipient :: ['Reference'()] | undefined,
	sender :: 'Reference'() | undefined,
	reasonCode :: ['CodeableConcept'()] | undefined,
	reasonReference :: ['Reference'()] | undefined,
	payload :: ['Communication.Payload'()] | undefined,
	note :: ['Annotation'()] | undefined}).

-type 'Communication'() :: #'Communication'{}.


-record('CodeSystemContentMode', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'CodeSystemContentMode'() :: #'CodeSystemContentMode'{}.


-record('CodeSystemHierarchyMeaning', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'CodeSystemHierarchyMeaning'() :: #'CodeSystemHierarchyMeaning'{}.


-record('PropertyType', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'PropertyType'() :: #'PropertyType'{}.


-record('FilterOperator', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'FilterOperator'() :: #'FilterOperator'{}.


-record('CodeSystem.Property1', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	code :: code(),
	choice :: string() | integer() | decimal() | dateTime() | 'Coding'() | code() | boolean()}).

-type 'CodeSystem.Property1'() :: #'CodeSystem.Property1'{}.


-record('CodeSystem.Designation', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	language :: code() | undefined,
	use :: 'Coding'() | undefined,
	value :: string()}).

-type 'CodeSystem.Designation'() :: #'CodeSystem.Designation'{}.


-record('CodeSystem.Concept', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	code :: code(),
	display :: string() | undefined,
	definition :: string() | undefined,
	designation :: ['CodeSystem.Designation'()] | undefined,
	property :: ['CodeSystem.Property1'()] | undefined,
	concept :: ['CodeSystem.Concept'()] | undefined}).

-type 'CodeSystem.Concept'() :: #'CodeSystem.Concept'{}.


-record('CodeSystem.Property', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	code :: code(),
	uri :: uri() | undefined,
	description :: string() | undefined,
	type :: 'PropertyType'()}).

-type 'CodeSystem.Property'() :: #'CodeSystem.Property'{}.


-record('CodeSystem.Filter', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	code :: code(),
	description :: string() | undefined,
	operator :: ['FilterOperator'()],
	value :: string()}).

-type 'CodeSystem.Filter'() :: #'CodeSystem.Filter'{}.


-record('CodeSystem', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	url :: uri() | undefined,
	identifier :: ['Identifier'()] | undefined,
	version :: string() | undefined,
	name :: string() | undefined,
	title :: string() | undefined,
	status :: 'PublicationStatus'(),
	experimental :: boolean() | undefined,
	date :: dateTime() | undefined,
	publisher :: string() | undefined,
	contact :: ['ContactDetail'()] | undefined,
	description :: markdown() | undefined,
	useContext :: ['UsageContext'()] | undefined,
	jurisdiction :: ['CodeableConcept'()] | undefined,
	purpose :: markdown() | undefined,
	copyright :: markdown() | undefined,
	caseSensitive :: boolean() | undefined,
	valueSet :: canonical() | undefined,
	hierarchyMeaning :: 'CodeSystemHierarchyMeaning'() | undefined,
	compositional :: boolean() | undefined,
	versionNeeded :: boolean() | undefined,
	content :: 'CodeSystemContentMode'(),
	supplements :: canonical() | undefined,
	count :: unsignedInt() | undefined,
	filter :: ['CodeSystem.Filter'()] | undefined,
	property :: ['CodeSystem.Property'()] | undefined,
	concept :: ['CodeSystem.Concept'()] | undefined}).

-type 'CodeSystem'() :: #'CodeSystem'{}.


-record('ClinicalImpressionStatus', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'ClinicalImpressionStatus'() :: #'ClinicalImpressionStatus'{}.


-record('ClinicalImpression.Finding', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	itemCodeableConcept :: 'CodeableConcept'() | undefined,
	itemReference :: 'Reference'() | undefined,
	basis :: string() | undefined}).

-type 'ClinicalImpression.Finding'() :: #'ClinicalImpression.Finding'{}.


-record('ClinicalImpression.Investigation', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	code :: 'CodeableConcept'(),
	item :: ['Reference'()] | undefined}).

-type 'ClinicalImpression.Investigation'() :: #'ClinicalImpression.Investigation'{}.


-record('ClinicalImpression', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	status :: 'ClinicalImpressionStatus'(),
	statusReason :: 'CodeableConcept'() | undefined,
	code :: 'CodeableConcept'() | undefined,
	description :: string() | undefined,
	subject :: 'Reference'(),
	encounter :: 'Reference'() | undefined,
	choice :: 'Period'() | dateTime() | undefined,
	date :: dateTime() | undefined,
	assessor :: 'Reference'() | undefined,
	previous :: 'Reference'() | undefined,
	problem :: ['Reference'()] | undefined,
	investigation :: ['ClinicalImpression.Investigation'()] | undefined,
	protocol :: [uri()] | undefined,
	summary :: string() | undefined,
	finding :: ['ClinicalImpression.Finding'()] | undefined,
	prognosisCodeableConcept :: ['CodeableConcept'()] | undefined,
	prognosisReference :: ['Reference'()] | undefined,
	supportingInfo :: ['Reference'()] | undefined,
	note :: ['Annotation'()] | undefined}).

-type 'ClinicalImpression'() :: #'ClinicalImpression'{}.


-record('ClaimProcessingCodes', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'ClaimProcessingCodes'() :: #'ClaimProcessingCodes'{}.


-record('ClaimResponse.Error', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	itemSequence :: positiveInt() | undefined,
	detailSequence :: positiveInt() | undefined,
	subDetailSequence :: positiveInt() | undefined,
	code :: 'CodeableConcept'()}).

-type 'ClaimResponse.Error'() :: #'ClaimResponse.Error'{}.


-record('ClaimResponse.Insurance', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	sequence :: positiveInt(),
	focal :: boolean(),
	coverage :: 'Reference'(),
	businessArrangement :: string() | undefined,
	claimResponse :: 'Reference'() | undefined}).

-type 'ClaimResponse.Insurance'() :: #'ClaimResponse.Insurance'{}.


-record('ClaimResponse.ProcessNote', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	number :: positiveInt() | undefined,
	type :: 'NoteType'() | undefined,
	text :: string(),
	language :: 'CodeableConcept'() | undefined}).

-type 'ClaimResponse.ProcessNote'() :: #'ClaimResponse.ProcessNote'{}.


-record('ClaimResponse.Payment', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: 'CodeableConcept'(),
	adjustment :: 'Money'() | undefined,
	adjustmentReason :: 'CodeableConcept'() | undefined,
	date :: date() | undefined,
	amount :: 'Money'(),
	identifier :: 'Identifier'() | undefined}).

-type 'ClaimResponse.Payment'() :: #'ClaimResponse.Payment'{}.


-record('ClaimResponse.Total', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	category :: 'CodeableConcept'(),
	amount :: 'Money'()}).

-type 'ClaimResponse.Total'() :: #'ClaimResponse.Total'{}.


-record('ClaimResponse.SubDetail1', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	productOrService :: 'CodeableConcept'(),
	modifier :: ['CodeableConcept'()] | undefined,
	quantity :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	unitPrice :: 'Money'() | undefined,
	factor :: decimal() | undefined,
	net :: 'Money'() | undefined,
	noteNumber :: [positiveInt()] | undefined,
	adjudication :: ['ClaimResponse.Adjudication'()]}).

-type 'ClaimResponse.SubDetail1'() :: #'ClaimResponse.SubDetail1'{}.


-record('ClaimResponse.Detail1', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	productOrService :: 'CodeableConcept'(),
	modifier :: ['CodeableConcept'()] | undefined,
	quantity :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	unitPrice :: 'Money'() | undefined,
	factor :: decimal() | undefined,
	net :: 'Money'() | undefined,
	noteNumber :: [positiveInt()] | undefined,
	adjudication :: ['ClaimResponse.Adjudication'()],
	subDetail :: ['ClaimResponse.SubDetail1'()] | undefined}).

-type 'ClaimResponse.Detail1'() :: #'ClaimResponse.Detail1'{}.


-record('ClaimResponse.AddItem', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	itemSequence :: [positiveInt()] | undefined,
	detailSequence :: [positiveInt()] | undefined,
	subdetailSequence :: [positiveInt()] | undefined,
	provider :: ['Reference'()] | undefined,
	productOrService :: 'CodeableConcept'(),
	modifier :: ['CodeableConcept'()] | undefined,
	programCode :: ['CodeableConcept'()] | undefined,
	choice :: 'Period'() | date() | undefined,
	choice1 :: 'Reference'() | 'CodeableConcept'() | 'Address'() | undefined,
	quantity :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	unitPrice :: 'Money'() | undefined,
	factor :: decimal() | undefined,
	net :: 'Money'() | undefined,
	bodySite :: 'CodeableConcept'() | undefined,
	subSite :: ['CodeableConcept'()] | undefined,
	noteNumber :: [positiveInt()] | undefined,
	adjudication :: ['ClaimResponse.Adjudication'()],
	detail :: ['ClaimResponse.Detail1'()] | undefined}).

-type 'ClaimResponse.AddItem'() :: #'ClaimResponse.AddItem'{}.


-record('ClaimResponse.SubDetail', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	subDetailSequence :: positiveInt(),
	noteNumber :: [positiveInt()] | undefined,
	adjudication :: ['ClaimResponse.Adjudication'()] | undefined}).

-type 'ClaimResponse.SubDetail'() :: #'ClaimResponse.SubDetail'{}.


-record('ClaimResponse.Detail', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	detailSequence :: positiveInt(),
	noteNumber :: [positiveInt()] | undefined,
	adjudication :: ['ClaimResponse.Adjudication'()],
	subDetail :: ['ClaimResponse.SubDetail'()] | undefined}).

-type 'ClaimResponse.Detail'() :: #'ClaimResponse.Detail'{}.


-record('ClaimResponse.Adjudication', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	category :: 'CodeableConcept'(),
	reason :: 'CodeableConcept'() | undefined,
	amount :: 'Money'() | undefined,
	value :: decimal() | undefined}).

-type 'ClaimResponse.Adjudication'() :: #'ClaimResponse.Adjudication'{}.


-record('ClaimResponse.Item', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	itemSequence :: positiveInt(),
	noteNumber :: [positiveInt()] | undefined,
	adjudication :: ['ClaimResponse.Adjudication'()],
	detail :: ['ClaimResponse.Detail'()] | undefined}).

-type 'ClaimResponse.Item'() :: #'ClaimResponse.Item'{}.


-record('ClaimResponse', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	status :: 'FinancialResourceStatusCodes'(),
	type :: 'CodeableConcept'(),
	subType :: 'CodeableConcept'() | undefined,
	use :: 'Use'(),
	patient :: 'Reference'(),
	created :: dateTime(),
	insurer :: 'Reference'(),
	requestor :: 'Reference'() | undefined,
	request :: 'Reference'() | undefined,
	outcome :: 'ClaimProcessingCodes'(),
	disposition :: string() | undefined,
	preAuthRef :: string() | undefined,
	preAuthPeriod :: 'Period'() | undefined,
	payeeType :: 'CodeableConcept'() | undefined,
	item :: ['ClaimResponse.Item'()] | undefined,
	addItem :: ['ClaimResponse.AddItem'()] | undefined,
	adjudication :: ['ClaimResponse.Adjudication'()] | undefined,
	total :: ['ClaimResponse.Total'()] | undefined,
	payment :: 'ClaimResponse.Payment'() | undefined,
	fundsReserve :: 'CodeableConcept'() | undefined,
	formCode :: 'CodeableConcept'() | undefined,
	form :: 'Attachment'() | undefined,
	processNote :: ['ClaimResponse.ProcessNote'()] | undefined,
	communicationRequest :: ['Reference'()] | undefined,
	insurance :: ['ClaimResponse.Insurance'()] | undefined,
	error :: ['ClaimResponse.Error'()] | undefined}).

-type 'ClaimResponse'() :: #'ClaimResponse'{}.


-record('FinancialResourceStatusCodes', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'FinancialResourceStatusCodes'() :: #'FinancialResourceStatusCodes'{}.


-record('Use', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'Use'() :: #'Use'{}.


-record('Claim.SubDetail', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	sequence :: positiveInt(),
	revenue :: 'CodeableConcept'() | undefined,
	category :: 'CodeableConcept'() | undefined,
	productOrService :: 'CodeableConcept'(),
	modifier :: ['CodeableConcept'()] | undefined,
	programCode :: ['CodeableConcept'()] | undefined,
	quantity :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	unitPrice :: 'Money'() | undefined,
	factor :: decimal() | undefined,
	net :: 'Money'() | undefined,
	udi :: ['Reference'()] | undefined}).

-type 'Claim.SubDetail'() :: #'Claim.SubDetail'{}.


-record('Claim.Detail', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	sequence :: positiveInt(),
	revenue :: 'CodeableConcept'() | undefined,
	category :: 'CodeableConcept'() | undefined,
	productOrService :: 'CodeableConcept'(),
	modifier :: ['CodeableConcept'()] | undefined,
	programCode :: ['CodeableConcept'()] | undefined,
	quantity :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	unitPrice :: 'Money'() | undefined,
	factor :: decimal() | undefined,
	net :: 'Money'() | undefined,
	udi :: ['Reference'()] | undefined,
	subDetail :: ['Claim.SubDetail'()] | undefined}).

-type 'Claim.Detail'() :: #'Claim.Detail'{}.


-record('Claim.Item', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	sequence :: positiveInt(),
	careTeamSequence :: [positiveInt()] | undefined,
	diagnosisSequence :: [positiveInt()] | undefined,
	procedureSequence :: [positiveInt()] | undefined,
	informationSequence :: [positiveInt()] | undefined,
	revenue :: 'CodeableConcept'() | undefined,
	category :: 'CodeableConcept'() | undefined,
	productOrService :: 'CodeableConcept'(),
	modifier :: ['CodeableConcept'()] | undefined,
	programCode :: ['CodeableConcept'()] | undefined,
	choice :: 'Period'() | date() | undefined,
	choice1 :: 'Reference'() | 'CodeableConcept'() | 'Address'() | undefined,
	quantity :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	unitPrice :: 'Money'() | undefined,
	factor :: decimal() | undefined,
	net :: 'Money'() | undefined,
	udi :: ['Reference'()] | undefined,
	bodySite :: 'CodeableConcept'() | undefined,
	subSite :: ['CodeableConcept'()] | undefined,
	encounter :: ['Reference'()] | undefined,
	detail :: ['Claim.Detail'()] | undefined}).

-type 'Claim.Item'() :: #'Claim.Item'{}.


-record('Claim.Accident', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	date :: date(),
	type :: 'CodeableConcept'() | undefined,
	choice :: 'Reference'() | 'Address'() | undefined}).

-type 'Claim.Accident'() :: #'Claim.Accident'{}.


-record('Claim.Insurance', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	sequence :: positiveInt(),
	focal :: boolean(),
	identifier :: 'Identifier'() | undefined,
	coverage :: 'Reference'(),
	businessArrangement :: string() | undefined,
	preAuthRef :: [string()] | undefined,
	claimResponse :: 'Reference'() | undefined}).

-type 'Claim.Insurance'() :: #'Claim.Insurance'{}.


-record('Claim.Procedure', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	sequence :: positiveInt(),
	type :: ['CodeableConcept'()] | undefined,
	date :: dateTime() | undefined,
	choice :: 'Reference'() | 'CodeableConcept'(),
	udi :: ['Reference'()] | undefined}).

-type 'Claim.Procedure'() :: #'Claim.Procedure'{}.


-record('Claim.Diagnosis', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	sequence :: positiveInt(),
	choice :: 'Reference'() | 'CodeableConcept'(),
	type :: ['CodeableConcept'()] | undefined,
	onAdmission :: 'CodeableConcept'() | undefined,
	packageCode :: 'CodeableConcept'() | undefined}).

-type 'Claim.Diagnosis'() :: #'Claim.Diagnosis'{}.


-record('Claim.SupportingInfo', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	sequence :: positiveInt(),
	category :: 'CodeableConcept'(),
	code :: 'CodeableConcept'() | undefined,
	choice :: 'Period'() | date() | undefined,
	choice1 :: string() | 'Reference'() | 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | boolean() | 'Attachment'() | undefined,
	reason :: 'CodeableConcept'() | undefined}).

-type 'Claim.SupportingInfo'() :: #'Claim.SupportingInfo'{}.


-record('Claim.CareTeam', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	sequence :: positiveInt(),
	provider :: 'Reference'(),
	responsible :: boolean() | undefined,
	role :: 'CodeableConcept'() | undefined,
	qualification :: 'CodeableConcept'() | undefined}).

-type 'Claim.CareTeam'() :: #'Claim.CareTeam'{}.


-record('Claim.Payee', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: 'CodeableConcept'(),
	party :: 'Reference'() | undefined}).

-type 'Claim.Payee'() :: #'Claim.Payee'{}.


-record('Claim.Related', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	claim :: 'Reference'() | undefined,
	relationship :: 'CodeableConcept'() | undefined,
	reference :: 'Identifier'() | undefined}).

-type 'Claim.Related'() :: #'Claim.Related'{}.


-record('Claim', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	status :: 'FinancialResourceStatusCodes'(),
	type :: 'CodeableConcept'(),
	subType :: 'CodeableConcept'() | undefined,
	use :: 'Use'(),
	patient :: 'Reference'(),
	billablePeriod :: 'Period'() | undefined,
	created :: dateTime(),
	enterer :: 'Reference'() | undefined,
	insurer :: 'Reference'() | undefined,
	provider :: 'Reference'(),
	priority :: 'CodeableConcept'(),
	fundsReserve :: 'CodeableConcept'() | undefined,
	related :: ['Claim.Related'()] | undefined,
	prescription :: 'Reference'() | undefined,
	originalPrescription :: 'Reference'() | undefined,
	payee :: 'Claim.Payee'() | undefined,
	referral :: 'Reference'() | undefined,
	facility :: 'Reference'() | undefined,
	careTeam :: ['Claim.CareTeam'()] | undefined,
	supportingInfo :: ['Claim.SupportingInfo'()] | undefined,
	diagnosis :: ['Claim.Diagnosis'()] | undefined,
	procedure :: ['Claim.Procedure'()] | undefined,
	insurance :: ['Claim.Insurance'()],
	accident :: 'Claim.Accident'() | undefined,
	item :: ['Claim.Item'()] | undefined,
	total :: 'Money'() | undefined}).

-type 'Claim'() :: #'Claim'{}.


-record('InvoicePriceComponentType', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'InvoicePriceComponentType'() :: #'InvoicePriceComponentType'{}.


-record('ChargeItemDefinition.PriceComponent', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: 'InvoicePriceComponentType'(),
	code :: 'CodeableConcept'() | undefined,
	factor :: decimal() | undefined,
	amount :: 'Money'() | undefined}).

-type 'ChargeItemDefinition.PriceComponent'() :: #'ChargeItemDefinition.PriceComponent'{}.


-record('ChargeItemDefinition.PropertyGroup', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	applicability :: ['ChargeItemDefinition.Applicability'()] | undefined,
	priceComponent :: ['ChargeItemDefinition.PriceComponent'()] | undefined}).

-type 'ChargeItemDefinition.PropertyGroup'() :: #'ChargeItemDefinition.PropertyGroup'{}.


-record('ChargeItemDefinition.Applicability', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	description :: string() | undefined,
	language :: string() | undefined,
	expression :: string() | undefined}).

-type 'ChargeItemDefinition.Applicability'() :: #'ChargeItemDefinition.Applicability'{}.


-record('ChargeItemDefinition', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	url :: uri(),
	identifier :: ['Identifier'()] | undefined,
	version :: string() | undefined,
	title :: string() | undefined,
	derivedFromUri :: [uri()] | undefined,
	partOf :: [canonical()] | undefined,
	replaces :: [canonical()] | undefined,
	status :: 'PublicationStatus'(),
	experimental :: boolean() | undefined,
	date :: dateTime() | undefined,
	publisher :: string() | undefined,
	contact :: ['ContactDetail'()] | undefined,
	description :: markdown() | undefined,
	useContext :: ['UsageContext'()] | undefined,
	jurisdiction :: ['CodeableConcept'()] | undefined,
	copyright :: markdown() | undefined,
	approvalDate :: date() | undefined,
	lastReviewDate :: date() | undefined,
	effectivePeriod :: 'Period'() | undefined,
	code :: 'CodeableConcept'() | undefined,
	instance :: ['Reference'()] | undefined,
	applicability :: ['ChargeItemDefinition.Applicability'()] | undefined,
	propertyGroup :: ['ChargeItemDefinition.PropertyGroup'()] | undefined}).

-type 'ChargeItemDefinition'() :: #'ChargeItemDefinition'{}.


-record('ChargeItemStatus', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'ChargeItemStatus'() :: #'ChargeItemStatus'{}.


-record('ChargeItem.Performer', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	function :: 'CodeableConcept'() | undefined,
	actor :: 'Reference'()}).

-type 'ChargeItem.Performer'() :: #'ChargeItem.Performer'{}.


-record('ChargeItem', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	definitionUri :: [uri()] | undefined,
	definitionCanonical :: [canonical()] | undefined,
	status :: 'ChargeItemStatus'(),
	partOf :: ['Reference'()] | undefined,
	code :: 'CodeableConcept'(),
	subject :: 'Reference'(),
	context :: 'Reference'() | undefined,
	choice :: 'Timing'() | 'Period'() | dateTime() | undefined,
	performer :: ['ChargeItem.Performer'()] | undefined,
	performingOrganization :: 'Reference'() | undefined,
	requestingOrganization :: 'Reference'() | undefined,
	costCenter :: 'Reference'() | undefined,
	quantity :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	bodysite :: ['CodeableConcept'()] | undefined,
	factorOverride :: decimal() | undefined,
	priceOverride :: 'Money'() | undefined,
	overrideReason :: string() | undefined,
	enterer :: 'Reference'() | undefined,
	enteredDate :: dateTime() | undefined,
	reason :: ['CodeableConcept'()] | undefined,
	service :: ['Reference'()] | undefined,
	choice1 :: 'Reference'() | 'CodeableConcept'() | undefined,
	account :: ['Reference'()] | undefined,
	note :: ['Annotation'()] | undefined,
	supportingInformation :: ['Reference'()] | undefined}).

-type 'ChargeItem'() :: #'ChargeItem'{}.


-record('CatalogEntryRelationType', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'CatalogEntryRelationType'() :: #'CatalogEntryRelationType'{}.


-record('CatalogEntry.RelatedEntry', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	relationtype :: 'CatalogEntryRelationType'(),
	item :: 'Reference'()}).

-type 'CatalogEntry.RelatedEntry'() :: #'CatalogEntry.RelatedEntry'{}.


-record('CatalogEntry', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	type :: 'CodeableConcept'() | undefined,
	orderable :: boolean(),
	referencedItem :: 'Reference'(),
	additionalIdentifier :: ['Identifier'()] | undefined,
	classification :: ['CodeableConcept'()] | undefined,
	status :: 'PublicationStatus'() | undefined,
	validityPeriod :: 'Period'() | undefined,
	validTo :: dateTime() | undefined,
	lastUpdated :: dateTime() | undefined,
	additionalCharacteristic :: ['CodeableConcept'()] | undefined,
	additionalClassification :: ['CodeableConcept'()] | undefined,
	relatedEntry :: ['CatalogEntry.RelatedEntry'()] | undefined}).

-type 'CatalogEntry'() :: #'CatalogEntry'{}.


-record('CareTeamStatus', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'CareTeamStatus'() :: #'CareTeamStatus'{}.


-record('CareTeam.Participant', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	role :: ['CodeableConcept'()] | undefined,
	member :: 'Reference'() | undefined,
	onBehalfOf :: 'Reference'() | undefined,
	period :: 'Period'() | undefined}).

-type 'CareTeam.Participant'() :: #'CareTeam.Participant'{}.


-record('CareTeam', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	status :: 'CareTeamStatus'() | undefined,
	category :: ['CodeableConcept'()] | undefined,
	name :: string() | undefined,
	subject :: 'Reference'() | undefined,
	encounter :: 'Reference'() | undefined,
	period :: 'Period'() | undefined,
	participant :: ['CareTeam.Participant'()] | undefined,
	reasonCode :: ['CodeableConcept'()] | undefined,
	reasonReference :: ['Reference'()] | undefined,
	managingOrganization :: ['Reference'()] | undefined,
	telecom :: ['ContactPoint'()] | undefined,
	note :: ['Annotation'()] | undefined}).

-type 'CareTeam'() :: #'CareTeam'{}.


-record('RequestStatus', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'RequestStatus'() :: #'RequestStatus'{}.


-record('CarePlanIntent', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'CarePlanIntent'() :: #'CarePlanIntent'{}.


-record('CarePlanActivityStatus', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'CarePlanActivityStatus'() :: #'CarePlanActivityStatus'{}.


-record('CarePlanActivityKind', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'CarePlanActivityKind'() :: #'CarePlanActivityKind'{}.


-record('CarePlan.Detail', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	kind :: 'CarePlanActivityKind'() | undefined,
	instantiatesCanonical :: [canonical()] | undefined,
	instantiatesUri :: [uri()] | undefined,
	code :: 'CodeableConcept'() | undefined,
	reasonCode :: ['CodeableConcept'()] | undefined,
	reasonReference :: ['Reference'()] | undefined,
	goal :: ['Reference'()] | undefined,
	status :: 'CarePlanActivityStatus'(),
	statusReason :: 'CodeableConcept'() | undefined,
	doNotPerform :: boolean() | undefined,
	choice :: 'Timing'() | string() | 'Period'() | undefined,
	location :: 'Reference'() | undefined,
	performer :: ['Reference'()] | undefined,
	choice1 :: 'Reference'() | 'CodeableConcept'() | undefined,
	dailyAmount :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	quantity :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	description :: string() | undefined}).

-type 'CarePlan.Detail'() :: #'CarePlan.Detail'{}.


-record('CarePlan.Activity', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	outcomeCodeableConcept :: ['CodeableConcept'()] | undefined,
	outcomeReference :: ['Reference'()] | undefined,
	progress :: ['Annotation'()] | undefined,
	reference :: 'Reference'() | undefined,
	detail :: 'CarePlan.Detail'() | undefined}).

-type 'CarePlan.Activity'() :: #'CarePlan.Activity'{}.


-record('CarePlan', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	instantiatesCanonical :: [canonical()] | undefined,
	instantiatesUri :: [uri()] | undefined,
	basedOn :: ['Reference'()] | undefined,
	replaces :: ['Reference'()] | undefined,
	partOf :: ['Reference'()] | undefined,
	status :: 'RequestStatus'(),
	intent :: 'CarePlanIntent'(),
	category :: ['CodeableConcept'()] | undefined,
	title :: string() | undefined,
	description :: string() | undefined,
	subject :: 'Reference'(),
	encounter :: 'Reference'() | undefined,
	period :: 'Period'() | undefined,
	created :: dateTime() | undefined,
	author :: 'Reference'() | undefined,
	contributor :: ['Reference'()] | undefined,
	careTeam :: ['Reference'()] | undefined,
	addresses :: ['Reference'()] | undefined,
	supportingInfo :: ['Reference'()] | undefined,
	goal :: ['Reference'()] | undefined,
	activity :: ['CarePlan.Activity'()] | undefined,
	note :: ['Annotation'()] | undefined}).

-type 'CarePlan'() :: #'CarePlan'{}.


-record('ConditionalDeleteStatus', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'ConditionalDeleteStatus'() :: #'ConditionalDeleteStatus'{}.


-record('ReferenceHandlingPolicy', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'ReferenceHandlingPolicy'() :: #'ReferenceHandlingPolicy'{}.


-record('ConditionalReadStatus', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'ConditionalReadStatus'() :: #'ConditionalReadStatus'{}.


-record('SystemRestfulInteraction', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'SystemRestfulInteraction'() :: #'SystemRestfulInteraction'{}.


-record('TypeRestfulInteraction', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'TypeRestfulInteraction'() :: #'TypeRestfulInteraction'{}.


-record('RestfulCapabilityMode', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'RestfulCapabilityMode'() :: #'RestfulCapabilityMode'{}.


-record('DocumentMode', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'DocumentMode'() :: #'DocumentMode'{}.


-record('ResourceVersionPolicy', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'ResourceVersionPolicy'() :: #'ResourceVersionPolicy'{}.


-record('EventCapabilityMode', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'EventCapabilityMode'() :: #'EventCapabilityMode'{}.


-record('CapabilityStatementKind', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'CapabilityStatementKind'() :: #'CapabilityStatementKind'{}.


-record('CapabilityStatement.Document', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	mode :: 'DocumentMode'(),
	documentation :: markdown() | undefined,
	profile :: canonical()}).

-type 'CapabilityStatement.Document'() :: #'CapabilityStatement.Document'{}.


-record('CapabilityStatement.SupportedMessage', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	mode :: 'EventCapabilityMode'(),
	definition :: canonical()}).

-type 'CapabilityStatement.SupportedMessage'() :: #'CapabilityStatement.SupportedMessage'{}.


-record('CapabilityStatement.Endpoint', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	protocol :: 'Coding'(),
	address :: url()}).

-type 'CapabilityStatement.Endpoint'() :: #'CapabilityStatement.Endpoint'{}.


-record('CapabilityStatement.Messaging', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	endpoint :: ['CapabilityStatement.Endpoint'()] | undefined,
	reliableCache :: unsignedInt() | undefined,
	documentation :: markdown() | undefined,
	supportedMessage :: ['CapabilityStatement.SupportedMessage'()] | undefined}).

-type 'CapabilityStatement.Messaging'() :: #'CapabilityStatement.Messaging'{}.


-record('CapabilityStatement.Interaction1', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	code :: 'SystemRestfulInteraction'(),
	documentation :: markdown() | undefined}).

-type 'CapabilityStatement.Interaction1'() :: #'CapabilityStatement.Interaction1'{}.


-record('CapabilityStatement.Operation', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	name :: string(),
	definition :: canonical(),
	documentation :: markdown() | undefined}).

-type 'CapabilityStatement.Operation'() :: #'CapabilityStatement.Operation'{}.


-record('CapabilityStatement.SearchParam', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	name :: string(),
	definition :: canonical() | undefined,
	type :: 'SearchParamType'(),
	documentation :: markdown() | undefined}).

-type 'CapabilityStatement.SearchParam'() :: #'CapabilityStatement.SearchParam'{}.


-record('CapabilityStatement.Interaction', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	code :: 'TypeRestfulInteraction'(),
	documentation :: markdown() | undefined}).

-type 'CapabilityStatement.Interaction'() :: #'CapabilityStatement.Interaction'{}.


-record('CapabilityStatement.Resource', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: code(),
	profile :: canonical() | undefined,
	supportedProfile :: [canonical()] | undefined,
	documentation :: markdown() | undefined,
	interaction :: ['CapabilityStatement.Interaction'()] | undefined,
	versioning :: 'ResourceVersionPolicy'() | undefined,
	readHistory :: boolean() | undefined,
	updateCreate :: boolean() | undefined,
	conditionalCreate :: boolean() | undefined,
	conditionalRead :: 'ConditionalReadStatus'() | undefined,
	conditionalUpdate :: boolean() | undefined,
	conditionalDelete :: 'ConditionalDeleteStatus'() | undefined,
	referencePolicy :: ['ReferenceHandlingPolicy'()] | undefined,
	searchInclude :: [string()] | undefined,
	searchRevInclude :: [string()] | undefined,
	searchParam :: ['CapabilityStatement.SearchParam'()] | undefined,
	operation :: ['CapabilityStatement.Operation'()] | undefined}).

-type 'CapabilityStatement.Resource'() :: #'CapabilityStatement.Resource'{}.


-record('CapabilityStatement.Security', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	cors :: boolean() | undefined,
	service :: ['CodeableConcept'()] | undefined,
	description :: markdown() | undefined}).

-type 'CapabilityStatement.Security'() :: #'CapabilityStatement.Security'{}.


-record('CapabilityStatement.Rest', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	mode :: 'RestfulCapabilityMode'(),
	documentation :: markdown() | undefined,
	security :: 'CapabilityStatement.Security'() | undefined,
	resource :: ['CapabilityStatement.Resource'()] | undefined,
	interaction :: ['CapabilityStatement.Interaction1'()] | undefined,
	searchParam :: ['CapabilityStatement.SearchParam'()] | undefined,
	operation :: ['CapabilityStatement.Operation'()] | undefined,
	compartment :: [canonical()] | undefined}).

-type 'CapabilityStatement.Rest'() :: #'CapabilityStatement.Rest'{}.


-record('CapabilityStatement.Implementation', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	description :: string(),
	url :: url() | undefined,
	custodian :: 'Reference'() | undefined}).

-type 'CapabilityStatement.Implementation'() :: #'CapabilityStatement.Implementation'{}.


-record('CapabilityStatement.Software', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	name :: string(),
	version :: string() | undefined,
	releaseDate :: dateTime() | undefined}).

-type 'CapabilityStatement.Software'() :: #'CapabilityStatement.Software'{}.


-record('CapabilityStatement', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	url :: uri() | undefined,
	version :: string() | undefined,
	name :: string() | undefined,
	title :: string() | undefined,
	status :: 'PublicationStatus'(),
	experimental :: boolean() | undefined,
	date :: dateTime(),
	publisher :: string() | undefined,
	contact :: ['ContactDetail'()] | undefined,
	description :: markdown() | undefined,
	useContext :: ['UsageContext'()] | undefined,
	jurisdiction :: ['CodeableConcept'()] | undefined,
	purpose :: markdown() | undefined,
	copyright :: markdown() | undefined,
	kind :: 'CapabilityStatementKind'(),
	instantiates :: [canonical()] | undefined,
	imports :: [canonical()] | undefined,
	software :: 'CapabilityStatement.Software'() | undefined,
	implementation :: 'CapabilityStatement.Implementation'() | undefined,
	fhirVersion :: 'FHIRVersion'(),
	format :: [code()],
	patchFormat :: [code()] | undefined,
	implementationGuide :: [canonical()] | undefined,
	rest :: ['CapabilityStatement.Rest'()] | undefined,
	messaging :: ['CapabilityStatement.Messaging'()] | undefined,
	document :: ['CapabilityStatement.Document'()] | undefined}).

-type 'CapabilityStatement'() :: #'CapabilityStatement'{}.


-record('SearchEntryMode', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'SearchEntryMode'() :: #'SearchEntryMode'{}.


-record('BundleType', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'BundleType'() :: #'BundleType'{}.


-record('HTTPVerb', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'HTTPVerb'() :: #'HTTPVerb'{}.


-record('Bundle.Response', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	status :: string(),
	location :: uri() | undefined,
	etag :: string() | undefined,
	lastModified :: instant() | undefined,
	outcome :: 'ResourceContainer'() | undefined}).

-type 'Bundle.Response'() :: #'Bundle.Response'{}.


-record('Bundle.Request', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	method :: 'HTTPVerb'(),
	url :: uri(),
	ifNoneMatch :: string() | undefined,
	ifModifiedSince :: instant() | undefined,
	ifMatch :: string() | undefined,
	ifNoneExist :: string() | undefined}).

-type 'Bundle.Request'() :: #'Bundle.Request'{}.


-record('Bundle.Search', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	mode :: 'SearchEntryMode'() | undefined,
	score :: decimal() | undefined}).

-type 'Bundle.Search'() :: #'Bundle.Search'{}.


-record('Bundle.Entry', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	link :: ['Bundle.Link'()] | undefined,
	fullUrl :: uri() | undefined,
	resource :: 'ResourceContainer'() | undefined,
	search :: 'Bundle.Search'() | undefined,
	request :: 'Bundle.Request'() | undefined,
	response :: 'Bundle.Response'() | undefined}).

-type 'Bundle.Entry'() :: #'Bundle.Entry'{}.


-record('Bundle.Link', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	relation :: string(),
	url :: uri()}).

-type 'Bundle.Link'() :: #'Bundle.Link'{}.


-record('Bundle', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	identifier :: 'Identifier'() | undefined,
	type :: 'BundleType'(),
	timestamp :: instant() | undefined,
	total :: unsignedInt() | undefined,
	link :: ['Bundle.Link'()] | undefined,
	entry :: ['Bundle.Entry'()] | undefined,
	signature :: 'Signature'() | undefined}).

-type 'Bundle'() :: #'Bundle'{}.


-record('BodyStructure', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	active :: boolean() | undefined,
	morphology :: 'CodeableConcept'() | undefined,
	location :: 'CodeableConcept'() | undefined,
	locationQualifier :: ['CodeableConcept'()] | undefined,
	description :: string() | undefined,
	image :: ['Attachment'()] | undefined,
	patient :: 'Reference'()}).

-type 'BodyStructure'() :: #'BodyStructure'{}.


-record('BiologicallyDerivedProductStorageScale', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'BiologicallyDerivedProductStorageScale'() :: #'BiologicallyDerivedProductStorageScale'{}.


-record('BiologicallyDerivedProductStatus', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'BiologicallyDerivedProductStatus'() :: #'BiologicallyDerivedProductStatus'{}.


-record('BiologicallyDerivedProductCategory', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'BiologicallyDerivedProductCategory'() :: #'BiologicallyDerivedProductCategory'{}.


-record('BiologicallyDerivedProduct.Storage', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	description :: string() | undefined,
	temperature :: decimal() | undefined,
	scale :: 'BiologicallyDerivedProductStorageScale'() | undefined,
	duration :: 'Period'() | undefined}).

-type 'BiologicallyDerivedProduct.Storage'() :: #'BiologicallyDerivedProduct.Storage'{}.


-record('BiologicallyDerivedProduct.Manipulation', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	description :: string() | undefined,
	choice :: 'Period'() | dateTime() | undefined}).

-type 'BiologicallyDerivedProduct.Manipulation'() :: #'BiologicallyDerivedProduct.Manipulation'{}.


-record('BiologicallyDerivedProduct.Processing', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	description :: string() | undefined,
	procedure :: 'CodeableConcept'() | undefined,
	additive :: 'Reference'() | undefined,
	choice :: 'Period'() | dateTime() | undefined}).

-type 'BiologicallyDerivedProduct.Processing'() :: #'BiologicallyDerivedProduct.Processing'{}.


-record('BiologicallyDerivedProduct.Collection', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	collector :: 'Reference'() | undefined,
	source :: 'Reference'() | undefined,
	choice :: 'Period'() | dateTime() | undefined}).

-type 'BiologicallyDerivedProduct.Collection'() :: #'BiologicallyDerivedProduct.Collection'{}.


-record('BiologicallyDerivedProduct', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	productCategory :: 'BiologicallyDerivedProductCategory'() | undefined,
	productCode :: 'CodeableConcept'() | undefined,
	status :: 'BiologicallyDerivedProductStatus'() | undefined,
	request :: ['Reference'()] | undefined,
	quantity :: integer() | undefined,
	parent :: ['Reference'()] | undefined,
	collection :: 'BiologicallyDerivedProduct.Collection'() | undefined,
	processing :: ['BiologicallyDerivedProduct.Processing'()] | undefined,
	manipulation :: 'BiologicallyDerivedProduct.Manipulation'() | undefined,
	storage :: ['BiologicallyDerivedProduct.Storage'()] | undefined}).

-type 'BiologicallyDerivedProduct'() :: #'BiologicallyDerivedProduct'{}.


-record('Binary', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	contentType :: code(),
	securityContext :: 'Reference'() | undefined,
	data :: base64Binary() | undefined}).

-type 'Binary'() :: #'Binary'{}.


-record('Basic', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	code :: 'CodeableConcept'(),
	subject :: 'Reference'() | undefined,
	created :: date() | undefined,
	author :: 'Reference'() | undefined}).

-type 'Basic'() :: #'Basic'{}.


-record('AuditEventAgentNetworkType', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'AuditEventAgentNetworkType'() :: #'AuditEventAgentNetworkType'{}.


-record('AuditEventAction', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'AuditEventAction'() :: #'AuditEventAction'{}.


-record('AuditEventOutcome', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'AuditEventOutcome'() :: #'AuditEventOutcome'{}.


-record('AuditEvent.Detail', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: string(),
	choice :: string() | base64Binary()}).

-type 'AuditEvent.Detail'() :: #'AuditEvent.Detail'{}.


-record('AuditEvent.Entity', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	what :: 'Reference'() | undefined,
	type :: 'Coding'() | undefined,
	role :: 'Coding'() | undefined,
	lifecycle :: 'Coding'() | undefined,
	securityLabel :: ['Coding'()] | undefined,
	name :: string() | undefined,
	description :: string() | undefined,
	query :: base64Binary() | undefined,
	detail :: ['AuditEvent.Detail'()] | undefined}).

-type 'AuditEvent.Entity'() :: #'AuditEvent.Entity'{}.


-record('AuditEvent.Source', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	site :: string() | undefined,
	observer :: 'Reference'(),
	type :: ['Coding'()] | undefined}).

-type 'AuditEvent.Source'() :: #'AuditEvent.Source'{}.


-record('AuditEvent.Network', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	address :: string() | undefined,
	type :: 'AuditEventAgentNetworkType'() | undefined}).

-type 'AuditEvent.Network'() :: #'AuditEvent.Network'{}.


-record('AuditEvent.Agent', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: 'CodeableConcept'() | undefined,
	role :: ['CodeableConcept'()] | undefined,
	who :: 'Reference'() | undefined,
	altId :: string() | undefined,
	name :: string() | undefined,
	requestor :: boolean(),
	location :: 'Reference'() | undefined,
	policy :: [uri()] | undefined,
	media :: 'Coding'() | undefined,
	network :: 'AuditEvent.Network'() | undefined,
	purposeOfUse :: ['CodeableConcept'()] | undefined}).

-type 'AuditEvent.Agent'() :: #'AuditEvent.Agent'{}.


-record('AuditEvent', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: 'Coding'(),
	subtype :: ['Coding'()] | undefined,
	action :: 'AuditEventAction'() | undefined,
	period :: 'Period'() | undefined,
	recorded :: instant(),
	outcome :: 'AuditEventOutcome'() | undefined,
	outcomeDesc :: string() | undefined,
	purposeOfEvent :: ['CodeableConcept'()] | undefined,
	agent :: ['AuditEvent.Agent'()],
	source :: 'AuditEvent.Source'(),
	entity :: ['AuditEvent.Entity'()] | undefined}).

-type 'AuditEvent'() :: #'AuditEvent'{}.


-record('AppointmentResponse', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	appointment :: 'Reference'(),
	start :: instant() | undefined,
	'end' :: instant() | undefined,
	participantType :: ['CodeableConcept'()] | undefined,
	actor :: 'Reference'() | undefined,
	participantStatus :: 'ParticipationStatus'(),
	comment :: string() | undefined}).

-type 'AppointmentResponse'() :: #'AppointmentResponse'{}.


-record('ParticipationStatus', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'ParticipationStatus'() :: #'ParticipationStatus'{}.


-record('AppointmentStatus', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'AppointmentStatus'() :: #'AppointmentStatus'{}.


-record('ParticipantRequired', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'ParticipantRequired'() :: #'ParticipantRequired'{}.


-record('Appointment.Participant', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: ['CodeableConcept'()] | undefined,
	actor :: 'Reference'() | undefined,
	required :: 'ParticipantRequired'() | undefined,
	status :: 'ParticipationStatus'(),
	period :: 'Period'() | undefined}).

-type 'Appointment.Participant'() :: #'Appointment.Participant'{}.


-record('Appointment', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	status :: 'AppointmentStatus'(),
	cancelationReason :: 'CodeableConcept'() | undefined,
	serviceCategory :: ['CodeableConcept'()] | undefined,
	serviceType :: ['CodeableConcept'()] | undefined,
	specialty :: ['CodeableConcept'()] | undefined,
	appointmentType :: 'CodeableConcept'() | undefined,
	reasonCode :: ['CodeableConcept'()] | undefined,
	reasonReference :: ['Reference'()] | undefined,
	priority :: unsignedInt() | undefined,
	description :: string() | undefined,
	supportingInformation :: ['Reference'()] | undefined,
	start :: instant() | undefined,
	'end' :: instant() | undefined,
	minutesDuration :: positiveInt() | undefined,
	slot :: ['Reference'()] | undefined,
	created :: dateTime() | undefined,
	comment :: string() | undefined,
	patientInstruction :: string() | undefined,
	basedOn :: ['Reference'()] | undefined,
	participant :: ['Appointment.Participant'()],
	requestedPeriod :: ['Period'()] | undefined}).

-type 'Appointment'() :: #'Appointment'{}.


-record('AllergyIntoleranceSeverity', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'AllergyIntoleranceSeverity'() :: #'AllergyIntoleranceSeverity'{}.


-record('AllergyIntoleranceCategory', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'AllergyIntoleranceCategory'() :: #'AllergyIntoleranceCategory'{}.


-record('AllergyIntoleranceType', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'AllergyIntoleranceType'() :: #'AllergyIntoleranceType'{}.


-record('AllergyIntoleranceCriticality', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'AllergyIntoleranceCriticality'() :: #'AllergyIntoleranceCriticality'{}.


-record('AllergyIntolerance.Reaction', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	substance :: 'CodeableConcept'() | undefined,
	manifestation :: ['CodeableConcept'()],
	description :: string() | undefined,
	onset :: dateTime() | undefined,
	severity :: 'AllergyIntoleranceSeverity'() | undefined,
	exposureRoute :: 'CodeableConcept'() | undefined,
	note :: ['Annotation'()] | undefined}).

-type 'AllergyIntolerance.Reaction'() :: #'AllergyIntolerance.Reaction'{}.


-record('AllergyIntolerance', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	clinicalStatus :: 'CodeableConcept'() | undefined,
	verificationStatus :: 'CodeableConcept'() | undefined,
	type :: 'AllergyIntoleranceType'() | undefined,
	category :: ['AllergyIntoleranceCategory'()] | undefined,
	criticality :: 'AllergyIntoleranceCriticality'() | undefined,
	code :: 'CodeableConcept'() | undefined,
	patient :: 'Reference'(),
	encounter :: 'Reference'() | undefined,
	choice :: string() | 'Range'() | 'Period'() | dateTime() | 'Age'() | undefined,
	recordedDate :: dateTime() | undefined,
	recorder :: 'Reference'() | undefined,
	asserter :: 'Reference'() | undefined,
	lastOccurrence :: dateTime() | undefined,
	note :: ['Annotation'()] | undefined,
	reaction :: ['AllergyIntolerance.Reaction'()] | undefined}).

-type 'AllergyIntolerance'() :: #'AllergyIntolerance'{}.


-record('AdverseEventActuality', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'AdverseEventActuality'() :: #'AdverseEventActuality'{}.


-record('AdverseEvent.Causality', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	assessment :: 'CodeableConcept'() | undefined,
	productRelatedness :: string() | undefined,
	author :: 'Reference'() | undefined,
	method :: 'CodeableConcept'() | undefined}).

-type 'AdverseEvent.Causality'() :: #'AdverseEvent.Causality'{}.


-record('AdverseEvent.SuspectEntity', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	instance :: 'Reference'(),
	causality :: ['AdverseEvent.Causality'()] | undefined}).

-type 'AdverseEvent.SuspectEntity'() :: #'AdverseEvent.SuspectEntity'{}.


-record('AdverseEvent', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: 'Identifier'() | undefined,
	actuality :: 'AdverseEventActuality'(),
	category :: ['CodeableConcept'()] | undefined,
	event :: 'CodeableConcept'() | undefined,
	subject :: 'Reference'(),
	encounter :: 'Reference'() | undefined,
	date :: dateTime() | undefined,
	detected :: dateTime() | undefined,
	recordedDate :: dateTime() | undefined,
	resultingCondition :: ['Reference'()] | undefined,
	location :: 'Reference'() | undefined,
	seriousness :: 'CodeableConcept'() | undefined,
	severity :: 'CodeableConcept'() | undefined,
	outcome :: 'CodeableConcept'() | undefined,
	recorder :: 'Reference'() | undefined,
	contributor :: ['Reference'()] | undefined,
	suspectEntity :: ['AdverseEvent.SuspectEntity'()] | undefined,
	subjectMedicalHistory :: ['Reference'()] | undefined,
	referenceDocument :: ['Reference'()] | undefined,
	study :: ['Reference'()] | undefined}).

-type 'AdverseEvent'() :: #'AdverseEvent'{}.


-record('RequestPriority', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'RequestPriority'() :: #'RequestPriority'{}.


-record('RequestResourceType', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'RequestResourceType'() :: #'RequestResourceType'{}.


-record('RequestIntent', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'RequestIntent'() :: #'RequestIntent'{}.


-record('ActionParticipantType', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'ActionParticipantType'() :: #'ActionParticipantType'{}.


-record('ActivityDefinition.DynamicValue', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	path :: string(),
	expression :: 'Expression'()}).

-type 'ActivityDefinition.DynamicValue'() :: #'ActivityDefinition.DynamicValue'{}.


-record('ActivityDefinition.Participant', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: 'ActionParticipantType'(),
	role :: 'CodeableConcept'() | undefined}).

-type 'ActivityDefinition.Participant'() :: #'ActivityDefinition.Participant'{}.


-record('ActivityDefinition', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	url :: uri() | undefined,
	identifier :: ['Identifier'()] | undefined,
	version :: string() | undefined,
	name :: string() | undefined,
	title :: string() | undefined,
	subtitle :: string() | undefined,
	status :: 'PublicationStatus'(),
	experimental :: boolean() | undefined,
	choice :: 'Reference'() | 'CodeableConcept'() | undefined,
	date :: dateTime() | undefined,
	publisher :: string() | undefined,
	contact :: ['ContactDetail'()] | undefined,
	description :: markdown() | undefined,
	useContext :: ['UsageContext'()] | undefined,
	jurisdiction :: ['CodeableConcept'()] | undefined,
	purpose :: markdown() | undefined,
	usage :: string() | undefined,
	copyright :: markdown() | undefined,
	approvalDate :: date() | undefined,
	lastReviewDate :: date() | undefined,
	effectivePeriod :: 'Period'() | undefined,
	topic :: ['CodeableConcept'()] | undefined,
	author :: ['ContactDetail'()] | undefined,
	editor :: ['ContactDetail'()] | undefined,
	reviewer :: ['ContactDetail'()] | undefined,
	endorser :: ['ContactDetail'()] | undefined,
	relatedArtifact :: ['RelatedArtifact'()] | undefined,
	library :: [canonical()] | undefined,
	kind :: 'RequestResourceType'() | undefined,
	profile :: canonical() | undefined,
	code :: 'CodeableConcept'() | undefined,
	intent :: 'RequestIntent'() | undefined,
	priority :: 'RequestPriority'() | undefined,
	doNotPerform :: boolean() | undefined,
	choice1 :: 'Timing'() | 'Range'() | 'Period'() | 'Duration'() | dateTime() | 'Age'() | undefined,
	location :: 'Reference'() | undefined,
	participant :: ['ActivityDefinition.Participant'()] | undefined,
	choice2 :: 'Reference'() | 'CodeableConcept'() | undefined,
	quantity :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	dosage :: ['Dosage'()] | undefined,
	bodySite :: ['CodeableConcept'()] | undefined,
	specimenRequirement :: ['Reference'()] | undefined,
	observationRequirement :: ['Reference'()] | undefined,
	observationResultRequirement :: ['Reference'()] | undefined,
	transform :: canonical() | undefined,
	dynamicValue :: ['ActivityDefinition.DynamicValue'()] | undefined}).

-type 'ActivityDefinition'() :: #'ActivityDefinition'{}.


-record('AccountStatus', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'AccountStatus'() :: #'AccountStatus'{}.


-record('Account.Guarantor', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	party :: 'Reference'(),
	onHold :: boolean() | undefined,
	period :: 'Period'() | undefined}).

-type 'Account.Guarantor'() :: #'Account.Guarantor'{}.


-record('Account.Coverage', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	coverage :: 'Reference'(),
	priority :: positiveInt() | undefined}).

-type 'Account.Coverage'() :: #'Account.Coverage'{}.


-record('Account', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: ['Identifier'()] | undefined,
	status :: 'AccountStatus'(),
	type :: 'CodeableConcept'() | undefined,
	name :: string() | undefined,
	subject :: ['Reference'()] | undefined,
	servicePeriod :: 'Period'() | undefined,
	coverage :: ['Account.Coverage'()] | undefined,
	owner :: 'Reference'() | undefined,
	description :: string() | undefined,
	guarantor :: ['Account.Guarantor'()] | undefined,
	partOf :: 'Reference'() | undefined}).

-type 'Account'() :: #'Account'{}.


-record('DocumentReferenceStatus', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'DocumentReferenceStatus'() :: #'DocumentReferenceStatus'{}.


-record('ConceptMapEquivalence', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'ConceptMapEquivalence'() :: #'ConceptMapEquivalence'{}.


-record('RemittanceOutcome', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'RemittanceOutcome'() :: #'RemittanceOutcome'{}.


-record('NoteType', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'NoteType'() :: #'NoteType'{}.


-record('FHIRVersion', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'FHIRVersion'() :: #'FHIRVersion'{}.


-record('AdministrativeGender', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'AdministrativeGender'() :: #'AdministrativeGender'{}.


-record('SearchParamType', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'SearchParamType'() :: #'SearchParamType'{}.


-record('PublicationStatus', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'PublicationStatus'() :: #'PublicationStatus'{}.


-record('Resource', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined}).

-type 'Resource'() :: #'Resource'{}.


-record('DomainResource', {anyAttribs :: anyAttribs(),
	id :: id() | undefined,
	meta :: 'Meta'() | undefined,
	implicitRules :: uri() | undefined,
	language :: code() | undefined,
	text :: 'Narrative'() | undefined,
	contained :: ['ResourceContainer'()] | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined}).

-type 'DomainResource'() :: #'DomainResource'{}.


-record('DiscriminatorType', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'DiscriminatorType'() :: #'DiscriminatorType'{}.


-record('BindingStrength', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'BindingStrength'() :: #'BindingStrength'{}.


-record('SlicingRules', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'SlicingRules'() :: #'SlicingRules'{}.


-record('ReferenceVersionRules', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'ReferenceVersionRules'() :: #'ReferenceVersionRules'{}.


-record('AggregationMode', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'AggregationMode'() :: #'AggregationMode'{}.


-record('ConstraintSeverity', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'ConstraintSeverity'() :: #'ConstraintSeverity'{}.


-record('PropertyRepresentation', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'PropertyRepresentation'() :: #'PropertyRepresentation'{}.


-record('ElementDefinition.Discriminator', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: 'DiscriminatorType'(),
	path :: string()}).

-type 'ElementDefinition.Discriminator'() :: #'ElementDefinition.Discriminator'{}.


-record('ElementDefinition.Binding', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	strength :: 'BindingStrength'(),
	description :: string() | undefined,
	valueSet :: canonical() | undefined}).

-type 'ElementDefinition.Binding'() :: #'ElementDefinition.Binding'{}.


-record('ElementDefinition.Slicing', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	discriminator :: ['ElementDefinition.Discriminator'()] | undefined,
	description :: string() | undefined,
	ordered :: boolean() | undefined,
	rules :: 'SlicingRules'()}).

-type 'ElementDefinition.Slicing'() :: #'ElementDefinition.Slicing'{}.


-record('ElementDefinition.Example', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	label :: string(),
	choice :: uuid() | 'UsageContext'() | url() | uri() | unsignedInt() | 'TriggerDefinition'() | 'Timing'() | time() | string() | 'Signature'() | 'SampledData'() | 'RelatedArtifact'() | 'Reference'() | 'Ratio'() | 'Range'() | 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | positiveInt() | 'Period'() | 'ParameterDefinition'() | oid() | 'Money'() | markdown() | integer() | instant() | 'Identifier'() | id() | 'HumanName'() | 'Expression'() | 'Duration'() | 'Dosage'() | 'Distance'() | decimal() | dateTime() | date() | 'DataRequirement'() | 'Count'() | 'Contributor'() | 'ContactPoint'() | 'ContactDetail'() | 'Coding'() | 'CodeableConcept'() | code() | canonical() | boolean() | base64Binary() | 'Attachment'() | 'Annotation'() | 'Age'() | 'Address'()}).

-type 'ElementDefinition.Example'() :: #'ElementDefinition.Example'{}.


-record('ElementDefinition.Type', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	code :: uri(),
	profile :: [canonical()] | undefined,
	targetProfile :: [canonical()] | undefined,
	aggregation :: ['AggregationMode'()] | undefined,
	versioning :: 'ReferenceVersionRules'() | undefined}).

-type 'ElementDefinition.Type'() :: #'ElementDefinition.Type'{}.


-record('ElementDefinition.Base', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	path :: string(),
	min :: unsignedInt(),
	max :: string()}).

-type 'ElementDefinition.Base'() :: #'ElementDefinition.Base'{}.


-record('ElementDefinition.Mapping', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identity :: id(),
	language :: code() | undefined,
	map :: string(),
	comment :: string() | undefined}).

-type 'ElementDefinition.Mapping'() :: #'ElementDefinition.Mapping'{}.


-record('ElementDefinition.Constraint', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	key :: id(),
	requirements :: string() | undefined,
	severity :: 'ConstraintSeverity'(),
	human :: string(),
	expression :: string() | undefined,
	xpath :: string() | undefined,
	source :: canonical() | undefined}).

-type 'ElementDefinition.Constraint'() :: #'ElementDefinition.Constraint'{}.


-record('ElementDefinition', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	path :: string(),
	representation :: ['PropertyRepresentation'()] | undefined,
	sliceName :: string() | undefined,
	sliceIsConstraining :: boolean() | undefined,
	label :: string() | undefined,
	code :: ['Coding'()] | undefined,
	slicing :: 'ElementDefinition.Slicing'() | undefined,
	short :: string() | undefined,
	definition :: markdown() | undefined,
	comment :: markdown() | undefined,
	requirements :: markdown() | undefined,
	alias :: [string()] | undefined,
	min :: unsignedInt() | undefined,
	max :: string() | undefined,
	base :: 'ElementDefinition.Base'() | undefined,
	contentReference :: uri() | undefined,
	type :: ['ElementDefinition.Type'()] | undefined,
	choice :: uuid() | 'UsageContext'() | url() | uri() | unsignedInt() | 'TriggerDefinition'() | 'Timing'() | time() | string() | 'Signature'() | 'SampledData'() | 'RelatedArtifact'() | 'Reference'() | 'Ratio'() | 'Range'() | 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | positiveInt() | 'Period'() | 'ParameterDefinition'() | oid() | 'Money'() | markdown() | integer() | instant() | 'Identifier'() | id() | 'HumanName'() | 'Expression'() | 'Duration'() | 'Dosage'() | 'Distance'() | decimal() | dateTime() | date() | 'DataRequirement'() | 'Count'() | 'Contributor'() | 'ContactPoint'() | 'ContactDetail'() | 'Coding'() | 'CodeableConcept'() | code() | canonical() | boolean() | base64Binary() | 'Attachment'() | 'Annotation'() | 'Age'() | 'Address'() | undefined,
	meaningWhenMissing :: markdown() | undefined,
	orderMeaning :: string() | undefined,
	choice1 :: uuid() | 'UsageContext'() | url() | uri() | unsignedInt() | 'TriggerDefinition'() | 'Timing'() | time() | string() | 'Signature'() | 'SampledData'() | 'RelatedArtifact'() | 'Reference'() | 'Ratio'() | 'Range'() | 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | positiveInt() | 'Period'() | 'ParameterDefinition'() | oid() | 'Money'() | markdown() | integer() | instant() | 'Identifier'() | id() | 'HumanName'() | 'Expression'() | 'Duration'() | 'Dosage'() | 'Distance'() | decimal() | dateTime() | date() | 'DataRequirement'() | 'Count'() | 'Contributor'() | 'ContactPoint'() | 'ContactDetail'() | 'Coding'() | 'CodeableConcept'() | code() | canonical() | boolean() | base64Binary() | 'Attachment'() | 'Annotation'() | 'Age'() | 'Address'() | undefined,
	choice2 :: uuid() | 'UsageContext'() | url() | uri() | unsignedInt() | 'TriggerDefinition'() | 'Timing'() | time() | string() | 'Signature'() | 'SampledData'() | 'RelatedArtifact'() | 'Reference'() | 'Ratio'() | 'Range'() | 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | positiveInt() | 'Period'() | 'ParameterDefinition'() | oid() | 'Money'() | markdown() | integer() | instant() | 'Identifier'() | id() | 'HumanName'() | 'Expression'() | 'Duration'() | 'Dosage'() | 'Distance'() | decimal() | dateTime() | date() | 'DataRequirement'() | 'Count'() | 'Contributor'() | 'ContactPoint'() | 'ContactDetail'() | 'Coding'() | 'CodeableConcept'() | code() | canonical() | boolean() | base64Binary() | 'Attachment'() | 'Annotation'() | 'Age'() | 'Address'() | undefined,
	example :: ['ElementDefinition.Example'()] | undefined,
	choice3 :: unsignedInt() | time() | 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | positiveInt() | integer() | instant() | decimal() | dateTime() | date() | undefined,
	choice4 :: unsignedInt() | time() | 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | positiveInt() | integer() | instant() | decimal() | dateTime() | date() | undefined,
	maxLength :: integer() | undefined,
	condition :: [id()] | undefined,
	constraint :: ['ElementDefinition.Constraint'()] | undefined,
	mustSupport :: boolean() | undefined,
	isModifier :: boolean() | undefined,
	isModifierReason :: string() | undefined,
	isSummary :: boolean() | undefined,
	binding :: 'ElementDefinition.Binding'() | undefined,
	mapping :: ['ElementDefinition.Mapping'()] | undefined}).

-type 'ElementDefinition'() :: #'ElementDefinition'{}.


-record('ParameterDefinition', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	name :: code() | undefined,
	use :: code(),
	min :: integer() | undefined,
	max :: string() | undefined,
	documentation :: string() | undefined,
	type :: code(),
	profile :: canonical() | undefined}).

-type 'ParameterDefinition'() :: #'ParameterDefinition'{}.


-record('CodeableConcept', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	coding :: ['Coding'()] | undefined,
	text :: string() | undefined}).

-type 'CodeableConcept'() :: #'CodeableConcept'{}.


-record('ProdCharacteristic', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	height :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	width :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	depth :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	weight :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	nominalVolume :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	externalDiameter :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	shape :: string() | undefined,
	color :: [string()] | undefined,
	imprint :: [string()] | undefined,
	image :: ['Attachment'()] | undefined,
	scoring :: 'CodeableConcept'() | undefined}).

-type 'ProdCharacteristic'() :: #'ProdCharacteristic'{}.


-record('EventTiming', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'EventTiming'() :: #'EventTiming'{}.


-record('UnitsOfTime', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'UnitsOfTime'() :: #'UnitsOfTime'{}.


-record('Timing.Repeat', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	choice :: 'Range'() | 'Period'() | 'Duration'() | undefined,
	count :: positiveInt() | undefined,
	countMax :: positiveInt() | undefined,
	duration :: decimal() | undefined,
	durationMax :: decimal() | undefined,
	durationUnit :: 'UnitsOfTime'() | undefined,
	frequency :: positiveInt() | undefined,
	frequencyMax :: positiveInt() | undefined,
	period :: decimal() | undefined,
	periodMax :: decimal() | undefined,
	periodUnit :: 'UnitsOfTime'() | undefined,
	dayOfWeek :: [code()] | undefined,
	timeOfDay :: [time()] | undefined,
	'when' :: ['EventTiming'()] | undefined,
	offset :: unsignedInt() | undefined}).

-type 'Timing.Repeat'() :: #'Timing.Repeat'{}.


-record('Timing', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	event :: [dateTime()] | undefined,
	repeat :: 'Timing.Repeat'() | undefined,
	code :: 'CodeableConcept'() | undefined}).

-type 'Timing'() :: #'Timing'{}.


-record('Signature', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	type :: ['Coding'()],
	'when' :: instant(),
	who :: 'Reference'(),
	onBehalfOf :: 'Reference'() | undefined,
	targetFormat :: code() | undefined,
	sigFormat :: code() | undefined,
	data :: base64Binary() | undefined}).

-type 'Signature'() :: #'Signature'{}.


-record('ExpressionLanguage', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'ExpressionLanguage'() :: #'ExpressionLanguage'{}.


-record('Expression', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	description :: string() | undefined,
	name :: id() | undefined,
	language :: 'ExpressionLanguage'(),
	expression :: string() | undefined,
	reference :: uri() | undefined}).

-type 'Expression'() :: #'Expression'{}.


-record('UsageContext', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	code :: 'Coding'(),
	choice :: 'Reference'() | 'Range'() | 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | 'CodeableConcept'()}).

-type 'UsageContext'() :: #'UsageContext'{}.


-record('ContactDetail', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	name :: string() | undefined,
	telecom :: ['ContactPoint'()] | undefined}).

-type 'ContactDetail'() :: #'ContactDetail'{}.


-record('ProductShelfLife', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	identifier :: 'Identifier'() | undefined,
	type :: 'CodeableConcept'(),
	period :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'(),
	specialPrecautionsForStorage :: ['CodeableConcept'()] | undefined}).

-type 'ProductShelfLife'() :: #'ProductShelfLife'{}.


-record('Annotation', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	choice :: string() | 'Reference'() | undefined,
	time :: dateTime() | undefined,
	text :: markdown()}).

-type 'Annotation'() :: #'Annotation'{}.


-record('RelatedArtifactType', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'RelatedArtifactType'() :: #'RelatedArtifactType'{}.


-record('RelatedArtifact', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	type :: 'RelatedArtifactType'(),
	label :: string() | undefined,
	display :: string() | undefined,
	citation :: markdown() | undefined,
	url :: url() | undefined,
	document :: 'Attachment'() | undefined,
	resource :: canonical() | undefined}).

-type 'RelatedArtifact'() :: #'RelatedArtifact'{}.


-record('Range', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	low :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	high :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined}).

-type 'Range'() :: #'Range'{}.


-record('Duration', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	value :: decimal() | undefined,
	comparator :: 'QuantityComparator'() | undefined,
	unit :: string() | undefined,
	system :: uri() | undefined,
	code :: code() | undefined}).

-type 'Duration'() :: #'Duration'{}.


-record('Period', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	start :: dateTime() | undefined,
	'end' :: dateTime() | undefined}).

-type 'Period'() :: #'Period'{}.


-record('QuantityComparator', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'QuantityComparator'() :: #'QuantityComparator'{}.


-record('Quantity', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	value :: decimal() | undefined,
	comparator :: 'QuantityComparator'() | undefined,
	unit :: string() | undefined,
	system :: uri() | undefined,
	code :: code() | undefined}).

-type 'Quantity'() :: #'Quantity'{}.


-record('TriggerType', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'TriggerType'() :: #'TriggerType'{}.


-record('TriggerDefinition', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	type :: 'TriggerType'(),
	name :: string() | undefined,
	choice :: 'Timing'() | 'Reference'() | dateTime() | date() | undefined,
	data :: ['DataRequirement'()] | undefined,
	condition :: 'Expression'() | undefined}).

-type 'TriggerDefinition'() :: #'TriggerDefinition'{}.


-record('Reference', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	reference :: string() | undefined,
	type :: uri() | undefined,
	identifier :: 'Identifier'() | undefined,
	display :: string() | undefined}).

-type 'Reference'() :: #'Reference'{}.


-record('Age', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	value :: decimal() | undefined,
	comparator :: 'QuantityComparator'() | undefined,
	unit :: string() | undefined,
	system :: uri() | undefined,
	code :: code() | undefined}).

-type 'Age'() :: #'Age'{}.


-record('Distance', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	value :: decimal() | undefined,
	comparator :: 'QuantityComparator'() | undefined,
	unit :: string() | undefined,
	system :: uri() | undefined,
	code :: code() | undefined}).

-type 'Distance'() :: #'Distance'{}.


-record('Ratio', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	numerator :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	denominator :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined}).

-type 'Ratio'() :: #'Ratio'{}.


-record('Population', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	choice :: 'Range'() | 'CodeableConcept'() | undefined,
	gender :: 'CodeableConcept'() | undefined,
	race :: 'CodeableConcept'() | undefined,
	physiologicalCondition :: 'CodeableConcept'() | undefined}).

-type 'Population'() :: #'Population'{}.


-record('SampledDataDataType', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'SampledDataDataType'() :: #'SampledDataDataType'{}.


-record('SampledData', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	origin :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'(),
	period :: decimal(),
	factor :: decimal() | undefined,
	lowerLimit :: decimal() | undefined,
	upperLimit :: decimal() | undefined,
	dimensions :: positiveInt(),
	data :: 'SampledDataDataType'() | undefined}).

-type 'SampledData'() :: #'SampledData'{}.


-record('Coding', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	system :: uri() | undefined,
	version :: string() | undefined,
	code :: code() | undefined,
	display :: string() | undefined,
	userSelected :: boolean() | undefined}).

-type 'Coding'() :: #'Coding'{}.


-record('SubstanceAmount.ReferenceRange', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	lowLimit :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	highLimit :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined}).

-type 'SubstanceAmount.ReferenceRange'() :: #'SubstanceAmount.ReferenceRange'{}.


-record('SubstanceAmount', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	choice :: string() | 'Range'() | 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	amountType :: 'CodeableConcept'() | undefined,
	amountText :: string() | undefined,
	referenceRange :: 'SubstanceAmount.ReferenceRange'() | undefined}).

-type 'SubstanceAmount'() :: #'SubstanceAmount'{}.


-record('IdentifierUse', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'IdentifierUse'() :: #'IdentifierUse'{}.


-record('Identifier', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	use :: 'IdentifierUse'() | undefined,
	type :: 'CodeableConcept'() | undefined,
	system :: uri() | undefined,
	value :: string() | undefined,
	period :: 'Period'() | undefined,
	assigner :: 'Reference'() | undefined}).

-type 'Identifier'() :: #'Identifier'{}.


-record('MarketingStatus', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	country :: 'CodeableConcept'(),
	jurisdiction :: 'CodeableConcept'() | undefined,
	status :: 'CodeableConcept'(),
	dateRange :: 'Period'(),
	restoreDate :: dateTime() | undefined}).

-type 'MarketingStatus'() :: #'MarketingStatus'{}.


-record('ContactPointUse', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'ContactPointUse'() :: #'ContactPointUse'{}.


-record('ContactPointSystem', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'ContactPointSystem'() :: #'ContactPointSystem'{}.


-record('ContactPoint', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	system :: 'ContactPointSystem'() | undefined,
	value :: string() | undefined,
	use :: 'ContactPointUse'() | undefined,
	rank :: positiveInt() | undefined,
	period :: 'Period'() | undefined}).

-type 'ContactPoint'() :: #'ContactPoint'{}.


-record('NameUse', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'NameUse'() :: #'NameUse'{}.


-record('HumanName', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	use :: 'NameUse'() | undefined,
	text :: string() | undefined,
	family :: string() | undefined,
	given :: [string()] | undefined,
	prefix :: [string()] | undefined,
	suffix :: [string()] | undefined,
	period :: 'Period'() | undefined}).

-type 'HumanName'() :: #'HumanName'{}.


-record('Money', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	value :: decimal() | undefined,
	currency :: code() | undefined}).

-type 'Money'() :: #'Money'{}.


-record('Dosage.DoseAndRate', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	type :: 'CodeableConcept'() | undefined,
	choice :: 'Range'() | 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	choice1 :: 'Ratio'() | 'Range'() | 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined}).

-type 'Dosage.DoseAndRate'() :: #'Dosage.DoseAndRate'{}.


-record('Dosage', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined,
	sequence :: integer() | undefined,
	text :: string() | undefined,
	additionalInstruction :: ['CodeableConcept'()] | undefined,
	patientInstruction :: string() | undefined,
	timing :: 'Timing'() | undefined,
	choice :: 'CodeableConcept'() | boolean() | undefined,
	site :: 'CodeableConcept'() | undefined,
	route :: 'CodeableConcept'() | undefined,
	method :: 'CodeableConcept'() | undefined,
	doseAndRate :: ['Dosage.DoseAndRate'()] | undefined,
	maxDosePerPeriod :: 'Ratio'() | undefined,
	maxDosePerAdministration :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
	maxDosePerLifetime :: 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined}).

-type 'Dosage'() :: #'Dosage'{}.


-record('SortDirection', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'SortDirection'() :: #'SortDirection'{}.


-record('DataRequirement.Sort', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	path :: string(),
	direction :: 'SortDirection'()}).

-type 'DataRequirement.Sort'() :: #'DataRequirement.Sort'{}.


-record('DataRequirement.DateFilter', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	path :: string() | undefined,
	searchParam :: string() | undefined,
	choice :: 'Period'() | 'Duration'() | dateTime() | undefined}).

-type 'DataRequirement.DateFilter'() :: #'DataRequirement.DateFilter'{}.


-record('DataRequirement.CodeFilter', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	path :: string() | undefined,
	searchParam :: string() | undefined,
	valueSet :: canonical() | undefined,
	code :: ['Coding'()] | undefined}).

-type 'DataRequirement.CodeFilter'() :: #'DataRequirement.CodeFilter'{}.


-record('DataRequirement', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	type :: code(),
	profile :: [canonical()] | undefined,
	choice :: 'Reference'() | 'CodeableConcept'() | undefined,
	mustSupport :: [string()] | undefined,
	codeFilter :: ['DataRequirement.CodeFilter'()] | undefined,
	dateFilter :: ['DataRequirement.DateFilter'()] | undefined,
	limit :: positiveInt() | undefined,
	sort :: ['DataRequirement.Sort'()] | undefined}).

-type 'DataRequirement'() :: #'DataRequirement'{}.


-record('Count', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	value :: decimal() | undefined,
	comparator :: 'QuantityComparator'() | undefined,
	unit :: string() | undefined,
	system :: uri() | undefined,
	code :: code() | undefined}).

-type 'Count'() :: #'Count'{}.


-record('Attachment', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	contentType :: code() | undefined,
	language :: code() | undefined,
	data :: base64Binary() | undefined,
	url :: url() | undefined,
	size :: unsignedInt() | undefined,
	hash :: base64Binary() | undefined,
	title :: string() | undefined,
	creation :: dateTime() | undefined}).

-type 'Attachment'() :: #'Attachment'{}.


-record('ContributorType', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'ContributorType'() :: #'ContributorType'{}.


-record('Contributor', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	type :: 'ContributorType'(),
	name :: string(),
	contact :: ['ContactDetail'()] | undefined}).

-type 'Contributor'() :: #'Contributor'{}.


-record('AddressType', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'AddressType'() :: #'AddressType'{}.


-record('AddressUse', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'AddressUse'() :: #'AddressUse'{}.


-record('Address', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	use :: 'AddressUse'() | undefined,
	type :: 'AddressType'() | undefined,
	text :: string() | undefined,
	line :: [string()] | undefined,
	city :: string() | undefined,
	district :: string() | undefined,
	state :: string() | undefined,
	postalCode :: string() | undefined,
	country :: string() | undefined,
	period :: 'Period'() | undefined}).

-type 'Address'() :: #'Address'{}.


-record('Meta', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	versionId :: id() | undefined,
	lastUpdated :: instant() | undefined,
	source :: uri() | undefined,
	profile :: [canonical()] | undefined,
	security :: ['Coding'()] | undefined,
	tag :: ['Coding'()] | undefined}).

-type 'Meta'() :: #'Meta'{}.


-record('Element', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'Element'() :: #'Element'{}.


-record('NarrativeStatus', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type 'NarrativeStatus'() :: #'NarrativeStatus'{}.


-record('Narrative', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	status :: 'NarrativeStatus'(),
	'div' :: 'P:div'()}).

-type 'Narrative'() :: #'Narrative'{}.


-record('BackboneElement', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	extension :: ['Extension'()] | undefined,
	modifierExtension :: ['Extension'()] | undefined}).

-type 'BackboneElement'() :: #'BackboneElement'{}.


-record('Extension', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	url :: string(),
	extension :: ['Extension'()] | undefined,
	choice :: uuid() | 'UsageContext'() | url() | uri() | unsignedInt() | 'TriggerDefinition'() | 'Timing'() | time() | string() | 'Signature'() | 'SampledData'() | 'RelatedArtifact'() | 'Reference'() | 'Ratio'() | 'Range'() | 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | positiveInt() | 'Period'() | 'ParameterDefinition'() | oid() | 'Money'() | markdown() | integer() | instant() | 'Identifier'() | id() | 'HumanName'() | 'Expression'() | 'Duration'() | 'Dosage'() | 'Distance'() | decimal() | dateTime() | date() | 'DataRequirement'() | 'Count'() | 'Contributor'() | 'ContactPoint'() | 'ContactDetail'() | 'Coding'() | 'CodeableConcept'() | code() | canonical() | boolean() | base64Binary() | 'Attachment'() | 'Annotation'() | 'Age'() | 'Address'() | undefined}).

-type 'Extension'() :: #'Extension'{}.


-record('ResourceContainer', {anyAttribs :: anyAttribs(),
	choice :: 'VisionPrescription'() | 'VerificationResult'() | 'ValueSet'() | 'TestScript'() | 'TestReport'() | 'TerminologyCapabilities'() | 'Task'() | 'SupplyRequest'() | 'SupplyDelivery'() | 'SubstanceSpecification'() | 'SubstanceSourceMaterial'() | 'SubstanceReferenceInformation'() | 'SubstanceProtein'() | 'SubstancePolymer'() | 'SubstanceNucleicAcid'() | 'Substance'() | 'Subscription'() | 'StructureMap'() | 'StructureDefinition'() | 'SpecimenDefinition'() | 'Specimen'() | 'Slot'() | 'ServiceRequest'() | 'SearchParameter'() | 'Schedule'() | 'RiskEvidenceSynthesis'() | 'RiskAssessment'() | 'ResearchSubject'() | 'ResearchStudy'() | 'ResearchElementDefinition'() | 'ResearchDefinition'() | 'RequestGroup'() | 'RelatedPerson'() | 'QuestionnaireResponse'() | 'Questionnaire'() | 'Provenance'() | 'Procedure'() | 'PractitionerRole'() | 'Practitioner'() | 'PlanDefinition'() | 'Person'() | 'PaymentReconciliation'() | 'PaymentNotice'() | 'Patient'() | 'Parameters'() | 'OrganizationAffiliation'() | 'Organization'() | 'OperationOutcome'() | 'OperationDefinition'() | 'ObservationDefinition'() | 'Observation'() | 'NutritionOrder'() | 'NamingSystem'() | 'MolecularSequence'() | 'MessageHeader'() | 'MessageDefinition'() | 'MedicinalProductUndesirableEffect'() | 'MedicinalProductPharmaceutical'() | 'MedicinalProductPackaged'() | 'MedicinalProductManufactured'() | 'MedicinalProductInteraction'() | 'MedicinalProductIngredient'() | 'MedicinalProductIndication'() | 'MedicinalProductContraindication'() | 'MedicinalProductAuthorization'() | 'MedicinalProduct'() | 'MedicationStatement'() | 'MedicationRequest'() | 'MedicationKnowledge'() | 'MedicationDispense'() | 'MedicationAdministration'() | 'Medication'() | 'Media'() | 'MeasureReport'() | 'Measure'() | 'Location'() | 'List'() | 'Linkage'() | 'Library'() | 'Invoice'() | 'InsurancePlan'() | 'ImplementationGuide'() | 'ImmunizationRecommendation'() | 'ImmunizationEvaluation'() | 'Immunization'() | 'ImagingStudy'() | 'HealthcareService'() | 'GuidanceResponse'() | 'Group'() | 'GraphDefinition'() | 'Goal'() | 'Flag'() | 'FamilyMemberHistory'() | 'ExplanationOfBenefit'() | 'ExampleScenario'() | 'EvidenceVariable'() | 'Evidence'() | 'EventDefinition'() | 'EpisodeOfCare'() | 'EnrollmentResponse'() | 'EnrollmentRequest'() | 'Endpoint'() | 'Encounter'() | 'EffectEvidenceSynthesis'() | 'DocumentReference'() | 'DocumentManifest'() | 'DiagnosticReport'() | 'DeviceUseStatement'() | 'DeviceRequest'() | 'DeviceMetric'() | 'DeviceDefinition'() | 'Device'() | 'DetectedIssue'() | 'CoverageEligibilityResponse'() | 'CoverageEligibilityRequest'() | 'Coverage'() | 'Contract'() | 'Consent'() | 'Condition'() | 'ConceptMap'() | 'Composition'() | 'CompartmentDefinition'() | 'CommunicationRequest'() | 'Communication'() | 'CodeSystem'() | 'ClinicalImpression'() | 'ClaimResponse'() | 'Claim'() | 'ChargeItemDefinition'() | 'ChargeItem'() | 'CatalogEntry'() | 'CareTeam'() | 'CarePlan'() | 'CapabilityStatement'() | 'Bundle'() | 'BodyStructure'() | 'BiologicallyDerivedProduct'() | 'Binary'() | 'Basic'() | 'AuditEvent'() | 'AppointmentResponse'() | 'Appointment'() | 'AllergyIntolerance'() | 'AdverseEvent'() | 'ActivityDefinition'() | 'Account'()}).

-type 'ResourceContainer'() :: #'ResourceContainer'{}.


-record(decimal, {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type decimal() :: #decimal{}.


-record(positiveInt, {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type positiveInt() :: #positiveInt{}.


-record(id, {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type id() :: #id{}.


-record(time, {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type time() :: #time{}.


-record(markdown, {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type markdown() :: #markdown{}.


-record(unsignedInt, {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type unsignedInt() :: #unsignedInt{}.


-record(base64Binary, {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type base64Binary() :: #base64Binary{}.


-record(boolean, {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type boolean() :: #boolean{}.


-record(instant, {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type instant() :: #instant{}.


-record(url, {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type url() :: #url{}.


-record(uuid, {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type uuid() :: #uuid{}.


-record(uri, {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type uri() :: #uri{}.


-record(canonical, {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type canonical() :: #canonical{}.


-record(oid, {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type oid() :: #oid{}.


-record(integer, {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type integer() :: #integer{}.


-record(string, {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type string() :: #string{}.


-record(code, {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type code() :: #code{}.


-record(dateTime, {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type dateTime() :: #dateTime{}.


-record(date, {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	value :: string() | undefined,
	extension :: ['Extension'()] | undefined}).

-type date() :: #date{}.


-record('P:special.pre', {anyAttribs :: anyAttribs(),
	choice :: 'P:span'() | 'P:map'() | 'P:br'() | 'P:bdo'()}).

-type 'P:special.pre'() :: #'P:special.pre'{}.


-record('P:special', {anyAttribs :: anyAttribs(),
	choice :: 'P:special.pre'() | 'P:special.pre'() | 'P:img'() | 'P:special.pre'() | 'P:special.pre'()}).

-type 'P:special'() :: #'P:special'{}.


-record('P:fontstyle', {anyAttribs :: anyAttribs(),
	choice :: 'P:tt'() | 'P:small'() | 'P:i'() | 'P:big'() | 'P:b'()}).

-type 'P:fontstyle'() :: #'P:fontstyle'{}.


-record('P:phrase', {anyAttribs :: anyAttribs(),
	choice :: 'P:var'() | 'P:sup'() | 'P:sub'() | 'P:strong'() | 'P:samp'() | 'P:q'() | 'P:kbd'() | 'P:em'() | 'P:dfn'() | 'P:code'() | 'P:cite'() | 'P:acronym'() | 'P:abbr'()}).

-type 'P:phrase'() :: #'P:phrase'{}.


-record('P:inline', {anyAttribs :: anyAttribs(),
	choice :: 'P:phrase'() | 'P:fontstyle'() | 'P:phrase'() | 'P:phrase'() | 'P:phrase'() | 'P:special'() | 'P:fontstyle'() | 'P:phrase'() | 'P:phrase'() | 'P:special'() | 'P:phrase'() | 'P:special'() | 'P:fontstyle'() | 'P:phrase'() | 'P:phrase'() | 'P:phrase'() | 'P:phrase'() | 'P:special'() | 'P:fontstyle'() | 'P:special'() | 'P:fontstyle'() | 'P:phrase'() | 'P:phrase'() | 'P:a'()}).

-type 'P:inline'() :: #'P:inline'{}.


-record('P:Inline', {anyAttribs :: anyAttribs(),
	choice :: ['P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | string()]}).

-type 'P:Inline'() :: #'P:Inline'{}.


-record('P:heading', {anyAttribs :: anyAttribs(),
	choice :: 'P:h6'() | 'P:h5'() | 'P:h4'() | 'P:h3'() | 'P:h2'() | 'P:h1'()}).

-type 'P:heading'() :: #'P:heading'{}.


-record('P:lists', {anyAttribs :: anyAttribs(),
	choice :: 'P:ul'() | 'P:ol'() | 'P:dl'()}).

-type 'P:lists'() :: #'P:lists'{}.


-record('P:blocktext', {anyAttribs :: anyAttribs(),
	choice :: 'P:pre'() | 'P:hr'() | 'P:blockquote'() | 'P:address'()}).

-type 'P:blocktext'() :: #'P:blocktext'{}.


-record('P:block', {anyAttribs :: anyAttribs(),
	choice :: 'P:lists'() | 'P:table'() | 'P:blocktext'() | 'P:p'() | 'P:lists'() | 'P:blocktext'() | 'P:heading'() | 'P:heading'() | 'P:heading'() | 'P:heading'() | 'P:heading'() | 'P:heading'() | 'P:lists'() | 'P:div'() | 'P:blocktext'() | 'P:blocktext'()}).

-type 'P:block'() :: #'P:block'{}.


-record('P:Block', {anyAttribs :: anyAttribs(),
	choice :: ['P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'()] | undefined}).

-type 'P:Block'() :: #'P:Block'{}.


-record('P:Flow', {anyAttribs :: anyAttribs(),
	choice :: ['P:inline'() | 'P:block'() | 'P:inline'() | 'P:block'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:inline'() | 'P:block'() | 'P:block'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:block'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:block'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | string()]}).

-type 'P:Flow'() :: #'P:Flow'{}.


-record('P:a.content', {anyAttribs :: anyAttribs(),
	choice :: ['P:phrase'() | 'P:fontstyle'() | 'P:phrase'() | 'P:phrase'() | 'P:phrase'() | 'P:special'() | 'P:fontstyle'() | 'P:phrase'() | 'P:phrase'() | 'P:special'() | 'P:phrase'() | 'P:special'() | 'P:fontstyle'() | 'P:phrase'() | 'P:phrase'() | 'P:phrase'() | 'P:phrase'() | 'P:special'() | 'P:fontstyle'() | 'P:special'() | 'P:fontstyle'() | 'P:phrase'() | 'P:phrase'() | string()]}).

-type 'P:a.content'() :: #'P:a.content'{}.


-record('P:pre.content', {anyAttribs :: anyAttribs(),
	choice :: ['P:phrase'() | 'P:fontstyle'() | 'P:phrase'() | 'P:phrase'() | 'P:phrase'() | 'P:special.pre'() | 'P:fontstyle'() | 'P:phrase'() | 'P:phrase'() | 'P:special.pre'() | 'P:phrase'() | 'P:fontstyle'() | 'P:phrase'() | 'P:phrase'() | 'P:phrase'() | 'P:phrase'() | 'P:special.pre'() | 'P:fontstyle'() | 'P:special.pre'() | 'P:fontstyle'() | 'P:phrase'() | 'P:phrase'() | 'P:a'() | string()]}).

-type 'P:pre.content'() :: #'P:pre.content'{}.


-record('P:div', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	class :: string() | undefined,
	style :: string() | undefined,
	title :: string() | undefined,
	lang :: string() | undefined,
	lang :: string() | undefined,
	dir :: string() | undefined,
	choice :: ['P:inline'() | 'P:block'() | 'P:inline'() | 'P:block'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:inline'() | 'P:block'() | 'P:block'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:block'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:block'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | string()]}).

-type 'P:div'() :: #'P:div'{}.


-record('P:p', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	class :: string() | undefined,
	style :: string() | undefined,
	title :: string() | undefined,
	lang :: string() | undefined,
	lang :: string() | undefined,
	dir :: string() | undefined,
	choice :: ['P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | string()]}).

-type 'P:p'() :: #'P:p'{}.


-record('P:h1', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	class :: string() | undefined,
	style :: string() | undefined,
	title :: string() | undefined,
	lang :: string() | undefined,
	lang :: string() | undefined,
	dir :: string() | undefined,
	choice :: ['P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | string()]}).

-type 'P:h1'() :: #'P:h1'{}.


-record('P:h2', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	class :: string() | undefined,
	style :: string() | undefined,
	title :: string() | undefined,
	lang :: string() | undefined,
	lang :: string() | undefined,
	dir :: string() | undefined,
	choice :: ['P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | string()]}).

-type 'P:h2'() :: #'P:h2'{}.


-record('P:h3', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	class :: string() | undefined,
	style :: string() | undefined,
	title :: string() | undefined,
	lang :: string() | undefined,
	lang :: string() | undefined,
	dir :: string() | undefined,
	choice :: ['P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | string()]}).

-type 'P:h3'() :: #'P:h3'{}.


-record('P:h4', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	class :: string() | undefined,
	style :: string() | undefined,
	title :: string() | undefined,
	lang :: string() | undefined,
	lang :: string() | undefined,
	dir :: string() | undefined,
	choice :: ['P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | string()]}).

-type 'P:h4'() :: #'P:h4'{}.


-record('P:h5', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	class :: string() | undefined,
	style :: string() | undefined,
	title :: string() | undefined,
	lang :: string() | undefined,
	lang :: string() | undefined,
	dir :: string() | undefined,
	choice :: ['P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | string()]}).

-type 'P:h5'() :: #'P:h5'{}.


-record('P:h6', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	class :: string() | undefined,
	style :: string() | undefined,
	title :: string() | undefined,
	lang :: string() | undefined,
	lang :: string() | undefined,
	dir :: string() | undefined,
	choice :: ['P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | string()]}).

-type 'P:h6'() :: #'P:h6'{}.


-record('P:ul', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	class :: string() | undefined,
	style :: string() | undefined,
	title :: string() | undefined,
	lang :: string() | undefined,
	lang :: string() | undefined,
	dir :: string() | undefined,
	li :: ['P:li'()]}).

-type 'P:ul'() :: #'P:ul'{}.


-record('P:ol', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	class :: string() | undefined,
	style :: string() | undefined,
	title :: string() | undefined,
	lang :: string() | undefined,
	lang :: string() | undefined,
	dir :: string() | undefined,
	li :: ['P:li'()]}).

-type 'P:ol'() :: #'P:ol'{}.


-record('P:li', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	class :: string() | undefined,
	style :: string() | undefined,
	title :: string() | undefined,
	lang :: string() | undefined,
	lang :: string() | undefined,
	dir :: string() | undefined,
	choice :: ['P:inline'() | 'P:block'() | 'P:inline'() | 'P:block'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:inline'() | 'P:block'() | 'P:block'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:block'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:block'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | string()]}).

-type 'P:li'() :: #'P:li'{}.


-record('P:dl', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	class :: string() | undefined,
	style :: string() | undefined,
	title :: string() | undefined,
	lang :: string() | undefined,
	lang :: string() | undefined,
	dir :: string() | undefined,
	choice :: ['P:dt'() | 'P:dd'()]}).

-type 'P:dl'() :: #'P:dl'{}.


-record('P:dt', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	class :: string() | undefined,
	style :: string() | undefined,
	title :: string() | undefined,
	lang :: string() | undefined,
	lang :: string() | undefined,
	dir :: string() | undefined,
	choice :: ['P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | string()]}).

-type 'P:dt'() :: #'P:dt'{}.


-record('P:dd', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	class :: string() | undefined,
	style :: string() | undefined,
	title :: string() | undefined,
	lang :: string() | undefined,
	lang :: string() | undefined,
	dir :: string() | undefined,
	choice :: ['P:inline'() | 'P:block'() | 'P:inline'() | 'P:block'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:inline'() | 'P:block'() | 'P:block'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:block'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:block'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | string()]}).

-type 'P:dd'() :: #'P:dd'{}.


-record('P:address', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	class :: string() | undefined,
	style :: string() | undefined,
	title :: string() | undefined,
	lang :: string() | undefined,
	lang :: string() | undefined,
	dir :: string() | undefined,
	choice :: ['P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | string()]}).

-type 'P:address'() :: #'P:address'{}.


-record('P:hr', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	class :: string() | undefined,
	style :: string() | undefined,
	title :: string() | undefined,
	lang :: string() | undefined,
	lang :: string() | undefined,
	dir :: string() | undefined}).

-type 'P:hr'() :: #'P:hr'{}.


-record('P:pre', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	class :: string() | undefined,
	style :: string() | undefined,
	title :: string() | undefined,
	lang :: string() | undefined,
	lang :: string() | undefined,
	dir :: string() | undefined,
	space :: string() | undefined,
	choice :: ['P:phrase'() | 'P:fontstyle'() | 'P:phrase'() | 'P:phrase'() | 'P:phrase'() | 'P:special.pre'() | 'P:fontstyle'() | 'P:phrase'() | 'P:phrase'() | 'P:special.pre'() | 'P:phrase'() | 'P:fontstyle'() | 'P:phrase'() | 'P:phrase'() | 'P:phrase'() | 'P:phrase'() | 'P:special.pre'() | 'P:fontstyle'() | 'P:special.pre'() | 'P:fontstyle'() | 'P:phrase'() | 'P:phrase'() | 'P:a'() | string()]}).

-type 'P:pre'() :: #'P:pre'{}.


-record('P:blockquote', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	class :: string() | undefined,
	style :: string() | undefined,
	title :: string() | undefined,
	lang :: string() | undefined,
	lang :: string() | undefined,
	dir :: string() | undefined,
	cite :: string() | undefined,
	choice :: ['P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'()] | undefined}).

-type 'P:blockquote'() :: #'P:blockquote'{}.


-record('P:a', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	class :: string() | undefined,
	style :: string() | undefined,
	title :: string() | undefined,
	lang :: string() | undefined,
	lang :: string() | undefined,
	dir :: string() | undefined,
	accesskey :: string() | undefined,
	tabindex :: string() | undefined,
	charset :: string() | undefined,
	type :: string() | undefined,
	name :: string() | undefined,
	href :: string() | undefined,
	hreflang :: string() | undefined,
	rel :: string() | undefined,
	rev :: string() | undefined,
	shape :: string() | undefined,
	coords :: string() | undefined,
	choice :: ['P:phrase'() | 'P:fontstyle'() | 'P:phrase'() | 'P:phrase'() | 'P:phrase'() | 'P:special'() | 'P:fontstyle'() | 'P:phrase'() | 'P:phrase'() | 'P:special'() | 'P:phrase'() | 'P:special'() | 'P:fontstyle'() | 'P:phrase'() | 'P:phrase'() | 'P:phrase'() | 'P:phrase'() | 'P:special'() | 'P:fontstyle'() | 'P:special'() | 'P:fontstyle'() | 'P:phrase'() | 'P:phrase'() | string()]}).

-type 'P:a'() :: #'P:a'{}.


-record('P:span', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	class :: string() | undefined,
	style :: string() | undefined,
	title :: string() | undefined,
	lang :: string() | undefined,
	lang :: string() | undefined,
	dir :: string() | undefined,
	choice :: ['P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | string()]}).

-type 'P:span'() :: #'P:span'{}.


-record('P:bdo', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	class :: string() | undefined,
	style :: string() | undefined,
	title :: string() | undefined,
	lang :: string() | undefined,
	lang :: string() | undefined,
	dir :: string(),
	choice :: ['P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | string()]}).

-type 'P:bdo'() :: #'P:bdo'{}.


-record('P:br', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	class :: string() | undefined,
	style :: string() | undefined,
	title :: string() | undefined}).

-type 'P:br'() :: #'P:br'{}.


-record('P:em', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	class :: string() | undefined,
	style :: string() | undefined,
	title :: string() | undefined,
	lang :: string() | undefined,
	lang :: string() | undefined,
	dir :: string() | undefined,
	choice :: ['P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | string()]}).

-type 'P:em'() :: #'P:em'{}.


-record('P:strong', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	class :: string() | undefined,
	style :: string() | undefined,
	title :: string() | undefined,
	lang :: string() | undefined,
	lang :: string() | undefined,
	dir :: string() | undefined,
	choice :: ['P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | string()]}).

-type 'P:strong'() :: #'P:strong'{}.


-record('P:dfn', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	class :: string() | undefined,
	style :: string() | undefined,
	title :: string() | undefined,
	lang :: string() | undefined,
	lang :: string() | undefined,
	dir :: string() | undefined,
	choice :: ['P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | string()]}).

-type 'P:dfn'() :: #'P:dfn'{}.


-record('P:code', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	class :: string() | undefined,
	style :: string() | undefined,
	title :: string() | undefined,
	lang :: string() | undefined,
	lang :: string() | undefined,
	dir :: string() | undefined,
	choice :: ['P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | string()]}).

-type 'P:code'() :: #'P:code'{}.


-record('P:samp', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	class :: string() | undefined,
	style :: string() | undefined,
	title :: string() | undefined,
	lang :: string() | undefined,
	lang :: string() | undefined,
	dir :: string() | undefined,
	choice :: ['P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | string()]}).

-type 'P:samp'() :: #'P:samp'{}.


-record('P:kbd', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	class :: string() | undefined,
	style :: string() | undefined,
	title :: string() | undefined,
	lang :: string() | undefined,
	lang :: string() | undefined,
	dir :: string() | undefined,
	choice :: ['P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | string()]}).

-type 'P:kbd'() :: #'P:kbd'{}.


-record('P:var', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	class :: string() | undefined,
	style :: string() | undefined,
	title :: string() | undefined,
	lang :: string() | undefined,
	lang :: string() | undefined,
	dir :: string() | undefined,
	choice :: ['P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | string()]}).

-type 'P:var'() :: #'P:var'{}.


-record('P:cite', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	class :: string() | undefined,
	style :: string() | undefined,
	title :: string() | undefined,
	lang :: string() | undefined,
	lang :: string() | undefined,
	dir :: string() | undefined,
	choice :: ['P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | string()]}).

-type 'P:cite'() :: #'P:cite'{}.


-record('P:abbr', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	class :: string() | undefined,
	style :: string() | undefined,
	title :: string() | undefined,
	lang :: string() | undefined,
	lang :: string() | undefined,
	dir :: string() | undefined,
	choice :: ['P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | string()]}).

-type 'P:abbr'() :: #'P:abbr'{}.


-record('P:acronym', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	class :: string() | undefined,
	style :: string() | undefined,
	title :: string() | undefined,
	lang :: string() | undefined,
	lang :: string() | undefined,
	dir :: string() | undefined,
	choice :: ['P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | string()]}).

-type 'P:acronym'() :: #'P:acronym'{}.


-record('P:q', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	class :: string() | undefined,
	style :: string() | undefined,
	title :: string() | undefined,
	lang :: string() | undefined,
	lang :: string() | undefined,
	dir :: string() | undefined,
	cite :: string() | undefined,
	choice :: ['P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | string()]}).

-type 'P:q'() :: #'P:q'{}.


-record('P:sub', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	class :: string() | undefined,
	style :: string() | undefined,
	title :: string() | undefined,
	lang :: string() | undefined,
	lang :: string() | undefined,
	dir :: string() | undefined,
	choice :: ['P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | string()]}).

-type 'P:sub'() :: #'P:sub'{}.


-record('P:sup', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	class :: string() | undefined,
	style :: string() | undefined,
	title :: string() | undefined,
	lang :: string() | undefined,
	lang :: string() | undefined,
	dir :: string() | undefined,
	choice :: ['P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | string()]}).

-type 'P:sup'() :: #'P:sup'{}.


-record('P:tt', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	class :: string() | undefined,
	style :: string() | undefined,
	title :: string() | undefined,
	lang :: string() | undefined,
	lang :: string() | undefined,
	dir :: string() | undefined,
	choice :: ['P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | string()]}).

-type 'P:tt'() :: #'P:tt'{}.


-record('P:i', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	class :: string() | undefined,
	style :: string() | undefined,
	title :: string() | undefined,
	lang :: string() | undefined,
	lang :: string() | undefined,
	dir :: string() | undefined,
	choice :: ['P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | string()]}).

-type 'P:i'() :: #'P:i'{}.


-record('P:b', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	class :: string() | undefined,
	style :: string() | undefined,
	title :: string() | undefined,
	lang :: string() | undefined,
	lang :: string() | undefined,
	dir :: string() | undefined,
	choice :: ['P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | string()]}).

-type 'P:b'() :: #'P:b'{}.


-record('P:big', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	class :: string() | undefined,
	style :: string() | undefined,
	title :: string() | undefined,
	lang :: string() | undefined,
	lang :: string() | undefined,
	dir :: string() | undefined,
	choice :: ['P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | string()]}).

-type 'P:big'() :: #'P:big'{}.


-record('P:small', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	class :: string() | undefined,
	style :: string() | undefined,
	title :: string() | undefined,
	lang :: string() | undefined,
	lang :: string() | undefined,
	dir :: string() | undefined,
	choice :: ['P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | string()]}).

-type 'P:small'() :: #'P:small'{}.


-record('P:img', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	class :: string() | undefined,
	style :: string() | undefined,
	title :: string() | undefined,
	lang :: string() | undefined,
	lang :: string() | undefined,
	dir :: string() | undefined,
	src :: string(),
	alt :: string(),
	longdesc :: string() | undefined,
	height :: string() | undefined,
	width :: string() | undefined,
	usemap :: string() | undefined,
	ismap :: string() | undefined}).

-type 'P:img'() :: #'P:img'{}.


-record('P:map/CH1', {anyAttribs :: anyAttribs(),
	choice :: ['P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'()]}).

-type 'P:map/CH1'() :: #'P:map/CH1'{}.


-record('P:map', {anyAttribs :: anyAttribs(),
	lang :: string() | undefined,
	lang :: string() | undefined,
	dir :: string() | undefined,
	id :: string(),
	class :: string() | undefined,
	style :: string() | undefined,
	title :: string() | undefined,
	name :: string() | undefined,
	choice :: 'P:map/CH1'() | 'P:map/CH1'() | 'P:map/CH1'() | 'P:map/CH1'() | 'P:map/CH1'() | 'P:map/CH1'() | 'P:map/CH1'() | 'P:map/CH1'() | 'P:map/CH1'() | 'P:map/CH1'() | 'P:map/CH1'() | 'P:map/CH1'() | 'P:map/CH1'() | 'P:map/CH1'() | 'P:map/CH1'() | ['P:area'()] | 'P:map/CH1'()}).

-type 'P:map'() :: #'P:map'{}.


-record('P:area', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	class :: string() | undefined,
	style :: string() | undefined,
	title :: string() | undefined,
	lang :: string() | undefined,
	lang :: string() | undefined,
	dir :: string() | undefined,
	accesskey :: string() | undefined,
	tabindex :: string() | undefined,
	shape :: string() | undefined,
	coords :: string() | undefined,
	href :: string() | undefined,
	nohref :: string() | undefined,
	alt :: string()}).

-type 'P:area'() :: #'P:area'{}.


-record('P:table', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	class :: string() | undefined,
	style :: string() | undefined,
	title :: string() | undefined,
	lang :: string() | undefined,
	lang :: string() | undefined,
	dir :: string() | undefined,
	summary :: string() | undefined,
	width :: string() | undefined,
	border :: string() | undefined,
	frame :: string() | undefined,
	rules :: string() | undefined,
	cellspacing :: string() | undefined,
	cellpadding :: string() | undefined,
	caption :: 'P:caption'() | undefined,
	choice :: ['P:colgroup'()] | ['P:col'()] | undefined,
	thead :: 'P:thead'() | undefined,
	tfoot :: 'P:tfoot'() | undefined,
	choice1 :: ['P:tr'()] | ['P:tbody'()]}).

-type 'P:table'() :: #'P:table'{}.


-record('P:caption', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	class :: string() | undefined,
	style :: string() | undefined,
	title :: string() | undefined,
	lang :: string() | undefined,
	lang :: string() | undefined,
	dir :: string() | undefined,
	choice :: ['P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | string()]}).

-type 'P:caption'() :: #'P:caption'{}.


-record('P:thead', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	class :: string() | undefined,
	style :: string() | undefined,
	title :: string() | undefined,
	lang :: string() | undefined,
	lang :: string() | undefined,
	dir :: string() | undefined,
	align :: string() | undefined,
	char :: string() | undefined,
	charoff :: string() | undefined,
	valign :: string() | undefined,
	tr :: ['P:tr'()]}).

-type 'P:thead'() :: #'P:thead'{}.


-record('P:tfoot', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	class :: string() | undefined,
	style :: string() | undefined,
	title :: string() | undefined,
	lang :: string() | undefined,
	lang :: string() | undefined,
	dir :: string() | undefined,
	align :: string() | undefined,
	char :: string() | undefined,
	charoff :: string() | undefined,
	valign :: string() | undefined,
	tr :: ['P:tr'()]}).

-type 'P:tfoot'() :: #'P:tfoot'{}.


-record('P:tbody', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	class :: string() | undefined,
	style :: string() | undefined,
	title :: string() | undefined,
	lang :: string() | undefined,
	lang :: string() | undefined,
	dir :: string() | undefined,
	align :: string() | undefined,
	char :: string() | undefined,
	charoff :: string() | undefined,
	valign :: string() | undefined,
	tr :: ['P:tr'()]}).

-type 'P:tbody'() :: #'P:tbody'{}.


-record('P:colgroup', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	class :: string() | undefined,
	style :: string() | undefined,
	title :: string() | undefined,
	lang :: string() | undefined,
	lang :: string() | undefined,
	dir :: string() | undefined,
	span :: string() | undefined,
	width :: string() | undefined,
	align :: string() | undefined,
	char :: string() | undefined,
	charoff :: string() | undefined,
	valign :: string() | undefined,
	col :: ['P:col'()] | undefined}).

-type 'P:colgroup'() :: #'P:colgroup'{}.


-record('P:col', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	class :: string() | undefined,
	style :: string() | undefined,
	title :: string() | undefined,
	lang :: string() | undefined,
	lang :: string() | undefined,
	dir :: string() | undefined,
	span :: string() | undefined,
	width :: string() | undefined,
	align :: string() | undefined,
	char :: string() | undefined,
	charoff :: string() | undefined,
	valign :: string() | undefined}).

-type 'P:col'() :: #'P:col'{}.


-record('P:tr', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	class :: string() | undefined,
	style :: string() | undefined,
	title :: string() | undefined,
	lang :: string() | undefined,
	lang :: string() | undefined,
	dir :: string() | undefined,
	align :: string() | undefined,
	char :: string() | undefined,
	charoff :: string() | undefined,
	valign :: string() | undefined,
	choice :: ['P:th'() | 'P:td'()]}).

-type 'P:tr'() :: #'P:tr'{}.


-record('P:th', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	class :: string() | undefined,
	style :: string() | undefined,
	title :: string() | undefined,
	lang :: string() | undefined,
	lang :: string() | undefined,
	dir :: string() | undefined,
	abbr :: string() | undefined,
	axis :: string() | undefined,
	headers :: string() | undefined,
	scope :: string() | undefined,
	rowspan :: string() | undefined,
	colspan :: string() | undefined,
	align :: string() | undefined,
	char :: string() | undefined,
	charoff :: string() | undefined,
	valign :: string() | undefined,
	choice :: ['P:inline'() | 'P:block'() | 'P:inline'() | 'P:block'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:inline'() | 'P:block'() | 'P:block'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:block'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:block'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | string()]}).

-type 'P:th'() :: #'P:th'{}.


-record('P:td', {anyAttribs :: anyAttribs(),
	id :: string() | undefined,
	class :: string() | undefined,
	style :: string() | undefined,
	title :: string() | undefined,
	lang :: string() | undefined,
	lang :: string() | undefined,
	dir :: string() | undefined,
	abbr :: string() | undefined,
	axis :: string() | undefined,
	headers :: string() | undefined,
	scope :: string() | undefined,
	rowspan :: string() | undefined,
	colspan :: string() | undefined,
	align :: string() | undefined,
	char :: string() | undefined,
	charoff :: string() | undefined,
	valign :: string() | undefined,
	choice :: ['P:inline'() | 'P:block'() | 'P:inline'() | 'P:block'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:block'() | 'P:inline'() | 'P:block'() | 'P:block'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:block'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | 'P:block'() | 'P:inline'() | 'P:inline'() | 'P:inline'() | string()]}).

-type 'P:td'() :: #'P:td'{}.